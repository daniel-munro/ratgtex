var LocusBrowser=function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=17)}({0:function(t,e,i){var n;
/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */!function(e,i){"use strict";"object"==typeof t.exports?t.exports=e.document?i(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(e)}("undefined"!=typeof window?window:this,(function(i,s){"use strict";var r=[],a=Object.getPrototypeOf,o=r.slice,l=r.flat?function(t){return r.flat.call(t)}:function(t){return r.concat.apply([],t)},u=r.push,h=r.indexOf,c={},d=c.toString,p=c.hasOwnProperty,f=p.toString,g=f.call(Object),m={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},b=function(t){return null!=t&&t===t.window},y=i.document,_={type:!0,src:!0,nonce:!0,noModule:!0};function x(t,e,i){var n,s,r=(i=i||y).createElement("script");if(r.text=t,e)for(n in _)(s=e[n]||e.getAttribute&&e.getAttribute(n))&&r.setAttribute(n,s);i.head.appendChild(r).parentNode.removeChild(r)}function w(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?c[d.call(t)]||"object":typeof t}var S=function(t,e){return new S.fn.init(t,e)};function C(t){var e=!!t&&"length"in t&&t.length,i=w(t);return!v(t)&&!b(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}S.fn=S.prototype={jquery:"3.6.0",constructor:S,length:0,toArray:function(){return o.call(this)},get:function(t){return null==t?o.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=S.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return S.each(this,t)},map:function(t){return this.pushStack(S.map(this,(function(e,i){return t.call(e,i,e)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(S.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:r.sort,splice:r.splice},S.extend=S.fn.extend=function(){var t,e,i,n,s,r,a=arguments[0]||{},o=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[o]||{},o++),"object"==typeof a||v(a)||(a={}),o===l&&(a=this,o--);o<l;o++)if(null!=(t=arguments[o]))for(e in t)n=t[e],"__proto__"!==e&&a!==n&&(u&&n&&(S.isPlainObject(n)||(s=Array.isArray(n)))?(i=a[e],r=s&&!Array.isArray(i)?[]:s||S.isPlainObject(i)?i:{},s=!1,a[e]=S.extend(u,r,n)):void 0!==n&&(a[e]=n));return a},S.extend({expando:"jQuery"+("3.6.0"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==d.call(t))&&(!(e=a(t))||"function"==typeof(i=p.call(e,"constructor")&&e.constructor)&&f.call(i)===g)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){x(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,n=0;if(C(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},makeArray:function(t,e){var i=e||[];return null!=t&&(C(Object(t))?S.merge(i,"string"==typeof t?[t]:t):u.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:h.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,s=t.length;n<i;n++)t[s++]=e[n];return t.length=s,t},grep:function(t,e,i){for(var n=[],s=0,r=t.length,a=!i;s<r;s++)!e(t[s],s)!==a&&n.push(t[s]);return n},map:function(t,e,i){var n,s,r=0,a=[];if(C(t))for(n=t.length;r<n;r++)null!=(s=e(t[r],r,i))&&a.push(s);else for(r in t)null!=(s=e(t[r],r,i))&&a.push(s);return l(a)},guid:1,support:m}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=r[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){c["[object "+e+"]"]=e.toLowerCase()}));var k=
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
function(t){var e,i,n,s,r,a,o,l,u,h,c,d,p,f,g,m,v,b,y,_="sizzle"+1*new Date,x=t.document,w=0,S=0,C=lt(),k=lt(),D=lt(),T=lt(),A=function(t,e){return t===e&&(c=!0),0},M={}.hasOwnProperty,I=[],E=I.pop,P=I.push,N=I.push,H=I.slice,z=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",q="(?:\\\\[\\da-fA-F]{1,6}"+O+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",G="\\["+O+"*("+q+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+O+"*\\]",R=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+G+")*)|.*)\\)|)",F=new RegExp(O+"+","g"),B=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),W=new RegExp("^"+O+"*,"+O+"*"),j=new RegExp("^"+O+"*([>+~]|"+O+")"+O+"*"),$=new RegExp(O+"|>"),U=new RegExp(R),V=new RegExp("^"+q+"$"),Y={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+G),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+O+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}"+O+"?|\\\\([^\\r\\n\\f])","g"),it=function(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320))},nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,st=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=function(){d()},at=_t((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{N.apply(I=H.call(x.childNodes),x.childNodes),I[x.childNodes.length].nodeType}catch(t){N={apply:I.length?function(t,e){P.apply(t,H.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}function ot(t,e,n,s){var r,o,u,h,c,f,v,b=e&&e.ownerDocument,x=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==x&&9!==x&&11!==x)return n;if(!s&&(d(e),e=e||p,g)){if(11!==x&&(c=Z.exec(t)))if(r=c[1]){if(9===x){if(!(u=e.getElementById(r)))return n;if(u.id===r)return n.push(u),n}else if(b&&(u=b.getElementById(r))&&y(e,u)&&u.id===r)return n.push(u),n}else{if(c[2])return N.apply(n,e.getElementsByTagName(t)),n;if((r=c[3])&&i.getElementsByClassName&&e.getElementsByClassName)return N.apply(n,e.getElementsByClassName(r)),n}if(i.qsa&&!T[t+" "]&&(!m||!m.test(t))&&(1!==x||"object"!==e.nodeName.toLowerCase())){if(v=t,b=e,1===x&&($.test(t)||j.test(t))){for((b=tt.test(t)&&vt(e.parentNode)||e)===e&&i.scope||((h=e.getAttribute("id"))?h=h.replace(nt,st):e.setAttribute("id",h=_)),o=(f=a(t)).length;o--;)f[o]=(h?"#"+h:":scope")+" "+yt(f[o]);v=f.join(",")}try{return N.apply(n,b.querySelectorAll(v)),n}catch(e){T(t,!0)}finally{h===_&&e.removeAttribute("id")}}}return l(t.replace(B,"$1"),e,n,s)}function lt(){var t=[];return function e(i,s){return t.push(i+" ")>n.cacheLength&&delete e[t.shift()],e[i+" "]=s}}function ut(t){return t[_]=!0,t}function ht(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ct(t,e){for(var i=t.split("|"),s=i.length;s--;)n.attrHandle[i[s]]=e}function dt(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&at(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return ut((function(e){return e=+e,ut((function(i,n){for(var s,r=t([],i.length,e),a=r.length;a--;)i[s=r[a]]&&(i[s]=!(n[s]=i[s]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in i=ot.support={},r=ot.isXML=function(t){var e=t&&t.namespaceURI,i=t&&(t.ownerDocument||t).documentElement;return!X.test(e||i&&i.nodeName||"HTML")},d=ot.setDocument=function(t){var e,s,a=t?t.ownerDocument||t:x;return a!=p&&9===a.nodeType&&a.documentElement?(f=(p=a).documentElement,g=!r(p),x!=p&&(s=p.defaultView)&&s.top!==s&&(s.addEventListener?s.addEventListener("unload",rt,!1):s.attachEvent&&s.attachEvent("onunload",rt)),i.scope=ht((function(t){return f.appendChild(t).appendChild(p.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),i.attributes=ht((function(t){return t.className="i",!t.getAttribute("className")})),i.getElementsByTagName=ht((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),i.getElementsByClassName=J.test(p.getElementsByClassName),i.getById=ht((function(t){return f.appendChild(t).id=_,!p.getElementsByName||!p.getElementsByName(_).length})),i.getById?(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){return t.getAttribute("id")===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var i=e.getElementById(t);return i?[i]:[]}}):(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var i,n,s,r=e.getElementById(t);if(r){if((i=r.getAttributeNode("id"))&&i.value===t)return[r];for(s=e.getElementsByName(t),n=0;r=s[n++];)if((i=r.getAttributeNode("id"))&&i.value===t)return[r]}return[]}}),n.find.TAG=i.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):i.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],s=0,r=e.getElementsByTagName(t);if("*"===t){for(;i=r[s++];)1===i.nodeType&&n.push(i);return n}return r},n.find.CLASS=i.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(i.qsa=J.test(p.querySelectorAll))&&(ht((function(t){var e;f.appendChild(t).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+O+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+O+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+_+"-]").length||m.push("~="),(e=p.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||m.push("\\["+O+"*name"+O+"*="+O+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+_+"+*").length||m.push(".#.+[+~]"),t.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ht((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+O+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(i.matchesSelector=J.test(b=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ht((function(t){i.disconnectedMatch=b.call(t,"*"),b.call(t,"[s!='']:x"),v.push("!=",R)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=J.test(f.compareDocumentPosition),y=e||J.test(f.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},A=e?function(t,e){if(t===e)return c=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!i.sortDetached&&e.compareDocumentPosition(t)===n?t==p||t.ownerDocument==x&&y(x,t)?-1:e==p||e.ownerDocument==x&&y(x,e)?1:h?z(h,t)-z(h,e):0:4&n?-1:1)}:function(t,e){if(t===e)return c=!0,0;var i,n=0,s=t.parentNode,r=e.parentNode,a=[t],o=[e];if(!s||!r)return t==p?-1:e==p?1:s?-1:r?1:h?z(h,t)-z(h,e):0;if(s===r)return dt(t,e);for(i=t;i=i.parentNode;)a.unshift(i);for(i=e;i=i.parentNode;)o.unshift(i);for(;a[n]===o[n];)n++;return n?dt(a[n],o[n]):a[n]==x?-1:o[n]==x?1:0},p):p},ot.matches=function(t,e){return ot(t,null,null,e)},ot.matchesSelector=function(t,e){if(d(t),i.matchesSelector&&g&&!T[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var n=b.call(t,e);if(n||i.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){T(e,!0)}return ot(e,p,null,[t]).length>0},ot.contains=function(t,e){return(t.ownerDocument||t)!=p&&d(t),y(t,e)},ot.attr=function(t,e){(t.ownerDocument||t)!=p&&d(t);var s=n.attrHandle[e.toLowerCase()],r=s&&M.call(n.attrHandle,e.toLowerCase())?s(t,e,!g):void 0;return void 0!==r?r:i.attributes||!g?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},ot.escape=function(t){return(t+"").replace(nt,st)},ot.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ot.uniqueSort=function(t){var e,n=[],s=0,r=0;if(c=!i.detectDuplicates,h=!i.sortStable&&t.slice(0),t.sort(A),c){for(;e=t[r++];)e===t[r]&&(s=n.push(r));for(;s--;)t.splice(n[s],1)}return h=null,t},s=ot.getText=function(t){var e,i="",n=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=s(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[n++];)i+=s(e);return i},(n=ot.selectors={cacheLength:50,createPseudo:ut,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,it),t[3]=(t[3]||t[4]||t[5]||"").replace(et,it),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ot.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ot.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return Y.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&U.test(i)&&(e=a(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,it).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=C[t+" "];return e||(e=new RegExp("(^|"+O+")"+t+"("+O+"|$)"))&&C(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,i){return function(n){var s=ot.attr(n,t);return null==s?"!="===e:!e||(s+="","="===e?s===i:"!="===e?s!==i:"^="===e?i&&0===s.indexOf(i):"*="===e?i&&s.indexOf(i)>-1:"$="===e?i&&s.slice(-i.length)===i:"~="===e?(" "+s.replace(F," ")+" ").indexOf(i)>-1:"|="===e&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,i,n,s){var r="nth"!==t.slice(0,3),a="last"!==t.slice(-4),o="of-type"===e;return 1===n&&0===s?function(t){return!!t.parentNode}:function(e,i,l){var u,h,c,d,p,f,g=r!==a?"nextSibling":"previousSibling",m=e.parentNode,v=o&&e.nodeName.toLowerCase(),b=!l&&!o,y=!1;if(m){if(r){for(;g;){for(d=e;d=d[g];)if(o?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=g="only"===t&&!f&&"nextSibling"}return!0}if(f=[a?m.firstChild:m.lastChild],a&&b){for(y=(p=(u=(h=(c=(d=m)[_]||(d[_]={}))[d.uniqueID]||(c[d.uniqueID]={}))[t]||[])[0]===w&&u[1])&&u[2],d=p&&m.childNodes[p];d=++p&&d&&d[g]||(y=p=0)||f.pop();)if(1===d.nodeType&&++y&&d===e){h[t]=[w,p,y];break}}else if(b&&(y=p=(u=(h=(c=(d=e)[_]||(d[_]={}))[d.uniqueID]||(c[d.uniqueID]={}))[t]||[])[0]===w&&u[1]),!1===y)for(;(d=++p&&d&&d[g]||(y=p=0)||f.pop())&&((o?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++y||(b&&((h=(c=d[_]||(d[_]={}))[d.uniqueID]||(c[d.uniqueID]={}))[t]=[w,y]),d!==e)););return(y-=s)===n||y%n==0&&y/n>=0}}},PSEUDO:function(t,e){var i,s=n.pseudos[t]||n.setFilters[t.toLowerCase()]||ot.error("unsupported pseudo: "+t);return s[_]?s(e):s.length>1?(i=[t,t,"",e],n.setFilters.hasOwnProperty(t.toLowerCase())?ut((function(t,i){for(var n,r=s(t,e),a=r.length;a--;)t[n=z(t,r[a])]=!(i[n]=r[a])})):function(t){return s(t,0,i)}):s}},pseudos:{not:ut((function(t){var e=[],i=[],n=o(t.replace(B,"$1"));return n[_]?ut((function(t,e,i,s){for(var r,a=n(t,null,s,[]),o=t.length;o--;)(r=a[o])&&(t[o]=!(e[o]=r))})):function(t,s,r){return e[0]=t,n(e,null,r,i),e[0]=null,!i.pop()}})),has:ut((function(t){return function(e){return ot(t,e).length>0}})),contains:ut((function(t){return t=t.replace(et,it),function(e){return(e.textContent||s(e)).indexOf(t)>-1}})),lang:ut((function(t){return V.test(t||"")||ot.error("unsupported lang: "+t),t=t.replace(et,it).toLowerCase(),function(e){var i;do{if(i=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!n.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return K.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt((function(){return[0]})),last:mt((function(t,e){return[e-1]})),eq:mt((function(t,e,i){return[i<0?i+e:i]})),even:mt((function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t})),odd:mt((function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t})),lt:mt((function(t,e,i){for(var n=i<0?i+e:i>e?e:i;--n>=0;)t.push(n);return t})),gt:mt((function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t}))}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})n.pseudos[e]=ft(e);function bt(){}function yt(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function _t(t,e,i){var n=e.dir,s=e.next,r=s||n,a=i&&"parentNode"===r,o=S++;return e.first?function(e,i,s){for(;e=e[n];)if(1===e.nodeType||a)return t(e,i,s);return!1}:function(e,i,l){var u,h,c,d=[w,o];if(l){for(;e=e[n];)if((1===e.nodeType||a)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||a)if(h=(c=e[_]||(e[_]={}))[e.uniqueID]||(c[e.uniqueID]={}),s&&s===e.nodeName.toLowerCase())e=e[n]||e;else{if((u=h[r])&&u[0]===w&&u[1]===o)return d[2]=u[2];if(h[r]=d,d[2]=t(e,i,l))return!0}return!1}}function xt(t){return t.length>1?function(e,i,n){for(var s=t.length;s--;)if(!t[s](e,i,n))return!1;return!0}:t[0]}function wt(t,e,i,n,s){for(var r,a=[],o=0,l=t.length,u=null!=e;o<l;o++)(r=t[o])&&(i&&!i(r,n,s)||(a.push(r),u&&e.push(o)));return a}function St(t,e,i,n,s,r){return n&&!n[_]&&(n=St(n)),s&&!s[_]&&(s=St(s,r)),ut((function(r,a,o,l){var u,h,c,d=[],p=[],f=a.length,g=r||function(t,e,i){for(var n=0,s=e.length;n<s;n++)ot(t,e[n],i);return i}(e||"*",o.nodeType?[o]:o,[]),m=!t||!r&&e?g:wt(g,d,t,o,l),v=i?s||(r?t:f||n)?[]:a:m;if(i&&i(m,v,o,l),n)for(u=wt(v,p),n(u,[],o,l),h=u.length;h--;)(c=u[h])&&(v[p[h]]=!(m[p[h]]=c));if(r){if(s||t){if(s){for(u=[],h=v.length;h--;)(c=v[h])&&u.push(m[h]=c);s(null,v=[],u,l)}for(h=v.length;h--;)(c=v[h])&&(u=s?z(r,c):d[h])>-1&&(r[u]=!(a[u]=c))}}else v=wt(v===a?v.splice(f,v.length):v),s?s(null,a,v,l):N.apply(a,v)}))}function Ct(t){for(var e,i,s,r=t.length,a=n.relative[t[0].type],o=a||n.relative[" "],l=a?1:0,h=_t((function(t){return t===e}),o,!0),c=_t((function(t){return z(e,t)>-1}),o,!0),d=[function(t,i,n){var s=!a&&(n||i!==u)||((e=i).nodeType?h(t,i,n):c(t,i,n));return e=null,s}];l<r;l++)if(i=n.relative[t[l].type])d=[_t(xt(d),i)];else{if((i=n.filter[t[l].type].apply(null,t[l].matches))[_]){for(s=++l;s<r&&!n.relative[t[s].type];s++);return St(l>1&&xt(d),l>1&&yt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(B,"$1"),i,l<s&&Ct(t.slice(l,s)),s<r&&Ct(t=t.slice(s)),s<r&&yt(t))}d.push(i)}return xt(d)}return bt.prototype=n.filters=n.pseudos,n.setFilters=new bt,a=ot.tokenize=function(t,e){var i,s,r,a,o,l,u,h=k[t+" "];if(h)return e?0:h.slice(0);for(o=t,l=[],u=n.preFilter;o;){for(a in i&&!(s=W.exec(o))||(s&&(o=o.slice(s[0].length)||o),l.push(r=[])),i=!1,(s=j.exec(o))&&(i=s.shift(),r.push({value:i,type:s[0].replace(B," ")}),o=o.slice(i.length)),n.filter)!(s=Y[a].exec(o))||u[a]&&!(s=u[a](s))||(i=s.shift(),r.push({value:i,type:a,matches:s}),o=o.slice(i.length));if(!i)break}return e?o.length:o?ot.error(t):k(t,l).slice(0)},o=ot.compile=function(t,e){var i,s=[],r=[],o=D[t+" "];if(!o){for(e||(e=a(t)),i=e.length;i--;)(o=Ct(e[i]))[_]?s.push(o):r.push(o);(o=D(t,function(t,e){var i=e.length>0,s=t.length>0,r=function(r,a,o,l,h){var c,f,m,v=0,b="0",y=r&&[],_=[],x=u,S=r||s&&n.find.TAG("*",h),C=w+=null==x?1:Math.random()||.1,k=S.length;for(h&&(u=a==p||a||h);b!==k&&null!=(c=S[b]);b++){if(s&&c){for(f=0,a||c.ownerDocument==p||(d(c),o=!g);m=t[f++];)if(m(c,a||p,o)){l.push(c);break}h&&(w=C)}i&&((c=!m&&c)&&v--,r&&y.push(c))}if(v+=b,i&&b!==v){for(f=0;m=e[f++];)m(y,_,a,o);if(r){if(v>0)for(;b--;)y[b]||_[b]||(_[b]=E.call(l));_=wt(_)}N.apply(l,_),h&&!r&&_.length>0&&v+e.length>1&&ot.uniqueSort(l)}return h&&(w=C,u=x),y};return i?ut(r):r}(r,s))).selector=t}return o},l=ot.select=function(t,e,i,s){var r,l,u,h,c,d="function"==typeof t&&t,p=!s&&a(t=d.selector||t);if(i=i||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===e.nodeType&&g&&n.relative[l[1].type]){if(!(e=(n.find.ID(u.matches[0].replace(et,it),e)||[])[0]))return i;d&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(r=Y.needsContext.test(t)?0:l.length;r--&&(u=l[r],!n.relative[h=u.type]);)if((c=n.find[h])&&(s=c(u.matches[0].replace(et,it),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(r,1),!(t=s.length&&yt(l)))return N.apply(i,s),i;break}}return(d||o(t,p))(s,e,!g,i,!e||tt.test(t)&&vt(e.parentNode)||e),i},i.sortStable=_.split("").sort(A).join("")===_,i.detectDuplicates=!!c,d(),i.sortDetached=ht((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),ht((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ct("type|href|height|width",(function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),i.attributes&&ht((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ct("value",(function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ht((function(t){return null==t.getAttribute("disabled")}))||ct(L,(function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null})),ot}(i);S.find=k,S.expr=k.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=k.uniqueSort,S.text=k.getText,S.isXMLDoc=k.isXML,S.contains=k.contains,S.escapeSelector=k.escape;var D=function(t,e,i){for(var n=[],s=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&S(t).is(i))break;n.push(t)}return n},T=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},A=S.expr.match.needsContext;function M(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var I=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function E(t,e,i){return v(e)?S.grep(t,(function(t,n){return!!e.call(t,n,t)!==i})):e.nodeType?S.grep(t,(function(t){return t===e!==i})):"string"!=typeof e?S.grep(t,(function(t){return h.call(e,t)>-1!==i})):S.filter(e,t,i)}S.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?S.find.matchesSelector(n,t)?[n]:[]:S.find.matches(t,S.grep(e,(function(t){return 1===t.nodeType})))},S.fn.extend({find:function(t){var e,i,n=this.length,s=this;if("string"!=typeof t)return this.pushStack(S(t).filter((function(){for(e=0;e<n;e++)if(S.contains(s[e],this))return!0})));for(i=this.pushStack([]),e=0;e<n;e++)S.find(t,s[e],i);return n>1?S.uniqueSort(i):i},filter:function(t){return this.pushStack(E(this,t||[],!1))},not:function(t){return this.pushStack(E(this,t||[],!0))},is:function(t){return!!E(this,"string"==typeof t&&A.test(t)?S(t):t||[],!1).length}});var P,N=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(t,e,i){var n,s;if(!t)return this;if(i=i||P,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:N.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof S?e[0]:e,S.merge(this,S.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:y,!0)),I.test(n[1])&&S.isPlainObject(e))for(n in e)v(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(s=y.getElementById(n[2]))&&(this[0]=s,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==i.ready?i.ready(t):t(S):S.makeArray(t,this)}).prototype=S.fn,P=S(y);var H=/^(?:parents|prev(?:Until|All))/,z={children:!0,contents:!0,next:!0,prev:!0};function L(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}S.fn.extend({has:function(t){var e=S(t,this),i=e.length;return this.filter((function(){for(var t=0;t<i;t++)if(S.contains(this,e[t]))return!0}))},closest:function(t,e){var i,n=0,s=this.length,r=[],a="string"!=typeof t&&S(t);if(!A.test(t))for(;n<s;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(a?a.index(i)>-1:1===i.nodeType&&S.find.matchesSelector(i,t))){r.push(i);break}return this.pushStack(r.length>1?S.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?h.call(S(t),this[0]):h.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),S.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return D(t,"parentNode")},parentsUntil:function(t,e,i){return D(t,"parentNode",i)},next:function(t){return L(t,"nextSibling")},prev:function(t){return L(t,"previousSibling")},nextAll:function(t){return D(t,"nextSibling")},prevAll:function(t){return D(t,"previousSibling")},nextUntil:function(t,e,i){return D(t,"nextSibling",i)},prevUntil:function(t,e,i){return D(t,"previousSibling",i)},siblings:function(t){return T((t.parentNode||{}).firstChild,t)},children:function(t){return T(t.firstChild)},contents:function(t){return null!=t.contentDocument&&a(t.contentDocument)?t.contentDocument:(M(t,"template")&&(t=t.content||t),S.merge([],t.childNodes))}},(function(t,e){S.fn[t]=function(i,n){var s=S.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=S.filter(n,s)),this.length>1&&(z[t]||S.uniqueSort(s),H.test(t)&&s.reverse()),this.pushStack(s)}}));var O=/[^\x20\t\r\n\f]+/g;function q(t){return t}function G(t){throw t}function R(t,e,i,n){var s;try{t&&v(s=t.promise)?s.call(t).done(e).fail(i):t&&v(s=t.then)?s.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}S.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return S.each(t.match(O)||[],(function(t,i){e[i]=!0})),e}(t):S.extend({},t);var e,i,n,s,r=[],a=[],o=-1,l=function(){for(s=s||t.once,n=e=!0;a.length;o=-1)for(i=a.shift();++o<r.length;)!1===r[o].apply(i[0],i[1])&&t.stopOnFalse&&(o=r.length,i=!1);t.memory||(i=!1),e=!1,s&&(r=i?[]:"")},u={add:function(){return r&&(i&&!e&&(o=r.length-1,a.push(i)),function e(i){S.each(i,(function(i,n){v(n)?t.unique&&u.has(n)||r.push(n):n&&n.length&&"string"!==w(n)&&e(n)}))}(arguments),i&&!e&&l()),this},remove:function(){return S.each(arguments,(function(t,e){for(var i;(i=S.inArray(e,r,i))>-1;)r.splice(i,1),i<=o&&o--})),this},has:function(t){return t?S.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return s=a=[],r=i="",this},disabled:function(){return!r},lock:function(){return s=a=[],i||e||(r=i=""),this},locked:function(){return!!s},fireWith:function(t,i){return s||(i=[t,(i=i||[]).slice?i.slice():i],a.push(i),e||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!n}};return u},S.extend({Deferred:function(t){var e=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],n="pending",s={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var t=arguments;return S.Deferred((function(i){S.each(e,(function(e,n){var s=v(t[n[4]])&&t[n[4]];r[n[1]]((function(){var t=s&&s.apply(this,arguments);t&&v(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[n[0]+"With"](this,s?[t]:arguments)}))})),t=null})).promise()},then:function(t,n,s){var r=0;function a(t,e,n,s){return function(){var o=this,l=arguments,u=function(){var i,u;if(!(t<r)){if((i=n.apply(o,l))===e.promise())throw new TypeError("Thenable self-resolution");u=i&&("object"==typeof i||"function"==typeof i)&&i.then,v(u)?s?u.call(i,a(r,e,q,s),a(r,e,G,s)):(r++,u.call(i,a(r,e,q,s),a(r,e,G,s),a(r,e,q,e.notifyWith))):(n!==q&&(o=void 0,l=[i]),(s||e.resolveWith)(o,l))}},h=s?u:function(){try{u()}catch(i){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(i,h.stackTrace),t+1>=r&&(n!==G&&(o=void 0,l=[i]),e.rejectWith(o,l))}};t?h():(S.Deferred.getStackHook&&(h.stackTrace=S.Deferred.getStackHook()),i.setTimeout(h))}}return S.Deferred((function(i){e[0][3].add(a(0,i,v(s)?s:q,i.notifyWith)),e[1][3].add(a(0,i,v(t)?t:q)),e[2][3].add(a(0,i,v(n)?n:G))})).promise()},promise:function(t){return null!=t?S.extend(t,s):s}},r={};return S.each(e,(function(t,i){var a=i[2],o=i[5];s[i[1]]=a.add,o&&a.add((function(){n=o}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),a.add(i[3].fire),r[i[0]]=function(){return r[i[0]+"With"](this===r?void 0:this,arguments),this},r[i[0]+"With"]=a.fireWith})),s.promise(r),t&&t.call(r,r),r},when:function(t){var e=arguments.length,i=e,n=Array(i),s=o.call(arguments),r=S.Deferred(),a=function(t){return function(i){n[t]=this,s[t]=arguments.length>1?o.call(arguments):i,--e||r.resolveWith(n,s)}};if(e<=1&&(R(t,r.done(a(i)).resolve,r.reject,!e),"pending"===r.state()||v(s[i]&&s[i].then)))return r.then();for(;i--;)R(s[i],a(i),r.reject);return r.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(t,e){i.console&&i.console.warn&&t&&F.test(t.name)&&i.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},S.readyException=function(t){i.setTimeout((function(){throw t}))};var B=S.Deferred();function W(){y.removeEventListener("DOMContentLoaded",W),i.removeEventListener("load",W),S.ready()}S.fn.ready=function(t){return B.then(t).catch((function(t){S.readyException(t)})),this},S.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--S.readyWait:S.isReady)||(S.isReady=!0,!0!==t&&--S.readyWait>0||B.resolveWith(y,[S]))}}),S.ready.then=B.then,"complete"===y.readyState||"loading"!==y.readyState&&!y.documentElement.doScroll?i.setTimeout(S.ready):(y.addEventListener("DOMContentLoaded",W),i.addEventListener("load",W));var j=function(t,e,i,n,s,r,a){var o=0,l=t.length,u=null==i;if("object"===w(i))for(o in s=!0,i)j(t,e,o,i[o],!0,r,a);else if(void 0!==n&&(s=!0,v(n)||(a=!0),u&&(a?(e.call(t,n),e=null):(u=e,e=function(t,e,i){return u.call(S(t),i)})),e))for(;o<l;o++)e(t[o],i,a?n:n.call(t[o],o,e(t[o],i)));return s?t:u?e.call(t):l?e(t[0],i):r},$=/^-ms-/,U=/-([a-z])/g;function V(t,e){return e.toUpperCase()}function Y(t){return t.replace($,"ms-").replace(U,V)}var X=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function K(){this.expando=S.expando+K.uid++}K.uid=1,K.prototype={cache:function(t){var e=t[this.expando];return e||(e={},X(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,s=this.cache(t);if("string"==typeof e)s[Y(e)]=i;else for(n in e)s[Y(n)]=e[n];return s},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][Y(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(Y):(e=Y(e))in n?[e]:e.match(O)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||S.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!S.isEmptyObject(e)}};var Q=new K,J=new K,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,tt=/[A-Z]/g;function et(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(tt,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Z.test(t)?JSON.parse(t):t)}(i)}catch(t){}J.set(t,e,i)}else i=void 0;return i}S.extend({hasData:function(t){return J.hasData(t)||Q.hasData(t)},data:function(t,e,i){return J.access(t,e,i)},removeData:function(t,e){J.remove(t,e)},_data:function(t,e,i){return Q.access(t,e,i)},_removeData:function(t,e){Q.remove(t,e)}}),S.fn.extend({data:function(t,e){var i,n,s,r=this[0],a=r&&r.attributes;if(void 0===t){if(this.length&&(s=J.get(r),1===r.nodeType&&!Q.get(r,"hasDataAttrs"))){for(i=a.length;i--;)a[i]&&0===(n=a[i].name).indexOf("data-")&&(n=Y(n.slice(5)),et(r,n,s[n]));Q.set(r,"hasDataAttrs",!0)}return s}return"object"==typeof t?this.each((function(){J.set(this,t)})):j(this,(function(e){var i;if(r&&void 0===e)return void 0!==(i=J.get(r,t))||void 0!==(i=et(r,t))?i:void 0;this.each((function(){J.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){J.remove(this,t)}))}}),S.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=Q.get(t,e),i&&(!n||Array.isArray(i)?n=Q.access(t,e,S.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=S.queue(t,e),n=i.length,s=i.shift(),r=S._queueHooks(t,e);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===e&&i.unshift("inprogress"),delete r.stop,s.call(t,(function(){S.dequeue(t,e)}),r)),!n&&r&&r.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return Q.get(t,i)||Q.access(t,i,{empty:S.Callbacks("once memory").add((function(){Q.remove(t,[e+"queue",i])}))})}}),S.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?S.queue(this[0],t):void 0===e?this:this.each((function(){var i=S.queue(this,t,e);S._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&S.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){S.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,s=S.Deferred(),r=this,a=this.length,o=function(){--n||s.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(i=Q.get(r[a],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(o));return o(),s.promise(e)}});var it=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,nt=new RegExp("^(?:([+-])=|)("+it+")([a-z%]*)$","i"),st=["Top","Right","Bottom","Left"],rt=y.documentElement,at=function(t){return S.contains(t.ownerDocument,t)},ot={composed:!0};rt.getRootNode&&(at=function(t){return S.contains(t.ownerDocument,t)||t.getRootNode(ot)===t.ownerDocument});var lt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at(t)&&"none"===S.css(t,"display")};function ut(t,e,i,n){var s,r,a=20,o=n?function(){return n.cur()}:function(){return S.css(t,e,"")},l=o(),u=i&&i[3]||(S.cssNumber[e]?"":"px"),h=t.nodeType&&(S.cssNumber[e]||"px"!==u&&+l)&&nt.exec(S.css(t,e));if(h&&h[3]!==u){for(l/=2,u=u||h[3],h=+l||1;a--;)S.style(t,e,h+u),(1-r)*(1-(r=o()/l||.5))<=0&&(a=0),h/=r;h*=2,S.style(t,e,h+u),i=i||[]}return i&&(h=+h||+l||0,s=i[1]?h+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=h,n.end=s)),s}var ht={};function ct(t){var e,i=t.ownerDocument,n=t.nodeName,s=ht[n];return s||(e=i.body.appendChild(i.createElement(n)),s=S.css(e,"display"),e.parentNode.removeChild(e),"none"===s&&(s="block"),ht[n]=s,s)}function dt(t,e){for(var i,n,s=[],r=0,a=t.length;r<a;r++)(n=t[r]).style&&(i=n.style.display,e?("none"===i&&(s[r]=Q.get(n,"display")||null,s[r]||(n.style.display="")),""===n.style.display&&lt(n)&&(s[r]=ct(n))):"none"!==i&&(s[r]="none",Q.set(n,"display",i)));for(r=0;r<a;r++)null!=s[r]&&(t[r].style.display=s[r]);return t}S.fn.extend({show:function(){return dt(this,!0)},hide:function(){return dt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){lt(this)?S(this).show():S(this).hide()}))}});var pt,ft,gt=/^(?:checkbox|radio)$/i,mt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,vt=/^$|^module$|\/(?:java|ecma)script/i;pt=y.createDocumentFragment().appendChild(y.createElement("div")),(ft=y.createElement("input")).setAttribute("type","radio"),ft.setAttribute("checked","checked"),ft.setAttribute("name","t"),pt.appendChild(ft),m.checkClone=pt.cloneNode(!0).cloneNode(!0).lastChild.checked,pt.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!pt.cloneNode(!0).lastChild.defaultValue,pt.innerHTML="<option></option>",m.option=!!pt.lastChild;var bt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function yt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&M(t,e)?S.merge([t],i):i}function _t(t,e){for(var i=0,n=t.length;i<n;i++)Q.set(t[i],"globalEval",!e||Q.get(e[i],"globalEval"))}bt.tbody=bt.tfoot=bt.colgroup=bt.caption=bt.thead,bt.th=bt.td,m.option||(bt.optgroup=bt.option=[1,"<select multiple='multiple'>","</select>"]);var xt=/<|&#?\w+;/;function wt(t,e,i,n,s){for(var r,a,o,l,u,h,c=e.createDocumentFragment(),d=[],p=0,f=t.length;p<f;p++)if((r=t[p])||0===r)if("object"===w(r))S.merge(d,r.nodeType?[r]:r);else if(xt.test(r)){for(a=a||c.appendChild(e.createElement("div")),o=(mt.exec(r)||["",""])[1].toLowerCase(),l=bt[o]||bt._default,a.innerHTML=l[1]+S.htmlPrefilter(r)+l[2],h=l[0];h--;)a=a.lastChild;S.merge(d,a.childNodes),(a=c.firstChild).textContent=""}else d.push(e.createTextNode(r));for(c.textContent="",p=0;r=d[p++];)if(n&&S.inArray(r,n)>-1)s&&s.push(r);else if(u=at(r),a=yt(c.appendChild(r),"script"),u&&_t(a),i)for(h=0;r=a[h++];)vt.test(r.type||"")&&i.push(r);return c}var St=/^([^.]*)(?:\.(.+)|)/;function Ct(){return!0}function kt(){return!1}function Dt(t,e){return t===function(){try{return y.activeElement}catch(t){}}()==("focus"===e)}function Tt(t,e,i,n,s,r){var a,o;if("object"==typeof e){for(o in"string"!=typeof i&&(n=n||i,i=void 0),e)Tt(t,o,i,n,e[o],r);return t}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=kt;else if(!s)return t;return 1===r&&(a=s,(s=function(t){return S().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=S.guid++)),t.each((function(){S.event.add(this,e,s,n,i)}))}function At(t,e,i){i?(Q.set(t,e,!1),S.event.add(t,e,{namespace:!1,handler:function(t){var n,s,r=Q.get(this,e);if(1&t.isTrigger&&this[e]){if(r.length)(S.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=o.call(arguments),Q.set(this,e,r),n=i(this,e),this[e](),r!==(s=Q.get(this,e))||n?Q.set(this,e,!1):s={},r!==s)return t.stopImmediatePropagation(),t.preventDefault(),s&&s.value}else r.length&&(Q.set(this,e,{value:S.event.trigger(S.extend(r[0],S.Event.prototype),r.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===Q.get(t,e)&&S.event.add(t,e,Ct)}S.event={global:{},add:function(t,e,i,n,s){var r,a,o,l,u,h,c,d,p,f,g,m=Q.get(t);if(X(t))for(i.handler&&(i=(r=i).handler,s=r.selector),s&&S.find.matchesSelector(rt,s),i.guid||(i.guid=S.guid++),(l=m.events)||(l=m.events=Object.create(null)),(a=m.handle)||(a=m.handle=function(e){return void 0!==S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(O)||[""]).length;u--;)p=g=(o=St.exec(e[u])||[])[1],f=(o[2]||"").split(".").sort(),p&&(c=S.event.special[p]||{},p=(s?c.delegateType:c.bindType)||p,c=S.event.special[p]||{},h=S.extend({type:p,origType:g,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&S.expr.match.needsContext.test(s),namespace:f.join(".")},r),(d=l[p])||((d=l[p]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,n,f,a)||t.addEventListener&&t.addEventListener(p,a)),c.add&&(c.add.call(t,h),h.handler.guid||(h.handler.guid=i.guid)),s?d.splice(d.delegateCount++,0,h):d.push(h),S.event.global[p]=!0)},remove:function(t,e,i,n,s){var r,a,o,l,u,h,c,d,p,f,g,m=Q.hasData(t)&&Q.get(t);if(m&&(l=m.events)){for(u=(e=(e||"").match(O)||[""]).length;u--;)if(p=g=(o=St.exec(e[u])||[])[1],f=(o[2]||"").split(".").sort(),p){for(c=S.event.special[p]||{},d=l[p=(n?c.delegateType:c.bindType)||p]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=r=d.length;r--;)h=d[r],!s&&g!==h.origType||i&&i.guid!==h.guid||o&&!o.test(h.namespace)||n&&n!==h.selector&&("**"!==n||!h.selector)||(d.splice(r,1),h.selector&&d.delegateCount--,c.remove&&c.remove.call(t,h));a&&!d.length&&(c.teardown&&!1!==c.teardown.call(t,f,m.handle)||S.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)S.event.remove(t,p+e[u],i,n,!0);S.isEmptyObject(l)&&Q.remove(t,"handle events")}},dispatch:function(t){var e,i,n,s,r,a,o=new Array(arguments.length),l=S.event.fix(t),u=(Q.get(this,"events")||Object.create(null))[l.type]||[],h=S.event.special[l.type]||{};for(o[0]=l,e=1;e<arguments.length;e++)o[e]=arguments[e];if(l.delegateTarget=this,!h.preDispatch||!1!==h.preDispatch.call(this,l)){for(a=S.event.handlers.call(this,l,u),e=0;(s=a[e++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(r=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(n=((S.event.special[r.origType]||{}).handle||r.handler).apply(s.elem,o))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,n,s,r,a,o=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(r=[],a={},i=0;i<l;i++)void 0===a[s=(n=e[i]).selector+" "]&&(a[s]=n.needsContext?S(s,this).index(u)>-1:S.find(s,this,null,[u]).length),a[s]&&r.push(n);r.length&&o.push({elem:u,handlers:r})}return u=this,l<e.length&&o.push({elem:u,handlers:e.slice(l)}),o},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[S.expando]?t:new S.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return gt.test(e.type)&&e.click&&M(e,"input")&&At(e,"click",Ct),!1},trigger:function(t){var e=this||t;return gt.test(e.type)&&e.click&&M(e,"input")&&At(e,"click"),!0},_default:function(t){var e=t.target;return gt.test(e.type)&&e.click&&M(e,"input")&&Q.get(e,"click")||M(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},S.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},S.Event=function(t,e){if(!(this instanceof S.Event))return new S.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Ct:kt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&S.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:kt,isPropagationStopped:kt,isImmediatePropagationStopped:kt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Ct,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Ct,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Ct,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},(function(t,e){S.event.special[t]={setup:function(){return At(this,t,Dt),!1},trigger:function(){return At(this,t),!0},_default:function(){return!0},delegateType:e}})),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){S.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,s=t.relatedTarget,r=t.handleObj;return s&&(s===n||S.contains(n,s))||(t.type=r.origType,i=r.handler.apply(this,arguments),t.type=e),i}}})),S.fn.extend({on:function(t,e,i,n){return Tt(this,t,e,i,n)},one:function(t,e,i,n){return Tt(this,t,e,i,n,1)},off:function(t,e,i){var n,s;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,S(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=kt),this.each((function(){S.event.remove(this,t,i,e)}))}});var Mt=/<script|<style|<link/i,It=/checked\s*(?:[^=]|=\s*.checked.)/i,Et=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Pt(t,e){return M(t,"table")&&M(11!==e.nodeType?e:e.firstChild,"tr")&&S(t).children("tbody")[0]||t}function Nt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ht(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function zt(t,e){var i,n,s,r,a,o;if(1===e.nodeType){if(Q.hasData(t)&&(o=Q.get(t).events))for(s in Q.remove(e,"handle events"),o)for(i=0,n=o[s].length;i<n;i++)S.event.add(e,s,o[s][i]);J.hasData(t)&&(r=J.access(t),a=S.extend({},r),J.set(e,a))}}function Lt(t,e){var i=e.nodeName.toLowerCase();"input"===i&&gt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function Ot(t,e,i,n){e=l(e);var s,r,a,o,u,h,c=0,d=t.length,p=d-1,f=e[0],g=v(f);if(g||d>1&&"string"==typeof f&&!m.checkClone&&It.test(f))return t.each((function(s){var r=t.eq(s);g&&(e[0]=f.call(this,s,r.html())),Ot(r,e,i,n)}));if(d&&(r=(s=wt(e,t[0].ownerDocument,!1,t,n)).firstChild,1===s.childNodes.length&&(s=r),r||n)){for(o=(a=S.map(yt(s,"script"),Nt)).length;c<d;c++)u=s,c!==p&&(u=S.clone(u,!0,!0),o&&S.merge(a,yt(u,"script"))),i.call(t[c],u,c);if(o)for(h=a[a.length-1].ownerDocument,S.map(a,Ht),c=0;c<o;c++)u=a[c],vt.test(u.type||"")&&!Q.access(u,"globalEval")&&S.contains(h,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?S._evalUrl&&!u.noModule&&S._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},h):x(u.textContent.replace(Et,""),u,h))}return t}function qt(t,e,i){for(var n,s=e?S.filter(e,t):t,r=0;null!=(n=s[r]);r++)i||1!==n.nodeType||S.cleanData(yt(n)),n.parentNode&&(i&&at(n)&&_t(yt(n,"script")),n.parentNode.removeChild(n));return t}S.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var n,s,r,a,o=t.cloneNode(!0),l=at(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||S.isXMLDoc(t)))for(a=yt(o),n=0,s=(r=yt(t)).length;n<s;n++)Lt(r[n],a[n]);if(e)if(i)for(r=r||yt(t),a=a||yt(o),n=0,s=r.length;n<s;n++)zt(r[n],a[n]);else zt(t,o);return(a=yt(o,"script")).length>0&&_t(a,!l&&yt(t,"script")),o},cleanData:function(t){for(var e,i,n,s=S.event.special,r=0;void 0!==(i=t[r]);r++)if(X(i)){if(e=i[Q.expando]){if(e.events)for(n in e.events)s[n]?S.event.remove(i,n):S.removeEvent(i,n,e.handle);i[Q.expando]=void 0}i[J.expando]&&(i[J.expando]=void 0)}}}),S.fn.extend({detach:function(t){return qt(this,t,!0)},remove:function(t){return qt(this,t)},text:function(t){return j(this,(function(t){return void 0===t?S.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Ot(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Pt(this,t).appendChild(t)}))},prepend:function(){return Ot(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Pt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Ot(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Ot(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(S.cleanData(yt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return S.clone(this,t,e)}))},html:function(t){return j(this,(function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Mt.test(t)&&!bt[(mt.exec(t)||["",""])[1].toLowerCase()]){t=S.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(S.cleanData(yt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Ot(this,arguments,(function(e){var i=this.parentNode;S.inArray(this,t)<0&&(S.cleanData(yt(this)),i&&i.replaceChild(e,this))}),t)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){S.fn[t]=function(t){for(var i,n=[],s=S(t),r=s.length-1,a=0;a<=r;a++)i=a===r?this:this.clone(!0),S(s[a])[e](i),u.apply(n,i.get());return this.pushStack(n)}}));var Gt=new RegExp("^("+it+")(?!px)[a-z%]+$","i"),Rt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=i),e.getComputedStyle(t)},Ft=function(t,e,i){var n,s,r={};for(s in e)r[s]=t.style[s],t.style[s]=e[s];for(s in n=i.call(t),e)t.style[s]=r[s];return n},Bt=new RegExp(st.join("|"),"i");function Wt(t,e,i){var n,s,r,a,o=t.style;return(i=i||Rt(t))&&(""!==(a=i.getPropertyValue(e)||i[e])||at(t)||(a=S.style(t,e)),!m.pixelBoxStyles()&&Gt.test(a)&&Bt.test(e)&&(n=o.width,s=o.minWidth,r=o.maxWidth,o.minWidth=o.maxWidth=o.width=a,a=i.width,o.width=n,o.minWidth=s,o.maxWidth=r)),void 0!==a?a+"":a}function jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(h){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",h.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",rt.appendChild(u).appendChild(h);var t=i.getComputedStyle(h);n="1%"!==t.top,l=12===e(t.marginLeft),h.style.right="60%",a=36===e(t.right),s=36===e(t.width),h.style.position="absolute",r=12===e(h.offsetWidth/3),rt.removeChild(u),h=null}}function e(t){return Math.round(parseFloat(t))}var n,s,r,a,o,l,u=y.createElement("div"),h=y.createElement("div");h.style&&(h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===h.style.backgroundClip,S.extend(m,{boxSizingReliable:function(){return t(),s},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),r},reliableTrDimensions:function(){var t,e,n,s;return null==o&&(t=y.createElement("table"),e=y.createElement("tr"),n=y.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="border:1px solid",e.style.height="1px",n.style.height="9px",n.style.display="block",rt.appendChild(t).appendChild(e).appendChild(n),s=i.getComputedStyle(e),o=parseInt(s.height,10)+parseInt(s.borderTopWidth,10)+parseInt(s.borderBottomWidth,10)===e.offsetHeight,rt.removeChild(t)),o}}))}();var $t=["Webkit","Moz","ms"],Ut=y.createElement("div").style,Vt={};function Yt(t){var e=S.cssProps[t]||Vt[t];return e||(t in Ut?t:Vt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=$t.length;i--;)if((t=$t[i]+e)in Ut)return t}(t)||t)}var Xt=/^(none|table(?!-c[ea]).+)/,Kt=/^--/,Qt={position:"absolute",visibility:"hidden",display:"block"},Jt={letterSpacing:"0",fontWeight:"400"};function Zt(t,e,i){var n=nt.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function te(t,e,i,n,s,r){var a="width"===e?1:0,o=0,l=0;if(i===(n?"border":"content"))return 0;for(;a<4;a+=2)"margin"===i&&(l+=S.css(t,i+st[a],!0,s)),n?("content"===i&&(l-=S.css(t,"padding"+st[a],!0,s)),"margin"!==i&&(l-=S.css(t,"border"+st[a]+"Width",!0,s))):(l+=S.css(t,"padding"+st[a],!0,s),"padding"!==i?l+=S.css(t,"border"+st[a]+"Width",!0,s):o+=S.css(t,"border"+st[a]+"Width",!0,s));return!n&&r>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-r-l-o-.5))||0),l}function ee(t,e,i){var n=Rt(t),s=(!m.boxSizingReliable()||i)&&"border-box"===S.css(t,"boxSizing",!1,n),r=s,a=Wt(t,e,n),o="offset"+e[0].toUpperCase()+e.slice(1);if(Gt.test(a)){if(!i)return a;a="auto"}return(!m.boxSizingReliable()&&s||!m.reliableTrDimensions()&&M(t,"tr")||"auto"===a||!parseFloat(a)&&"inline"===S.css(t,"display",!1,n))&&t.getClientRects().length&&(s="border-box"===S.css(t,"boxSizing",!1,n),(r=o in t)&&(a=t[o])),(a=parseFloat(a)||0)+te(t,e,i||(s?"border":"content"),r,n,a)+"px"}function ie(t,e,i,n,s){return new ie.prototype.init(t,e,i,n,s)}S.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Wt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,r,a,o=Y(e),l=Kt.test(e),u=t.style;if(l||(e=Yt(o)),a=S.cssHooks[e]||S.cssHooks[o],void 0===i)return a&&"get"in a&&void 0!==(s=a.get(t,!1,n))?s:u[e];"string"===(r=typeof i)&&(s=nt.exec(i))&&s[1]&&(i=ut(t,e,s),r="number"),null!=i&&i==i&&("number"!==r||l||(i+=s&&s[3]||(S.cssNumber[o]?"":"px")),m.clearCloneStyle||""!==i||0!==e.indexOf("background")||(u[e]="inherit"),a&&"set"in a&&void 0===(i=a.set(t,i,n))||(l?u.setProperty(e,i):u[e]=i))}},css:function(t,e,i,n){var s,r,a,o=Y(e);return Kt.test(e)||(e=Yt(o)),(a=S.cssHooks[e]||S.cssHooks[o])&&"get"in a&&(s=a.get(t,!0,i)),void 0===s&&(s=Wt(t,e,n)),"normal"===s&&e in Jt&&(s=Jt[e]),""===i||i?(r=parseFloat(s),!0===i||isFinite(r)?r||0:s):s}}),S.each(["height","width"],(function(t,e){S.cssHooks[e]={get:function(t,i,n){if(i)return!Xt.test(S.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ee(t,e,n):Ft(t,Qt,(function(){return ee(t,e,n)}))},set:function(t,i,n){var s,r=Rt(t),a=!m.scrollboxSize()&&"absolute"===r.position,o=(a||n)&&"border-box"===S.css(t,"boxSizing",!1,r),l=n?te(t,e,n,o,r):0;return o&&a&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(r[e])-te(t,e,"border",!1,r)-.5)),l&&(s=nt.exec(i))&&"px"!==(s[3]||"px")&&(t.style[e]=i,i=S.css(t,e)),Zt(0,i,l)}}})),S.cssHooks.marginLeft=jt(m.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Wt(t,"marginLeft"))||t.getBoundingClientRect().left-Ft(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),S.each({margin:"",padding:"",border:"Width"},(function(t,e){S.cssHooks[t+e]={expand:function(i){for(var n=0,s={},r="string"==typeof i?i.split(" "):[i];n<4;n++)s[t+st[n]+e]=r[n]||r[n-2]||r[0];return s}},"margin"!==t&&(S.cssHooks[t+e].set=Zt)})),S.fn.extend({css:function(t,e){return j(this,(function(t,e,i){var n,s,r={},a=0;if(Array.isArray(e)){for(n=Rt(t),s=e.length;a<s;a++)r[e[a]]=S.css(t,e[a],!1,n);return r}return void 0!==i?S.style(t,e,i):S.css(t,e)}),t,e,arguments.length>1)}}),S.Tween=ie,ie.prototype={constructor:ie,init:function(t,e,i,n,s,r){this.elem=t,this.prop=i,this.easing=s||S.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=r||(S.cssNumber[i]?"":"px")},cur:function(){var t=ie.propHooks[this.prop];return t&&t.get?t.get(this):ie.propHooks._default.get(this)},run:function(t){var e,i=ie.propHooks[this.prop];return this.options.duration?this.pos=e=S.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ie.propHooks._default.set(this),this}},ie.prototype.init.prototype=ie.prototype,ie.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=S.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){S.fx.step[t.prop]?S.fx.step[t.prop](t):1!==t.elem.nodeType||!S.cssHooks[t.prop]&&null==t.elem.style[Yt(t.prop)]?t.elem[t.prop]=t.now:S.style(t.elem,t.prop,t.now+t.unit)}}},ie.propHooks.scrollTop=ie.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},S.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},S.fx=ie.prototype.init,S.fx.step={};var ne,se,re=/^(?:toggle|show|hide)$/,ae=/queueHooks$/;function oe(){se&&(!1===y.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(oe):i.setTimeout(oe,S.fx.interval),S.fx.tick())}function le(){return i.setTimeout((function(){ne=void 0})),ne=Date.now()}function ue(t,e){var i,n=0,s={height:t};for(e=e?1:0;n<4;n+=2-e)s["margin"+(i=st[n])]=s["padding"+i]=t;return e&&(s.opacity=s.width=t),s}function he(t,e,i){for(var n,s=(ce.tweeners[e]||[]).concat(ce.tweeners["*"]),r=0,a=s.length;r<a;r++)if(n=s[r].call(i,e,t))return n}function ce(t,e,i){var n,s,r=0,a=ce.prefilters.length,o=S.Deferred().always((function(){delete l.elem})),l=function(){if(s)return!1;for(var e=ne||le(),i=Math.max(0,u.startTime+u.duration-e),n=1-(i/u.duration||0),r=0,a=u.tweens.length;r<a;r++)u.tweens[r].run(n);return o.notifyWith(t,[u,n,i]),n<1&&a?i:(a||o.notifyWith(t,[u,1,0]),o.resolveWith(t,[u]),!1)},u=o.promise({elem:t,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},i),originalProperties:e,originalOptions:i,startTime:ne||le(),duration:i.duration,tweens:[],createTween:function(e,i){var n=S.Tween(t,u.opts,e,i,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var i=0,n=e?u.tweens.length:0;if(s)return this;for(s=!0;i<n;i++)u.tweens[i].run(1);return e?(o.notifyWith(t,[u,1,0]),o.resolveWith(t,[u,e])):o.rejectWith(t,[u,e]),this}}),h=u.props;for(!function(t,e){var i,n,s,r,a;for(i in t)if(s=e[n=Y(i)],r=t[i],Array.isArray(r)&&(s=r[1],r=t[i]=r[0]),i!==n&&(t[n]=r,delete t[i]),(a=S.cssHooks[n])&&"expand"in a)for(i in r=a.expand(r),delete t[n],r)i in t||(t[i]=r[i],e[i]=s);else e[n]=s}(h,u.opts.specialEasing);r<a;r++)if(n=ce.prefilters[r].call(u,t,h,u.opts))return v(n.stop)&&(S._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return S.map(h,he,u),v(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),S.fx.timer(S.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u}S.Animation=S.extend(ce,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return ut(i.elem,t,nt.exec(e),i),i}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(O);for(var i,n=0,s=t.length;n<s;n++)i=t[n],ce.tweeners[i]=ce.tweeners[i]||[],ce.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,s,r,a,o,l,u,h,c="width"in e||"height"in e,d=this,p={},f=t.style,g=t.nodeType&&lt(t),m=Q.get(t,"fxshow");for(n in i.queue||(null==(a=S._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,o=a.empty.fire,a.empty.fire=function(){a.unqueued||o()}),a.unqueued++,d.always((function(){d.always((function(){a.unqueued--,S.queue(t,"fx").length||a.empty.fire()}))}))),e)if(s=e[n],re.test(s)){if(delete e[n],r=r||"toggle"===s,s===(g?"hide":"show")){if("show"!==s||!m||void 0===m[n])continue;g=!0}p[n]=m&&m[n]||S.style(t,n)}if((l=!S.isEmptyObject(e))||!S.isEmptyObject(p))for(n in c&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=m&&m.display)&&(u=Q.get(t,"display")),"none"===(h=S.css(t,"display"))&&(u?h=u:(dt([t],!0),u=t.style.display||u,h=S.css(t,"display"),dt([t]))),("inline"===h||"inline-block"===h&&null!=u)&&"none"===S.css(t,"float")&&(l||(d.done((function(){f.display=u})),null==u&&(h=f.display,u="none"===h?"":h)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",d.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=Q.access(t,"fxshow",{display:u}),r&&(m.hidden=!g),g&&dt([t],!0),d.done((function(){for(n in g||dt([t]),Q.remove(t,"fxshow"),p)S.style(t,n,p[n])}))),l=he(g?m[n]:0,n,d),n in m||(m[n]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ce.prefilters.unshift(t):ce.prefilters.push(t)}}),S.speed=function(t,e,i){var n=t&&"object"==typeof t?S.extend({},t):{complete:i||!i&&e||v(t)&&t,duration:t,easing:i&&e||e&&!v(e)&&e};return S.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in S.fx.speeds?n.duration=S.fx.speeds[n.duration]:n.duration=S.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){v(n.old)&&n.old.call(this),n.queue&&S.dequeue(this,n.queue)},n},S.fn.extend({fadeTo:function(t,e,i,n){return this.filter(lt).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var s=S.isEmptyObject(t),r=S.speed(e,i,n),a=function(){var e=ce(this,S.extend({},t),r);(s||Q.get(this,"finish"))&&e.stop(!0)};return a.finish=a,s||!1===r.queue?this.each(a):this.queue(r.queue,a)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,s=null!=t&&t+"queueHooks",r=S.timers,a=Q.get(this);if(s)a[s]&&a[s].stop&&n(a[s]);else for(s in a)a[s]&&a[s].stop&&ae.test(s)&&n(a[s]);for(s=r.length;s--;)r[s].elem!==this||null!=t&&r[s].queue!==t||(r[s].anim.stop(i),e=!1,r.splice(s,1));!e&&i||S.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,i=Q.get(this),n=i[t+"queue"],s=i[t+"queueHooks"],r=S.timers,a=n?n.length:0;for(i.finish=!0,S.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<a;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish}))}}),S.each(["toggle","show","hide"],(function(t,e){var i=S.fn[e];S.fn[e]=function(t,n,s){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(ue(e,!0),t,n,s)}})),S.each({slideDown:ue("show"),slideUp:ue("hide"),slideToggle:ue("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){S.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}})),S.timers=[],S.fx.tick=function(){var t,e=0,i=S.timers;for(ne=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||S.fx.stop(),ne=void 0},S.fx.timer=function(t){S.timers.push(t),S.fx.start()},S.fx.interval=13,S.fx.start=function(){se||(se=!0,oe())},S.fx.stop=function(){se=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(t,e){return t=S.fx&&S.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,n){var s=i.setTimeout(e,t);n.stop=function(){i.clearTimeout(s)}}))},function(){var t=y.createElement("input"),e=y.createElement("select").appendChild(y.createElement("option"));t.type="checkbox",m.checkOn=""!==t.value,m.optSelected=e.selected,(t=y.createElement("input")).value="t",t.type="radio",m.radioValue="t"===t.value}();var de,pe=S.expr.attrHandle;S.fn.extend({attr:function(t,e){return j(this,S.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){S.removeAttr(this,t)}))}}),S.extend({attr:function(t,e,i){var n,s,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?S.prop(t,e,i):(1===r&&S.isXMLDoc(t)||(s=S.attrHooks[e.toLowerCase()]||(S.expr.match.bool.test(e)?de:void 0)),void 0!==i?null===i?void S.removeAttr(t,e):s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:(t.setAttribute(e,i+""),i):s&&"get"in s&&null!==(n=s.get(t,e))?n:null==(n=S.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!m.radioValue&&"radio"===e&&M(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,s=e&&e.match(O);if(s&&1===t.nodeType)for(;i=s[n++];)t.removeAttribute(i)}}),de={set:function(t,e,i){return!1===e?S.removeAttr(t,i):t.setAttribute(i,i),i}},S.each(S.expr.match.bool.source.match(/\w+/g),(function(t,e){var i=pe[e]||S.find.attr;pe[e]=function(t,e,n){var s,r,a=e.toLowerCase();return n||(r=pe[a],pe[a]=s,s=null!=i(t,e,n)?a:null,pe[a]=r),s}}));var fe=/^(?:input|select|textarea|button)$/i,ge=/^(?:a|area)$/i;function me(t){return(t.match(O)||[]).join(" ")}function ve(t){return t.getAttribute&&t.getAttribute("class")||""}function be(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(O)||[]}S.fn.extend({prop:function(t,e){return j(this,S.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[S.propFix[t]||t]}))}}),S.extend({prop:function(t,e,i){var n,s,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&S.isXMLDoc(t)||(e=S.propFix[e]||e,s=S.propHooks[e]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:t[e]=i:s&&"get"in s&&null!==(n=s.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=S.find.attr(t,"tabindex");return e?parseInt(e,10):fe.test(t.nodeName)||ge.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(S.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){S.propFix[this.toLowerCase()]=this})),S.fn.extend({addClass:function(t){var e,i,n,s,r,a,o,l=0;if(v(t))return this.each((function(e){S(this).addClass(t.call(this,e,ve(this)))}));if((e=be(t)).length)for(;i=this[l++];)if(s=ve(i),n=1===i.nodeType&&" "+me(s)+" "){for(a=0;r=e[a++];)n.indexOf(" "+r+" ")<0&&(n+=r+" ");s!==(o=me(n))&&i.setAttribute("class",o)}return this},removeClass:function(t){var e,i,n,s,r,a,o,l=0;if(v(t))return this.each((function(e){S(this).removeClass(t.call(this,e,ve(this)))}));if(!arguments.length)return this.attr("class","");if((e=be(t)).length)for(;i=this[l++];)if(s=ve(i),n=1===i.nodeType&&" "+me(s)+" "){for(a=0;r=e[a++];)for(;n.indexOf(" "+r+" ")>-1;)n=n.replace(" "+r+" "," ");s!==(o=me(n))&&i.setAttribute("class",o)}return this},toggleClass:function(t,e){var i=typeof t,n="string"===i||Array.isArray(t);return"boolean"==typeof e&&n?e?this.addClass(t):this.removeClass(t):v(t)?this.each((function(i){S(this).toggleClass(t.call(this,i,ve(this),e),e)})):this.each((function(){var e,s,r,a;if(n)for(s=0,r=S(this),a=be(t);e=a[s++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==i||((e=ve(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Q.get(this,"__className__")||""))}))},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+me(ve(i))+" ").indexOf(e)>-1)return!0;return!1}});var ye=/\r/g;S.fn.extend({val:function(t){var e,i,n,s=this[0];return arguments.length?(n=v(t),this.each((function(i){var s;1===this.nodeType&&(null==(s=n?t.call(this,i,S(this).val()):t)?s="":"number"==typeof s?s+="":Array.isArray(s)&&(s=S.map(s,(function(t){return null==t?"":t+""}))),(e=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))}))):s?(e=S.valHooks[s.type]||S.valHooks[s.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(s,"value"))?i:"string"==typeof(i=s.value)?i.replace(ye,""):null==i?"":i:void 0}}),S.extend({valHooks:{option:{get:function(t){var e=S.find.attr(t,"value");return null!=e?e:me(S.text(t))}},select:{get:function(t){var e,i,n,s=t.options,r=t.selectedIndex,a="select-one"===t.type,o=a?null:[],l=a?r+1:s.length;for(n=r<0?l:a?r:0;n<l;n++)if(((i=s[n]).selected||n===r)&&!i.disabled&&(!i.parentNode.disabled||!M(i.parentNode,"optgroup"))){if(e=S(i).val(),a)return e;o.push(e)}return o},set:function(t,e){for(var i,n,s=t.options,r=S.makeArray(e),a=s.length;a--;)((n=s[a]).selected=S.inArray(S.valHooks.option.get(n),r)>-1)&&(i=!0);return i||(t.selectedIndex=-1),r}}}}),S.each(["radio","checkbox"],(function(){S.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=S.inArray(S(t).val(),e)>-1}},m.checkOn||(S.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),m.focusin="onfocusin"in i;var _e=/^(?:focusinfocus|focusoutblur)$/,xe=function(t){t.stopPropagation()};S.extend(S.event,{trigger:function(t,e,n,s){var r,a,o,l,u,h,c,d,f=[n||y],g=p.call(t,"type")?t.type:t,m=p.call(t,"namespace")?t.namespace.split("."):[];if(a=d=o=n=n||y,3!==n.nodeType&&8!==n.nodeType&&!_e.test(g+S.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),u=g.indexOf(":")<0&&"on"+g,(t=t[S.expando]?t:new S.Event(g,"object"==typeof t&&t)).isTrigger=s?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:S.makeArray(e,[t]),c=S.event.special[g]||{},s||!c.trigger||!1!==c.trigger.apply(n,e))){if(!s&&!c.noBubble&&!b(n)){for(l=c.delegateType||g,_e.test(l+g)||(a=a.parentNode);a;a=a.parentNode)f.push(a),o=a;o===(n.ownerDocument||y)&&f.push(o.defaultView||o.parentWindow||i)}for(r=0;(a=f[r++])&&!t.isPropagationStopped();)d=a,t.type=r>1?l:c.bindType||g,(h=(Q.get(a,"events")||Object.create(null))[t.type]&&Q.get(a,"handle"))&&h.apply(a,e),(h=u&&a[u])&&h.apply&&X(a)&&(t.result=h.apply(a,e),!1===t.result&&t.preventDefault());return t.type=g,s||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(f.pop(),e)||!X(n)||u&&v(n[g])&&!b(n)&&((o=n[u])&&(n[u]=null),S.event.triggered=g,t.isPropagationStopped()&&d.addEventListener(g,xe),n[g](),t.isPropagationStopped()&&d.removeEventListener(g,xe),S.event.triggered=void 0,o&&(n[u]=o)),t.result}},simulate:function(t,e,i){var n=S.extend(new S.Event,i,{type:t,isSimulated:!0});S.event.trigger(n,null,e)}}),S.fn.extend({trigger:function(t,e){return this.each((function(){S.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var i=this[0];if(i)return S.event.trigger(t,e,i,!0)}}),m.focusin||S.each({focus:"focusin",blur:"focusout"},(function(t,e){var i=function(t){S.event.simulate(e,t.target,S.event.fix(t))};S.event.special[e]={setup:function(){var n=this.ownerDocument||this.document||this,s=Q.access(n,e);s||n.addEventListener(t,i,!0),Q.access(n,e,(s||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,s=Q.access(n,e)-1;s?Q.access(n,e,s):(n.removeEventListener(t,i,!0),Q.remove(n,e))}}}));var we=i.location,Se={guid:Date.now()},Ce=/\?/;S.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{e=(new i.DOMParser).parseFromString(t,"text/xml")}catch(t){}return n=e&&e.getElementsByTagName("parsererror")[0],e&&!n||S.error("Invalid XML: "+(n?S.map(n.childNodes,(function(t){return t.textContent})).join("\n"):t)),e};var ke=/\[\]$/,De=/\r?\n/g,Te=/^(?:submit|button|image|reset|file)$/i,Ae=/^(?:input|select|textarea|keygen)/i;function Me(t,e,i,n){var s;if(Array.isArray(e))S.each(e,(function(e,s){i||ke.test(t)?n(t,s):Me(t+"["+("object"==typeof s&&null!=s?e:"")+"]",s,i,n)}));else if(i||"object"!==w(e))n(t,e);else for(s in e)Me(t+"["+s+"]",e[s],i,n)}S.param=function(t,e){var i,n=[],s=function(t,e){var i=v(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!S.isPlainObject(t))S.each(t,(function(){s(this.name,this.value)}));else for(i in t)Me(i,t[i],e,s);return n.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=S.prop(this,"elements");return t?S.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!S(this).is(":disabled")&&Ae.test(this.nodeName)&&!Te.test(t)&&(this.checked||!gt.test(t))})).map((function(t,e){var i=S(this).val();return null==i?null:Array.isArray(i)?S.map(i,(function(t){return{name:e.name,value:t.replace(De,"\r\n")}})):{name:e.name,value:i.replace(De,"\r\n")}})).get()}});var Ie=/%20/g,Ee=/#.*$/,Pe=/([?&])_=[^&]*/,Ne=/^(.*?):[ \t]*([^\r\n]*)$/gm,He=/^(?:GET|HEAD)$/,ze=/^\/\//,Le={},Oe={},qe="*/".concat("*"),Ge=y.createElement("a");function Re(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,s=0,r=e.toLowerCase().match(O)||[];if(v(i))for(;n=r[s++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function Fe(t,e,i,n){var s={},r=t===Oe;function a(o){var l;return s[o]=!0,S.each(t[o]||[],(function(t,o){var u=o(e,i,n);return"string"!=typeof u||r||s[u]?r?!(l=u):void 0:(e.dataTypes.unshift(u),a(u),!1)})),l}return a(e.dataTypes[0])||!s["*"]&&a("*")}function Be(t,e){var i,n,s=S.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((s[i]?t:n||(n={}))[i]=e[i]);return n&&S.extend(!0,t,n),t}Ge.href=we.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:we.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(we.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Be(Be(t,S.ajaxSettings),e):Be(S.ajaxSettings,t)},ajaxPrefilter:Re(Le),ajaxTransport:Re(Oe),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,s,r,a,o,l,u,h,c,d,p=S.ajaxSetup({},e),f=p.context||p,g=p.context&&(f.nodeType||f.jquery)?S(f):S.event,m=S.Deferred(),v=S.Callbacks("once memory"),b=p.statusCode||{},_={},x={},w="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(u){if(!a)for(a={};e=Ne.exec(r);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return u?r:null},setRequestHeader:function(t,e){return null==u&&(t=x[t.toLowerCase()]=x[t.toLowerCase()]||t,_[t]=e),this},overrideMimeType:function(t){return null==u&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(u)C.always(t[C.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||w;return n&&n.abort(e),k(0,e),this}};if(m.promise(C),p.url=((t||p.url||we.href)+"").replace(ze,we.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(O)||[""],null==p.crossDomain){l=y.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Ge.protocol+"//"+Ge.host!=l.protocol+"//"+l.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=S.param(p.data,p.traditional)),Fe(Le,p,e,C),u)return C;for(c in(h=S.event&&p.global)&&0==S.active++&&S.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!He.test(p.type),s=p.url.replace(Ee,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Ie,"+")):(d=p.url.slice(s.length),p.data&&(p.processData||"string"==typeof p.data)&&(s+=(Ce.test(s)?"&":"?")+p.data,delete p.data),!1===p.cache&&(s=s.replace(Pe,"$1"),d=(Ce.test(s)?"&":"?")+"_="+Se.guid+++d),p.url=s+d),p.ifModified&&(S.lastModified[s]&&C.setRequestHeader("If-Modified-Since",S.lastModified[s]),S.etag[s]&&C.setRequestHeader("If-None-Match",S.etag[s])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&C.setRequestHeader("Content-Type",p.contentType),C.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+qe+"; q=0.01":""):p.accepts["*"]),p.headers)C.setRequestHeader(c,p.headers[c]);if(p.beforeSend&&(!1===p.beforeSend.call(f,C,p)||u))return C.abort();if(w="abort",v.add(p.complete),C.done(p.success),C.fail(p.error),n=Fe(Oe,p,e,C)){if(C.readyState=1,h&&g.trigger("ajaxSend",[C,p]),u)return C;p.async&&p.timeout>0&&(o=i.setTimeout((function(){C.abort("timeout")}),p.timeout));try{u=!1,n.send(_,k)}catch(t){if(u)throw t;k(-1,t)}}else k(-1,"No Transport");function k(t,e,a,l){var c,d,y,_,x,w=e;u||(u=!0,o&&i.clearTimeout(o),n=void 0,r=l||"",C.readyState=t>0?4:0,c=t>=200&&t<300||304===t,a&&(_=function(t,e,i){for(var n,s,r,a,o=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(s in o)if(o[s]&&o[s].test(n)){l.unshift(s);break}if(l[0]in i)r=l[0];else{for(s in i){if(!l[0]||t.converters[s+" "+l[0]]){r=s;break}a||(a=s)}r=r||a}if(r)return r!==l[0]&&l.unshift(r),i[r]}(p,C,a)),!c&&S.inArray("script",p.dataTypes)>-1&&S.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),_=function(t,e,i,n){var s,r,a,o,l,u={},h=t.dataTypes.slice();if(h[1])for(a in t.converters)u[a.toLowerCase()]=t.converters[a];for(r=h.shift();r;)if(t.responseFields[r]&&(i[t.responseFields[r]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=h.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(a=u[l+" "+r]||u["* "+r]))for(s in u)if((o=s.split(" "))[1]===r&&(a=u[l+" "+o[0]]||u["* "+o[0]])){!0===a?a=u[s]:!0!==u[s]&&(r=o[0],h.unshift(o[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(p,_,C,c),c?(p.ifModified&&((x=C.getResponseHeader("Last-Modified"))&&(S.lastModified[s]=x),(x=C.getResponseHeader("etag"))&&(S.etag[s]=x)),204===t||"HEAD"===p.type?w="nocontent":304===t?w="notmodified":(w=_.state,d=_.data,c=!(y=_.error))):(y=w,!t&&w||(w="error",t<0&&(t=0))),C.status=t,C.statusText=(e||w)+"",c?m.resolveWith(f,[d,w,C]):m.rejectWith(f,[C,w,y]),C.statusCode(b),b=void 0,h&&g.trigger(c?"ajaxSuccess":"ajaxError",[C,p,c?d:y]),v.fireWith(f,[C,w]),h&&(g.trigger("ajaxComplete",[C,p]),--S.active||S.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,i){return S.get(t,e,i,"json")},getScript:function(t,e){return S.get(t,void 0,e,"script")}}),S.each(["get","post"],(function(t,e){S[e]=function(t,i,n,s){return v(i)&&(s=s||n,n=i,i=void 0),S.ajax(S.extend({url:t,type:e,dataType:s,data:i,success:n},S.isPlainObject(t)&&t))}})),S.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),S._evalUrl=function(t,e,i){return S.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){S.globalEval(t,e,i)}})},S.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=S(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){S(this).wrapInner(t.call(this,e))})):this.each((function(){var e=S(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(i){S(this).wrapAll(e?t.call(this,i):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){S(this).replaceWith(this.childNodes)})),this}}),S.expr.pseudos.hidden=function(t){return!S.expr.pseudos.visible(t)},S.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(t){}};var We={0:200,1223:204},je=S.ajaxSettings.xhr();m.cors=!!je&&"withCredentials"in je,m.ajax=je=!!je,S.ajaxTransport((function(t){var e,n;if(m.cors||je&&!t.crossDomain)return{send:function(s,r){var a,o=t.xhr();if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)o[a]=t.xhrFields[a];for(a in t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest"),s)o.setRequestHeader(a,s[a]);e=function(t){return function(){e&&(e=n=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===t?o.abort():"error"===t?"number"!=typeof o.status?r(0,"error"):r(o.status,o.statusText):r(We[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=e(),n=o.onerror=o.ontimeout=e("error"),void 0!==o.onabort?o.onabort=n:o.onreadystatechange=function(){4===o.readyState&&i.setTimeout((function(){e&&n()}))},e=e("abort");try{o.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),S.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return S.globalEval(t),t}}}),S.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),S.ajaxTransport("script",(function(t){var e,i;if(t.crossDomain||t.scriptAttrs)return{send:function(n,s){e=S("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&s("error"===t.type?404:200,t.type)}),y.head.appendChild(e[0])},abort:function(){i&&i()}}}));var $e,Ue=[],Ve=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ue.pop()||S.expando+"_"+Se.guid++;return this[t]=!0,t}}),S.ajaxPrefilter("json jsonp",(function(t,e,n){var s,r,a,o=!1!==t.jsonp&&(Ve.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ve.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return s=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(Ve,"$1"+s):!1!==t.jsonp&&(t.url+=(Ce.test(t.url)?"&":"?")+t.jsonp+"="+s),t.converters["script json"]=function(){return a||S.error(s+" was not called"),a[0]},t.dataTypes[0]="json",r=i[s],i[s]=function(){a=arguments},n.always((function(){void 0===r?S(i).removeProp(s):i[s]=r,t[s]&&(t.jsonpCallback=e.jsonpCallback,Ue.push(s)),a&&v(r)&&r(a[0]),a=r=void 0})),"script"})),m.createHTMLDocument=(($e=y.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===$e.childNodes.length),S.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(m.createHTMLDocument?((n=(e=y.implementation.createHTMLDocument("")).createElement("base")).href=y.location.href,e.head.appendChild(n)):e=y),r=!i&&[],(s=I.exec(t))?[e.createElement(s[1])]:(s=wt([t],e,r),r&&r.length&&S(r).remove(),S.merge([],s.childNodes)));var n,s,r},S.fn.load=function(t,e,i){var n,s,r,a=this,o=t.indexOf(" ");return o>-1&&(n=me(t.slice(o)),t=t.slice(0,o)),v(e)?(i=e,e=void 0):e&&"object"==typeof e&&(s="POST"),a.length>0&&S.ajax({url:t,type:s||"GET",dataType:"html",data:e}).done((function(t){r=arguments,a.html(n?S("<div>").append(S.parseHTML(t)).find(n):t)})).always(i&&function(t,e){a.each((function(){i.apply(this,r||[t.responseText,e,t])}))}),this},S.expr.pseudos.animated=function(t){return S.grep(S.timers,(function(e){return t===e.elem})).length},S.offset={setOffset:function(t,e,i){var n,s,r,a,o,l,u=S.css(t,"position"),h=S(t),c={};"static"===u&&(t.style.position="relative"),o=h.offset(),r=S.css(t,"top"),l=S.css(t,"left"),("absolute"===u||"fixed"===u)&&(r+l).indexOf("auto")>-1?(a=(n=h.position()).top,s=n.left):(a=parseFloat(r)||0,s=parseFloat(l)||0),v(e)&&(e=e.call(t,i,S.extend({},o))),null!=e.top&&(c.top=e.top-o.top+a),null!=e.left&&(c.left=e.left-o.left+s),"using"in e?e.using.call(t,c):h.css(c)}},S.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){S.offset.setOffset(this,t,e)}));var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],s={top:0,left:0};if("fixed"===S.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===S.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((s=S(t).offset()).top+=S.css(t,"borderTopWidth",!0),s.left+=S.css(t,"borderLeftWidth",!0))}return{top:e.top-s.top-S.css(n,"marginTop",!0),left:e.left-s.left-S.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===S.css(t,"position");)t=t.offsetParent;return t||rt}))}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var i="pageYOffset"===e;S.fn[t]=function(n){return j(this,(function(t,n,s){var r;if(b(t)?r=t:9===t.nodeType&&(r=t.defaultView),void 0===s)return r?r[e]:t[n];r?r.scrollTo(i?r.pageXOffset:s,i?s:r.pageYOffset):t[n]=s}),t,n,arguments.length)}})),S.each(["top","left"],(function(t,e){S.cssHooks[e]=jt(m.pixelPosition,(function(t,i){if(i)return i=Wt(t,e),Gt.test(i)?S(t).position()[e]+"px":i}))})),S.each({Height:"height",Width:"width"},(function(t,e){S.each({padding:"inner"+t,content:e,"":"outer"+t},(function(i,n){S.fn[n]=function(s,r){var a=arguments.length&&(i||"boolean"!=typeof s),o=i||(!0===s||!0===r?"margin":"border");return j(this,(function(e,i,s){var r;return b(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===s?S.css(e,i,o):S.style(e,i,s,o)}),e,a?s:void 0,a)}}))})),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){S.fn[e]=function(t){return this.on(e,t)}})),S.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){S.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}));var Ye=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;S.proxy=function(t,e){var i,n,s;if("string"==typeof e&&(i=t[e],e=t,t=i),v(t))return n=o.call(arguments,2),(s=function(){return t.apply(e||this,n.concat(o.call(arguments)))}).guid=t.guid=t.guid||S.guid++,s},S.holdReady=function(t){t?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=M,S.isFunction=v,S.isWindow=b,S.camelCase=Y,S.type=w,S.now=Date.now,S.isNumeric=function(t){var e=S.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},S.trim=function(t){return null==t?"":(t+"").replace(Ye,"")},void 0===(n=function(){return S}.apply(e,[]))||(t.exports=n);var Xe=i.jQuery,Ke=i.$;return S.noConflict=function(t){return i.$===S&&(i.$=Ke),t&&i.jQuery===S&&(i.jQuery=Xe),S},void 0===s&&(i.jQuery=i.$=S),S}))},17:function(t,e,i){const n=i(25);t.exports=n},23:function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},24:function(t,e,i){var n,s,r;
/*! jQuery UI - v1.12.1 - 2016-09-14
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */s=[i(0)],void 0===(r="function"==typeof(n=function(t){t.ui=t.ui||{},t.ui.version="1.12.1";var e,i=0,n=Array.prototype.slice;
/*!
 * jQuery UI Widget 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */t.cleanData=(e=t.cleanData,function(i){var n,s,r;for(r=0;null!=(s=i[r]);r++)try{(n=t._data(s,"events"))&&n.remove&&t(s).triggerHandler("remove")}catch(t){}e(i)}),t.widget=function(e,i,n){var s,r,a,o={},l=e.split(".")[0],u=l+"-"+(e=e.split(".")[1]);return n||(n=i,i=t.Widget),t.isArray(n)&&(n=t.extend.apply(null,[{}].concat(n))),t.expr[":"][u.toLowerCase()]=function(e){return!!t.data(e,u)},t[l]=t[l]||{},s=t[l][e],r=t[l][e]=function(t,e){if(!this._createWidget)return new r(t,e);arguments.length&&this._createWidget(t,e)},t.extend(r,s,{version:n.version,_proto:t.extend({},n),_childConstructors:[]}),(a=new i).options=t.widget.extend({},a.options),t.each(n,(function(e,n){t.isFunction(n)?o[e]=function(){function t(){return i.prototype[e].apply(this,arguments)}function s(t){return i.prototype[e].apply(this,t)}return function(){var e,i=this._super,r=this._superApply;return this._super=t,this._superApply=s,e=n.apply(this,arguments),this._super=i,this._superApply=r,e}}():o[e]=n})),r.prototype=t.widget.extend(a,{widgetEventPrefix:s&&a.widgetEventPrefix||e},o,{constructor:r,namespace:l,widgetName:e,widgetFullName:u}),s?(t.each(s._childConstructors,(function(e,i){var n=i.prototype;t.widget(n.namespace+"."+n.widgetName,r,i._proto)})),delete s._childConstructors):i._childConstructors.push(r),t.widget.bridge(e,r),r},t.widget.extend=function(e){for(var i,s,r=n.call(arguments,1),a=0,o=r.length;a<o;a++)for(i in r[a])s=r[a][i],r[a].hasOwnProperty(i)&&void 0!==s&&(t.isPlainObject(s)?e[i]=t.isPlainObject(e[i])?t.widget.extend({},e[i],s):t.widget.extend({},s):e[i]=s);return e},t.widget.bridge=function(e,i){var s=i.prototype.widgetFullName||e;t.fn[e]=function(r){var a="string"==typeof r,o=n.call(arguments,1),l=this;return a?this.length||"instance"!==r?this.each((function(){var i,n=t.data(this,s);return"instance"===r?(l=n,!1):n?t.isFunction(n[r])&&"_"!==r.charAt(0)?(i=n[r].apply(n,o))!==n&&void 0!==i?(l=i&&i.jquery?l.pushStack(i.get()):i,!1):void 0:t.error("no such method '"+r+"' for "+e+" widget instance"):t.error("cannot call methods on "+e+" prior to initialization; attempted to call method '"+r+"'")})):l=void 0:(o.length&&(r=t.widget.extend.apply(null,[r].concat(o))),this.each((function(){var e=t.data(this,s);e?(e.option(r||{}),e._init&&e._init()):t.data(this,s,new i(r,this))}))),l}},t.Widget=function(){},t.Widget._childConstructors=[],t.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(e,n){n=t(n||this.defaultElement||this)[0],this.element=t(n),this.uuid=i++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=t(),this.hoverable=t(),this.focusable=t(),this.classesElementLookup={},n!==this&&(t.data(n,this.widgetFullName,this),this._on(!0,this.element,{remove:function(t){t.target===n&&this.destroy()}}),this.document=t(n.style?n.ownerDocument:n.document||n),this.window=t(this.document[0].defaultView||this.document[0].parentWindow)),this.options=t.widget.extend({},this.options,this._getCreateOptions(),e),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:t.noop,_create:t.noop,_init:t.noop,destroy:function(){var e=this;this._destroy(),t.each(this.classesElementLookup,(function(t,i){e._removeClass(i,t)})),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:t.noop,widget:function(){return this.element},option:function(e,i){var n,s,r,a=e;if(0===arguments.length)return t.widget.extend({},this.options);if("string"==typeof e)if(a={},n=e.split("."),e=n.shift(),n.length){for(s=a[e]=t.widget.extend({},this.options[e]),r=0;r<n.length-1;r++)s[n[r]]=s[n[r]]||{},s=s[n[r]];if(e=n.pop(),1===arguments.length)return void 0===s[e]?null:s[e];s[e]=i}else{if(1===arguments.length)return void 0===this.options[e]?null:this.options[e];a[e]=i}return this._setOptions(a),this},_setOptions:function(t){var e;for(e in t)this._setOption(e,t[e]);return this},_setOption:function(t,e){return"classes"===t&&this._setOptionClasses(e),this.options[t]=e,"disabled"===t&&this._setOptionDisabled(e),this},_setOptionClasses:function(e){var i,n,s;for(i in e)s=this.classesElementLookup[i],e[i]!==this.options.classes[i]&&s&&s.length&&(n=t(s.get()),this._removeClass(s,i),n.addClass(this._classes({element:n,keys:i,classes:e,add:!0})))},_setOptionDisabled:function(t){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!t),t&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(e){var i=[],n=this;function s(s,r){var a,o;for(o=0;o<s.length;o++)a=n.classesElementLookup[s[o]]||t(),a=e.add?t(t.unique(a.get().concat(e.element.get()))):t(a.not(e.element).get()),n.classesElementLookup[s[o]]=a,i.push(s[o]),r&&e.classes[s[o]]&&i.push(e.classes[s[o]])}return e=t.extend({element:this.element,classes:this.options.classes||{}},e),this._on(e.element,{remove:"_untrackClassesElement"}),e.keys&&s(e.keys.match(/\S+/g)||[],!0),e.extra&&s(e.extra.match(/\S+/g)||[]),i.join(" ")},_untrackClassesElement:function(e){var i=this;t.each(i.classesElementLookup,(function(n,s){-1!==t.inArray(e.target,s)&&(i.classesElementLookup[n]=t(s.not(e.target).get()))}))},_removeClass:function(t,e,i){return this._toggleClass(t,e,i,!1)},_addClass:function(t,e,i){return this._toggleClass(t,e,i,!0)},_toggleClass:function(t,e,i,n){n="boolean"==typeof n?n:i;var s="string"==typeof t||null===t,r={extra:s?e:i,keys:s?t:e,element:s?this.element:t,add:n};return r.element.toggleClass(this._classes(r),n),this},_on:function(e,i,n){var s,r=this;"boolean"!=typeof e&&(n=i,i=e,e=!1),n?(i=s=t(i),this.bindings=this.bindings.add(i)):(n=i,i=this.element,s=this.widget()),t.each(n,(function(n,a){function o(){if(e||!0!==r.options.disabled&&!t(this).hasClass("ui-state-disabled"))return("string"==typeof a?r[a]:a).apply(r,arguments)}"string"!=typeof a&&(o.guid=a.guid=a.guid||o.guid||t.guid++);var l=n.match(/^([\w:-]*)\s*(.*)$/),u=l[1]+r.eventNamespace,h=l[2];h?s.on(u,h,o):i.on(u,o)}))},_off:function(e,i){i=(i||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.off(i).off(i),this.bindings=t(this.bindings.not(e).get()),this.focusable=t(this.focusable.not(e).get()),this.hoverable=t(this.hoverable.not(e).get())},_delay:function(t,e){var i=this;return setTimeout((function(){return("string"==typeof t?i[t]:t).apply(i,arguments)}),e||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){this._addClass(t(e.currentTarget),null,"ui-state-hover")},mouseleave:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){this._addClass(t(e.currentTarget),null,"ui-state-focus")},focusout:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-focus")}})},_trigger:function(e,i,n){var s,r,a=this.options[e];if(n=n||{},(i=t.Event(i)).type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),i.target=this.element[0],r=i.originalEvent)for(s in r)s in i||(i[s]=r[s]);return this.element.trigger(i,n),!(t.isFunction(a)&&!1===a.apply(this.element[0],[i].concat(n))||i.isDefaultPrevented())}},t.each({show:"fadeIn",hide:"fadeOut"},(function(e,i){t.Widget.prototype["_"+e]=function(n,s,r){var a;"string"==typeof s&&(s={effect:s});var o=s?!0===s||"number"==typeof s?i:s.effect||i:e;"number"==typeof(s=s||{})&&(s={duration:s}),a=!t.isEmptyObject(s),s.complete=r,s.delay&&n.delay(s.delay),a&&t.effects&&t.effects.effect[o]?n[e](s):o!==e&&n[o]?n[o](s.duration,s.easing,r):n.queue((function(i){t(this)[e](),r&&r.call(n[0]),i()}))}})),t.widget,
/*!
 * jQuery UI Position 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */
function(){var e,i=Math.max,n=Math.abs,s=/left|center|right/,r=/top|center|bottom/,a=/[\+\-]\d+(\.[\d]+)?%?/,o=/^\w+/,l=/%$/,u=t.fn.position;function h(t,e,i){return[parseFloat(t[0])*(l.test(t[0])?e/100:1),parseFloat(t[1])*(l.test(t[1])?i/100:1)]}function c(e,i){return parseInt(t.css(e,i),10)||0}function d(e){var i=e[0];return 9===i.nodeType?{width:e.width(),height:e.height(),offset:{top:0,left:0}}:t.isWindow(i)?{width:e.width(),height:e.height(),offset:{top:e.scrollTop(),left:e.scrollLeft()}}:i.preventDefault?{width:0,height:0,offset:{top:i.pageY,left:i.pageX}}:{width:e.outerWidth(),height:e.outerHeight(),offset:e.offset()}}t.position={scrollbarWidth:function(){if(void 0!==e)return e;var i,n,s=t("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),r=s.children()[0];return t("body").append(s),i=r.offsetWidth,s.css("overflow","scroll"),i===(n=r.offsetWidth)&&(n=s[0].clientWidth),s.remove(),e=i-n},getScrollInfo:function(e){var i=e.isWindow||e.isDocument?"":e.element.css("overflow-x"),n=e.isWindow||e.isDocument?"":e.element.css("overflow-y"),s="scroll"===i||"auto"===i&&e.width<e.element[0].scrollWidth;return{width:"scroll"===n||"auto"===n&&e.height<e.element[0].scrollHeight?t.position.scrollbarWidth():0,height:s?t.position.scrollbarWidth():0}},getWithinInfo:function(e){var i=t(e||window),n=t.isWindow(i[0]),s=!!i[0]&&9===i[0].nodeType;return{element:i,isWindow:n,isDocument:s,offset:n||s?{left:0,top:0}:t(e).offset(),scrollLeft:i.scrollLeft(),scrollTop:i.scrollTop(),width:i.outerWidth(),height:i.outerHeight()}}},t.fn.position=function(e){if(!e||!e.of)return u.apply(this,arguments);e=t.extend({},e);var l,p,f,g,m,v,b=t(e.of),y=t.position.getWithinInfo(e.within),_=t.position.getScrollInfo(y),x=(e.collision||"flip").split(" "),w={};return v=d(b),b[0].preventDefault&&(e.at="left top"),p=v.width,f=v.height,g=v.offset,m=t.extend({},g),t.each(["my","at"],(function(){var t,i,n=(e[this]||"").split(" ");1===n.length&&(n=s.test(n[0])?n.concat(["center"]):r.test(n[0])?["center"].concat(n):["center","center"]),n[0]=s.test(n[0])?n[0]:"center",n[1]=r.test(n[1])?n[1]:"center",t=a.exec(n[0]),i=a.exec(n[1]),w[this]=[t?t[0]:0,i?i[0]:0],e[this]=[o.exec(n[0])[0],o.exec(n[1])[0]]})),1===x.length&&(x[1]=x[0]),"right"===e.at[0]?m.left+=p:"center"===e.at[0]&&(m.left+=p/2),"bottom"===e.at[1]?m.top+=f:"center"===e.at[1]&&(m.top+=f/2),l=h(w.at,p,f),m.left+=l[0],m.top+=l[1],this.each((function(){var s,r,a=t(this),o=a.outerWidth(),u=a.outerHeight(),d=c(this,"marginLeft"),v=c(this,"marginTop"),S=o+d+c(this,"marginRight")+_.width,C=u+v+c(this,"marginBottom")+_.height,k=t.extend({},m),D=h(w.my,a.outerWidth(),a.outerHeight());"right"===e.my[0]?k.left-=o:"center"===e.my[0]&&(k.left-=o/2),"bottom"===e.my[1]?k.top-=u:"center"===e.my[1]&&(k.top-=u/2),k.left+=D[0],k.top+=D[1],s={marginLeft:d,marginTop:v},t.each(["left","top"],(function(i,n){t.ui.position[x[i]]&&t.ui.position[x[i]][n](k,{targetWidth:p,targetHeight:f,elemWidth:o,elemHeight:u,collisionPosition:s,collisionWidth:S,collisionHeight:C,offset:[l[0]+D[0],l[1]+D[1]],my:e.my,at:e.at,within:y,elem:a})})),e.using&&(r=function(t){var s=g.left-k.left,r=s+p-o,l=g.top-k.top,h=l+f-u,c={target:{element:b,left:g.left,top:g.top,width:p,height:f},element:{element:a,left:k.left,top:k.top,width:o,height:u},horizontal:r<0?"left":s>0?"right":"center",vertical:h<0?"top":l>0?"bottom":"middle"};p<o&&n(s+r)<p&&(c.horizontal="center"),f<u&&n(l+h)<f&&(c.vertical="middle"),i(n(s),n(r))>i(n(l),n(h))?c.important="horizontal":c.important="vertical",e.using.call(this,t,c)}),a.offset(t.extend(k,{using:r}))}))},t.ui.position={fit:{left:function(t,e){var n,s=e.within,r=s.isWindow?s.scrollLeft:s.offset.left,a=s.width,o=t.left-e.collisionPosition.marginLeft,l=r-o,u=o+e.collisionWidth-a-r;e.collisionWidth>a?l>0&&u<=0?(n=t.left+l+e.collisionWidth-a-r,t.left+=l-n):t.left=u>0&&l<=0?r:l>u?r+a-e.collisionWidth:r:l>0?t.left+=l:u>0?t.left-=u:t.left=i(t.left-o,t.left)},top:function(t,e){var n,s=e.within,r=s.isWindow?s.scrollTop:s.offset.top,a=e.within.height,o=t.top-e.collisionPosition.marginTop,l=r-o,u=o+e.collisionHeight-a-r;e.collisionHeight>a?l>0&&u<=0?(n=t.top+l+e.collisionHeight-a-r,t.top+=l-n):t.top=u>0&&l<=0?r:l>u?r+a-e.collisionHeight:r:l>0?t.top+=l:u>0?t.top-=u:t.top=i(t.top-o,t.top)}},flip:{left:function(t,e){var i,s,r=e.within,a=r.offset.left+r.scrollLeft,o=r.width,l=r.isWindow?r.scrollLeft:r.offset.left,u=t.left-e.collisionPosition.marginLeft,h=u-l,c=u+e.collisionWidth-o-l,d="left"===e.my[0]?-e.elemWidth:"right"===e.my[0]?e.elemWidth:0,p="left"===e.at[0]?e.targetWidth:"right"===e.at[0]?-e.targetWidth:0,f=-2*e.offset[0];h<0?((i=t.left+d+p+f+e.collisionWidth-o-a)<0||i<n(h))&&(t.left+=d+p+f):c>0&&((s=t.left-e.collisionPosition.marginLeft+d+p+f-l)>0||n(s)<c)&&(t.left+=d+p+f)},top:function(t,e){var i,s,r=e.within,a=r.offset.top+r.scrollTop,o=r.height,l=r.isWindow?r.scrollTop:r.offset.top,u=t.top-e.collisionPosition.marginTop,h=u-l,c=u+e.collisionHeight-o-l,d="top"===e.my[1]?-e.elemHeight:"bottom"===e.my[1]?e.elemHeight:0,p="top"===e.at[1]?e.targetHeight:"bottom"===e.at[1]?-e.targetHeight:0,f=-2*e.offset[1];h<0?((s=t.top+d+p+f+e.collisionHeight-o-a)<0||s<n(h))&&(t.top+=d+p+f):c>0&&((i=t.top-e.collisionPosition.marginTop+d+p+f-l)>0||n(i)<c)&&(t.top+=d+p+f)}},flipfit:{left:function(){t.ui.position.flip.left.apply(this,arguments),t.ui.position.fit.left.apply(this,arguments)},top:function(){t.ui.position.flip.top.apply(this,arguments),t.ui.position.fit.top.apply(this,arguments)}}}}(),t.ui.position,t.extend(t.expr[":"],{data:t.expr.createPseudo?t.expr.createPseudo((function(e){return function(i){return!!t.data(i,e)}})):function(e,i,n){return!!t.data(e,n[3])}}),t.fn.extend({disableSelection:(s="onselectstart"in document.createElement("div")?"selectstart":"mousedown",function(){return this.on(s+".ui-disableSelection",(function(t){t.preventDefault()}))}),enableSelection:function(){return this.off(".ui-disableSelection")}});var s,r,a,o,l=t;
/*!
 * jQuery UI :data 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */t.effects={effect:{}},
/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */
function(t,e){var i,n=/^([\-+])=\s*(\d+\.?\d*)/,s=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(t){return[t[1],t[2]/100,t[3]/100,t[4]]}}],r=t.Color=function(e,i,n,s){return new t.Color.fn.parse(e,i,n,s)},a={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},o={byte:{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},l=r.support={},u=t("<p>")[0],h=t.each;function c(t,e,i){var n=o[e.type]||{};return null==t?i||!e.def?null:e.def:(t=n.floor?~~t:parseFloat(t),isNaN(t)?e.def:n.mod?(t+n.mod)%n.mod:0>t?0:n.max<t?n.max:t)}function d(e){var n=r(),o=n._rgba=[];return e=e.toLowerCase(),h(s,(function(t,i){var s,r=i.re.exec(e),l=r&&i.parse(r),u=i.space||"rgba";if(l)return s=n[u](l),n[a[u].cache]=s[a[u].cache],o=n._rgba=s._rgba,!1})),o.length?("0,0,0,0"===o.join()&&t.extend(o,i.transparent),n):i[e]}function p(t,e,i){return 6*(i=(i+1)%1)<1?t+(e-t)*i*6:2*i<1?e:3*i<2?t+(e-t)*(2/3-i)*6:t}u.style.cssText="background-color:rgba(1,1,1,.5)",l.rgba=u.style.backgroundColor.indexOf("rgba")>-1,h(a,(function(t,e){e.cache="_"+t,e.props.alpha={idx:3,type:"percent",def:1}})),r.fn=t.extend(r.prototype,{parse:function(e,n,s,o){if(void 0===e)return this._rgba=[null,null,null,null],this;(e.jquery||e.nodeType)&&(e=t(e).css(n),n=void 0);var l=this,u=t.type(e),p=this._rgba=[];return void 0!==n&&(e=[e,n,s,o],u="array"),"string"===u?this.parse(d(e)||i._default):"array"===u?(h(a.rgba.props,(function(t,i){p[i.idx]=c(e[i.idx],i)})),this):"object"===u?(h(a,e instanceof r?function(t,i){e[i.cache]&&(l[i.cache]=e[i.cache].slice())}:function(i,n){var s=n.cache;h(n.props,(function(t,i){if(!l[s]&&n.to){if("alpha"===t||null==e[t])return;l[s]=n.to(l._rgba)}l[s][i.idx]=c(e[t],i,!0)})),l[s]&&t.inArray(null,l[s].slice(0,3))<0&&(l[s][3]=1,n.from&&(l._rgba=n.from(l[s])))}),this):void 0},is:function(t){var e=r(t),i=!0,n=this;return h(a,(function(t,s){var r,a=e[s.cache];return a&&(r=n[s.cache]||s.to&&s.to(n._rgba)||[],h(s.props,(function(t,e){if(null!=a[e.idx])return i=a[e.idx]===r[e.idx]}))),i})),i},_space:function(){var t=[],e=this;return h(a,(function(i,n){e[n.cache]&&t.push(i)})),t.pop()},transition:function(t,e){var i=r(t),n=i._space(),s=a[n],l=0===this.alpha()?r("transparent"):this,u=l[s.cache]||s.to(l._rgba),d=u.slice();return i=i[s.cache],h(s.props,(function(t,n){var s=n.idx,r=u[s],a=i[s],l=o[n.type]||{};null!==a&&(null===r?d[s]=a:(l.mod&&(a-r>l.mod/2?r+=l.mod:r-a>l.mod/2&&(r-=l.mod)),d[s]=c((a-r)*e+r,n)))})),this[n](d)},blend:function(e){if(1===this._rgba[3])return this;var i=this._rgba.slice(),n=i.pop(),s=r(e)._rgba;return r(t.map(i,(function(t,e){return(1-n)*s[e]+n*t})))},toRgbaString:function(){var e="rgba(",i=t.map(this._rgba,(function(t,e){return null==t?e>2?1:0:t}));return 1===i[3]&&(i.pop(),e="rgb("),e+i.join()+")"},toHslaString:function(){var e="hsla(",i=t.map(this.hsla(),(function(t,e){return null==t&&(t=e>2?1:0),e&&e<3&&(t=Math.round(100*t)+"%"),t}));return 1===i[3]&&(i.pop(),e="hsl("),e+i.join()+")"},toHexString:function(e){var i=this._rgba.slice(),n=i.pop();return e&&i.push(~~(255*n)),"#"+t.map(i,(function(t){return 1===(t=(t||0).toString(16)).length?"0"+t:t})).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),r.fn.parse.prototype=r.fn,a.hsla.to=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e,i,n=t[0]/255,s=t[1]/255,r=t[2]/255,a=t[3],o=Math.max(n,s,r),l=Math.min(n,s,r),u=o-l,h=o+l,c=.5*h;return e=l===o?0:n===o?60*(s-r)/u+360:s===o?60*(r-n)/u+120:60*(n-s)/u+240,i=0===u?0:c<=.5?u/h:u/(2-h),[Math.round(e)%360,i,c,null==a?1:a]},a.hsla.from=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e=t[0]/360,i=t[1],n=t[2],s=t[3],r=n<=.5?n*(1+i):n+i-n*i,a=2*n-r;return[Math.round(255*p(a,r,e+1/3)),Math.round(255*p(a,r,e)),Math.round(255*p(a,r,e-1/3)),s]},h(a,(function(e,i){var s=i.props,a=i.cache,o=i.to,l=i.from;r.fn[e]=function(e){if(o&&!this[a]&&(this[a]=o(this._rgba)),void 0===e)return this[a].slice();var i,n=t.type(e),u="array"===n||"object"===n?e:arguments,d=this[a].slice();return h(s,(function(t,e){var i=u["object"===n?t:e.idx];null==i&&(i=d[e.idx]),d[e.idx]=c(i,e)})),l?((i=r(l(d)))[a]=d,i):r(d)},h(s,(function(i,s){r.fn[i]||(r.fn[i]=function(r){var a,o=t.type(r),l="alpha"===i?this._hsla?"hsla":"rgba":e,u=this[l](),h=u[s.idx];return"undefined"===o?h:("function"===o&&(r=r.call(this,h),o=t.type(r)),null==r&&s.empty?this:("string"===o&&(a=n.exec(r))&&(r=h+parseFloat(a[2])*("+"===a[1]?1:-1)),u[s.idx]=r,this[l](u)))})}))})),r.hook=function(e){var i=e.split(" ");h(i,(function(e,i){t.cssHooks[i]={set:function(e,n){var s,a,o="";if("transparent"!==n&&("string"!==t.type(n)||(s=d(n)))){if(n=r(s||n),!l.rgba&&1!==n._rgba[3]){for(a="backgroundColor"===i?e.parentNode:e;(""===o||"transparent"===o)&&a&&a.style;)try{o=t.css(a,"backgroundColor"),a=a.parentNode}catch(t){}n=n.blend(o&&"transparent"!==o?o:"_default")}n=n.toRgbaString()}try{e.style[i]=n}catch(t){}}},t.fx.step[i]=function(e){e.colorInit||(e.start=r(e.elem,i),e.end=r(e.end),e.colorInit=!0),t.cssHooks[i].set(e.elem,e.start.transition(e.end,e.pos))}}))},r.hook("backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor"),t.cssHooks.borderColor={expand:function(t){var e={};return h(["Top","Right","Bottom","Left"],(function(i,n){e["border"+n+"Color"]=t})),e}},i=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(l),function(){var e=["add","remove","toggle"],i={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};function n(e){var i,n,s=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,r={};if(s&&s.length&&s[0]&&s[s[0]])for(n=s.length;n--;)"string"==typeof s[i=s[n]]&&(r[t.camelCase(i)]=s[i]);else for(i in s)"string"==typeof s[i]&&(r[i]=s[i]);return r}t.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],(function(e,i){t.fx.step[i]=function(t){("none"!==t.end&&!t.setAttr||1===t.pos&&!t.setAttr)&&(l.style(t.elem,i,t.end),t.setAttr=!0)}})),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.effects.animateClass=function(s,r,a,o){var l=t.speed(r,a,o);return this.queue((function(){var r,a=t(this),o=a.attr("class")||"",u=l.children?a.find("*").addBack():a;u=u.map((function(){return{el:t(this),start:n(this)}})),(r=function(){t.each(e,(function(t,e){s[e]&&a[e+"Class"](s[e])}))})(),u=u.map((function(){return this.end=n(this.el[0]),this.diff=function(e,n){var s,r,a={};for(s in n)r=n[s],e[s]!==r&&(i[s]||!t.fx.step[s]&&isNaN(parseFloat(r))||(a[s]=r));return a}(this.start,this.end),this})),a.attr("class",o),u=u.map((function(){var e=this,i=t.Deferred(),n=t.extend({},l,{queue:!1,complete:function(){i.resolve(e)}});return this.el.animate(this.diff,n),i.promise()})),t.when.apply(t,u.get()).done((function(){r(),t.each(arguments,(function(){var e=this.el;t.each(this.diff,(function(t){e.css(t,"")}))})),l.complete.call(a[0])}))}))},t.fn.extend({addClass:function(e){return function(i,n,s,r){return n?t.effects.animateClass.call(this,{add:i},n,s,r):e.apply(this,arguments)}}(t.fn.addClass),removeClass:function(e){return function(i,n,s,r){return arguments.length>1?t.effects.animateClass.call(this,{remove:i},n,s,r):e.apply(this,arguments)}}(t.fn.removeClass),toggleClass:function(e){return function(i,n,s,r,a){return"boolean"==typeof n||void 0===n?s?t.effects.animateClass.call(this,n?{add:i}:{remove:i},s,r,a):e.apply(this,arguments):t.effects.animateClass.call(this,{toggle:i},n,s,r)}}(t.fn.toggleClass),switchClass:function(e,i,n,s,r){return t.effects.animateClass.call(this,{add:i,remove:e},n,s,r)}})}(),function(){function e(e,i,n,s){return t.isPlainObject(e)&&(i=e,e=e.effect),e={effect:e},null==i&&(i={}),t.isFunction(i)&&(s=i,n=null,i={}),("number"==typeof i||t.fx.speeds[i])&&(s=n,n=i,i={}),t.isFunction(n)&&(s=n,n=null),i&&t.extend(e,i),n=n||i.duration,e.duration=t.fx.off?0:"number"==typeof n?n:n in t.fx.speeds?t.fx.speeds[n]:t.fx.speeds._default,e.complete=s||i.complete,e}function i(e){return!(e&&"number"!=typeof e&&!t.fx.speeds[e])||"string"==typeof e&&!t.effects.effect[e]||!!t.isFunction(e)||"object"==typeof e&&!e.effect}function n(t,e){var i=e.outerWidth(),n=e.outerHeight(),s=/^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/.exec(t)||["",0,i,n,0];return{top:parseFloat(s[1])||0,right:"auto"===s[2]?i:parseFloat(s[2]),bottom:"auto"===s[3]?n:parseFloat(s[3]),left:parseFloat(s[4])||0}}t.expr&&t.expr.filters&&t.expr.filters.animated&&(t.expr.filters.animated=function(e){return function(i){return!!t(i).data("ui-effects-animated")||e(i)}}(t.expr.filters.animated)),!1!==t.uiBackCompat&&t.extend(t.effects,{save:function(t,e){for(var i=0,n=e.length;i<n;i++)null!==e[i]&&t.data("ui-effects-"+e[i],t[0].style[e[i]])},restore:function(t,e){for(var i,n=0,s=e.length;n<s;n++)null!==e[n]&&(i=t.data("ui-effects-"+e[n]),t.css(e[n],i))},setMode:function(t,e){return"toggle"===e&&(e=t.is(":hidden")?"show":"hide"),e},createWrapper:function(e){if(e.parent().is(".ui-effects-wrapper"))return e.parent();var i={width:e.outerWidth(!0),height:e.outerHeight(!0),float:e.css("float")},n=t("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),s={width:e.width(),height:e.height()},r=document.activeElement;try{r.id}catch(t){r=document.body}return e.wrap(n),(e[0]===r||t.contains(e[0],r))&&t(r).trigger("focus"),n=e.parent(),"static"===e.css("position")?(n.css({position:"relative"}),e.css({position:"relative"})):(t.extend(i,{position:e.css("position"),zIndex:e.css("z-index")}),t.each(["top","left","bottom","right"],(function(t,n){i[n]=e.css(n),isNaN(parseInt(i[n],10))&&(i[n]="auto")})),e.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),e.css(s),n.css(i).show()},removeWrapper:function(e){var i=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),(e[0]===i||t.contains(e[0],i))&&t(i).trigger("focus")),e}}),t.extend(t.effects,{version:"1.12.1",define:function(e,i,n){return n||(n=i,i="effect"),t.effects.effect[e]=n,t.effects.effect[e].mode=i,n},scaledDimensions:function(t,e,i){if(0===e)return{height:0,width:0,outerHeight:0,outerWidth:0};var n="horizontal"!==i?(e||100)/100:1,s="vertical"!==i?(e||100)/100:1;return{height:t.height()*s,width:t.width()*n,outerHeight:t.outerHeight()*s,outerWidth:t.outerWidth()*n}},clipToBox:function(t){return{width:t.clip.right-t.clip.left,height:t.clip.bottom-t.clip.top,left:t.clip.left,top:t.clip.top}},unshift:function(t,e,i){var n=t.queue();e>1&&n.splice.apply(n,[1,0].concat(n.splice(e,i))),t.dequeue()},saveStyle:function(t){t.data("ui-effects-style",t[0].style.cssText)},restoreStyle:function(t){t[0].style.cssText=t.data("ui-effects-style")||"",t.removeData("ui-effects-style")},mode:function(t,e){var i=t.is(":hidden");return"toggle"===e&&(e=i?"show":"hide"),(i?"hide"===e:"show"===e)&&(e="none"),e},getBaseline:function(t,e){var i,n;switch(t[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=t[0]/e.height}switch(t[1]){case"left":n=0;break;case"center":n=.5;break;case"right":n=1;break;default:n=t[1]/e.width}return{x:n,y:i}},createPlaceholder:function(e){var i,n=e.css("position"),s=e.position();return e.css({marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()),/^(static|relative)/.test(n)&&(n="absolute",i=t("<"+e[0].nodeName+">").insertAfter(e).css({display:/^(inline|ruby)/.test(e.css("display"))?"inline-block":"block",visibility:"hidden",marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight"),float:e.css("float")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).addClass("ui-effects-placeholder"),e.data("ui-effects-placeholder",i)),e.css({position:n,left:s.left,top:s.top}),i},removePlaceholder:function(t){var e="ui-effects-placeholder",i=t.data(e);i&&(i.remove(),t.removeData(e))},cleanUp:function(e){t.effects.restoreStyle(e),t.effects.removePlaceholder(e)},setTransition:function(e,i,n,s){return s=s||{},t.each(i,(function(t,i){var r=e.cssUnit(i);r[0]>0&&(s[i]=r[0]*n+r[1])})),s}}),t.fn.extend({effect:function(){var i=e.apply(this,arguments),n=t.effects.effect[i.effect],s=n.mode,r=i.queue,a=r||"fx",o=i.complete,l=i.mode,u=[],h=function(e){var i=t(this),n=t.effects.mode(i,l)||s;i.data("ui-effects-animated",!0),u.push(n),s&&("show"===n||n===s&&"hide"===n)&&i.show(),s&&"none"===n||t.effects.saveStyle(i),t.isFunction(e)&&e()};if(t.fx.off||!n)return l?this[l](i.duration,o):this.each((function(){o&&o.call(this)}));function c(e){var r=t(this);function a(){t.isFunction(o)&&o.call(r[0]),t.isFunction(e)&&e()}i.mode=u.shift(),!1===t.uiBackCompat||s?"none"===i.mode?(r[l](),a()):n.call(r[0],i,(function(){r.removeData("ui-effects-animated"),t.effects.cleanUp(r),"hide"===i.mode&&r.hide(),a()})):(r.is(":hidden")?"hide"===l:"show"===l)?(r[l](),a()):n.call(r[0],i,a)}return!1===r?this.each(h).each(c):this.queue(a,h).queue(a,c)},show:function(t){return function(n){if(i(n))return t.apply(this,arguments);var s=e.apply(this,arguments);return s.mode="show",this.effect.call(this,s)}}(t.fn.show),hide:function(t){return function(n){if(i(n))return t.apply(this,arguments);var s=e.apply(this,arguments);return s.mode="hide",this.effect.call(this,s)}}(t.fn.hide),toggle:function(t){return function(n){if(i(n)||"boolean"==typeof n)return t.apply(this,arguments);var s=e.apply(this,arguments);return s.mode="toggle",this.effect.call(this,s)}}(t.fn.toggle),cssUnit:function(e){var i=this.css(e),n=[];return t.each(["em","px","%","pt"],(function(t,e){i.indexOf(e)>0&&(n=[parseFloat(i),e])})),n},cssClip:function(t){return t?this.css("clip","rect("+t.top+"px "+t.right+"px "+t.bottom+"px "+t.left+"px)"):n(this.css("clip"),this)},transfer:function(e,i){var n=t(this),s=t(e.to),r="fixed"===s.css("position"),a=t("body"),o=r?a.scrollTop():0,l=r?a.scrollLeft():0,u=s.offset(),h={top:u.top-o,left:u.left-l,height:s.innerHeight(),width:s.innerWidth()},c=n.offset(),d=t("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(e.className).css({top:c.top-o,left:c.left-l,height:n.innerHeight(),width:n.innerWidth(),position:r?"fixed":"absolute"}).animate(h,e.duration,e.easing,(function(){d.remove(),t.isFunction(i)&&i()}))}}),t.fx.step.clip=function(e){e.clipInit||(e.start=t(e.elem).cssClip(),"string"==typeof e.end&&(e.end=n(e.end,e.elem)),e.clipInit=!0),t(e.elem).cssClip({top:e.pos*(e.end.top-e.start.top)+e.start.top,right:e.pos*(e.end.right-e.start.right)+e.start.right,bottom:e.pos*(e.end.bottom-e.start.bottom)+e.start.bottom,left:e.pos*(e.end.left-e.start.left)+e.start.left})}}(),r={},t.each(["Quad","Cubic","Quart","Quint","Expo"],(function(t,e){r[e]=function(e){return Math.pow(e,t+2)}})),t.extend(r,{Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,i=4;t<((e=Math.pow(2,--i))-1)/11;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*e-2)/22-t,2)}}),t.each(r,(function(e,i){t.easing["easeIn"+e]=i,t.easing["easeOut"+e]=function(t){return 1-i(1-t)},t.easing["easeInOut"+e]=function(t){return t<.5?i(2*t)/2:1-i(-2*t+2)/2}})),t.effects,t.effects.define("blind","hide",(function(e,i){var n={up:["bottom","top"],vertical:["bottom","top"],down:["top","bottom"],left:["right","left"],horizontal:["right","left"],right:["left","right"]},s=t(this),r=e.direction||"up",a=s.cssClip(),o={clip:t.extend({},a)},l=t.effects.createPlaceholder(s);o.clip[n[r][0]]=o.clip[n[r][1]],"show"===e.mode&&(s.cssClip(o.clip),l&&l.css(t.effects.clipToBox(o)),o.clip=a),l&&l.animate(t.effects.clipToBox(o),e.duration,e.easing),s.animate(o,{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),t.effects.define("bounce",(function(e,i){var n,s,r,a=t(this),o=e.mode,l="hide"===o,u="show"===o,h=e.direction||"up",c=e.distance,d=e.times||5,p=2*d+(u||l?1:0),f=e.duration/p,g=e.easing,m="up"===h||"down"===h?"top":"left",v="up"===h||"left"===h,b=0,y=a.queue().length;for(t.effects.createPlaceholder(a),r=a.css(m),c||(c=a["top"===m?"outerHeight":"outerWidth"]()/3),u&&((s={opacity:1})[m]=r,a.css("opacity",0).css(m,v?2*-c:2*c).animate(s,f,g)),l&&(c/=Math.pow(2,d-1)),(s={})[m]=r;b<d;b++)(n={})[m]=(v?"-=":"+=")+c,a.animate(n,f,g).animate(s,f,g),c=l?2*c:c/2;l&&((n={opacity:0})[m]=(v?"-=":"+=")+c,a.animate(n,f,g)),a.queue(i),t.effects.unshift(a,y,p+1)})),t.effects.define("clip","hide",(function(e,i){var n,s={},r=t(this),a=e.direction||"vertical",o="both"===a,l=o||"horizontal"===a,u=o||"vertical"===a;n=r.cssClip(),s.clip={top:u?(n.bottom-n.top)/2:n.top,right:l?(n.right-n.left)/2:n.right,bottom:u?(n.bottom-n.top)/2:n.bottom,left:l?(n.right-n.left)/2:n.left},t.effects.createPlaceholder(r),"show"===e.mode&&(r.cssClip(s.clip),s.clip=n),r.animate(s,{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),t.effects.define("drop","hide",(function(e,i){var n,s=t(this),r="show"===e.mode,a=e.direction||"left",o="up"===a||"down"===a?"top":"left",l="up"===a||"left"===a?"-=":"+=",u="+="===l?"-=":"+=",h={opacity:0};t.effects.createPlaceholder(s),n=e.distance||s["top"===o?"outerHeight":"outerWidth"](!0)/2,h[o]=l+n,r&&(s.css(h),h[o]=u+n,h.opacity=1),s.animate(h,{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),t.effects.define("explode","hide",(function(e,i){var n,s,r,a,o,l,u=e.pieces?Math.round(Math.sqrt(e.pieces)):3,h=u,c=t(this),d="show"===e.mode,p=c.show().css("visibility","hidden").offset(),f=Math.ceil(c.outerWidth()/h),g=Math.ceil(c.outerHeight()/u),m=[];function v(){m.push(this),m.length===u*h&&(c.css({visibility:"visible"}),t(m).remove(),i())}for(n=0;n<u;n++)for(a=p.top+n*g,l=n-(u-1)/2,s=0;s<h;s++)r=p.left+s*f,o=s-(h-1)/2,c.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-s*f,top:-n*g}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:f,height:g,left:r+(d?o*f:0),top:a+(d?l*g:0),opacity:d?0:1}).animate({left:r+(d?0:o*f),top:a+(d?0:l*g),opacity:d?1:0},e.duration||500,e.easing,v)})),t.effects.define("fade","toggle",(function(e,i){var n="show"===e.mode;t(this).css("opacity",n?0:1).animate({opacity:n?1:0},{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),t.effects.define("fold","hide",(function(e,i){var n=t(this),s=e.mode,r="show"===s,a="hide"===s,o=e.size||15,l=/([0-9]+)%/.exec(o),u=e.horizFirst?["right","bottom"]:["bottom","right"],h=e.duration/2,c=t.effects.createPlaceholder(n),d=n.cssClip(),p={clip:t.extend({},d)},f={clip:t.extend({},d)},g=[d[u[0]],d[u[1]]],m=n.queue().length;l&&(o=parseInt(l[1],10)/100*g[a?0:1]),p.clip[u[0]]=o,f.clip[u[0]]=o,f.clip[u[1]]=0,r&&(n.cssClip(f.clip),c&&c.css(t.effects.clipToBox(f)),f.clip=d),n.queue((function(i){c&&c.animate(t.effects.clipToBox(p),h,e.easing).animate(t.effects.clipToBox(f),h,e.easing),i()})).animate(p,h,e.easing).animate(f,h,e.easing).queue(i),t.effects.unshift(n,m,4)})),t.effects.define("highlight","show",(function(e,i){var n=t(this),s={backgroundColor:n.css("backgroundColor")};"hide"===e.mode&&(s.opacity=0),t.effects.saveStyle(n),n.css({backgroundImage:"none",backgroundColor:e.color||"#ffff99"}).animate(s,{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),t.effects.define("size",(function(e,i){var n,s,r,a=t(this),o=["fontSize"],l=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],u=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],h=e.mode,c="effect"!==h,d=e.scale||"both",p=e.origin||["middle","center"],f=a.css("position"),g=a.position(),m=t.effects.scaledDimensions(a),v=e.from||m,b=e.to||t.effects.scaledDimensions(a,0);t.effects.createPlaceholder(a),"show"===h&&(r=v,v=b,b=r),s={from:{y:v.height/m.height,x:v.width/m.width},to:{y:b.height/m.height,x:b.width/m.width}},"box"!==d&&"both"!==d||(s.from.y!==s.to.y&&(v=t.effects.setTransition(a,l,s.from.y,v),b=t.effects.setTransition(a,l,s.to.y,b)),s.from.x!==s.to.x&&(v=t.effects.setTransition(a,u,s.from.x,v),b=t.effects.setTransition(a,u,s.to.x,b))),"content"!==d&&"both"!==d||s.from.y!==s.to.y&&(v=t.effects.setTransition(a,o,s.from.y,v),b=t.effects.setTransition(a,o,s.to.y,b)),p&&(n=t.effects.getBaseline(p,m),v.top=(m.outerHeight-v.outerHeight)*n.y+g.top,v.left=(m.outerWidth-v.outerWidth)*n.x+g.left,b.top=(m.outerHeight-b.outerHeight)*n.y+g.top,b.left=(m.outerWidth-b.outerWidth)*n.x+g.left),a.css(v),"content"!==d&&"both"!==d||(l=l.concat(["marginTop","marginBottom"]).concat(o),u=u.concat(["marginLeft","marginRight"]),a.find("*[width]").each((function(){var i=t(this),n=t.effects.scaledDimensions(i),r={height:n.height*s.from.y,width:n.width*s.from.x,outerHeight:n.outerHeight*s.from.y,outerWidth:n.outerWidth*s.from.x},a={height:n.height*s.to.y,width:n.width*s.to.x,outerHeight:n.height*s.to.y,outerWidth:n.width*s.to.x};s.from.y!==s.to.y&&(r=t.effects.setTransition(i,l,s.from.y,r),a=t.effects.setTransition(i,l,s.to.y,a)),s.from.x!==s.to.x&&(r=t.effects.setTransition(i,u,s.from.x,r),a=t.effects.setTransition(i,u,s.to.x,a)),c&&t.effects.saveStyle(i),i.css(r),i.animate(a,e.duration,e.easing,(function(){c&&t.effects.restoreStyle(i)}))}))),a.animate(b,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){var e=a.offset();0===b.opacity&&a.css("opacity",v.opacity),c||(a.css("position","static"===f?"relative":f).offset(e),t.effects.saveStyle(a)),i()}})})),t.effects.define("scale",(function(e,i){var n=t(this),s=e.mode,r=parseInt(e.percent,10)||(0===parseInt(e.percent,10)||"effect"!==s?0:100),a=t.extend(!0,{from:t.effects.scaledDimensions(n),to:t.effects.scaledDimensions(n,r,e.direction||"both"),origin:e.origin||["middle","center"]},e);e.fade&&(a.from.opacity=1,a.to.opacity=0),t.effects.effect.size.call(this,a,i)})),t.effects.define("puff","hide",(function(e,i){var n=t.extend(!0,{},e,{fade:!0,percent:parseInt(e.percent,10)||150});t.effects.effect.scale.call(this,n,i)})),t.effects.define("pulsate","show",(function(e,i){var n=t(this),s=e.mode,r="show"===s,a=r||"hide"===s,o=2*(e.times||5)+(a?1:0),l=e.duration/o,u=0,h=1,c=n.queue().length;for(!r&&n.is(":visible")||(n.css("opacity",0).show(),u=1);h<o;h++)n.animate({opacity:u},l,e.easing),u=1-u;n.animate({opacity:u},l,e.easing),n.queue(i),t.effects.unshift(n,c,o+1)})),t.effects.define("shake",(function(e,i){var n=1,s=t(this),r=e.direction||"left",a=e.distance||20,o=e.times||3,l=2*o+1,u=Math.round(e.duration/l),h="up"===r||"down"===r?"top":"left",c="up"===r||"left"===r,d={},p={},f={},g=s.queue().length;for(t.effects.createPlaceholder(s),d[h]=(c?"-=":"+=")+a,p[h]=(c?"+=":"-=")+2*a,f[h]=(c?"-=":"+=")+2*a,s.animate(d,u,e.easing);n<o;n++)s.animate(p,u,e.easing).animate(f,u,e.easing);s.animate(p,u,e.easing).animate(d,u/2,e.easing).queue(i),t.effects.unshift(s,g,l+1)})),t.effects.define("slide","show",(function(e,i){var n,s,r=t(this),a={up:["bottom","top"],down:["top","bottom"],left:["right","left"],right:["left","right"]},o=e.mode,l=e.direction||"left",u="up"===l||"down"===l?"top":"left",h="up"===l||"left"===l,c=e.distance||r["top"===u?"outerHeight":"outerWidth"](!0),d={};t.effects.createPlaceholder(r),n=r.cssClip(),s=r.position()[u],d[u]=(h?-1:1)*c+s,d.clip=r.cssClip(),d.clip[a[l][1]]=d.clip[a[l][0]],"show"===o&&(r.cssClip(d.clip),r.css(u,d[u]),d.clip=n,d[u]=s),r.animate(d,{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),!1!==t.uiBackCompat&&t.effects.define("transfer",(function(e,i){t(this).transfer(e,i)})),
/*!
 * jQuery UI Focusable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
t.ui.focusable=function(e,i){var n,s,r,a,o,l=e.nodeName.toLowerCase();return"area"===l?(s=(n=e.parentNode).name,!(!e.href||!s||"map"!==n.nodeName.toLowerCase())&&(r=t("img[usemap='#"+s+"']")).length>0&&r.is(":visible")):(/^(input|select|textarea|button|object)$/.test(l)?(a=!e.disabled)&&(o=t(e).closest("fieldset")[0])&&(a=!o.disabled):a="a"===l&&e.href||i,a&&t(e).is(":visible")&&function(t){for(var e=t.css("visibility");"inherit"===e;)e=(t=t.parent()).css("visibility");return"hidden"!==e}(t(e)))},t.extend(t.expr[":"],{focusable:function(e){return t.ui.focusable(e,null!=t.attr(e,"tabindex"))}}),t.ui.focusable,t.fn.form=function(){return"string"==typeof this[0].form?this.closest("form"):t(this[0].form)},t.ui.formResetMixin={_formResetHandler:function(){var e=t(this);setTimeout((function(){var i=e.data("ui-form-reset-instances");t.each(i,(function(){this.refresh()}))}))},_bindFormResetHandler:function(){if(this.form=this.element.form(),this.form.length){var t=this.form.data("ui-form-reset-instances")||[];t.length||this.form.on("reset.ui-form-reset",this._formResetHandler),t.push(this),this.form.data("ui-form-reset-instances",t)}},_unbindFormResetHandler:function(){if(this.form.length){var e=this.form.data("ui-form-reset-instances");e.splice(t.inArray(this,e),1),e.length?this.form.data("ui-form-reset-instances",e):this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset")}}},
/*!
 * jQuery UI Support for jQuery core 1.7.x 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 */
"1.7"===t.fn.jquery.substring(0,3)&&(t.each(["Width","Height"],(function(e,i){var n="Width"===i?["Left","Right"]:["Top","Bottom"],s=i.toLowerCase(),r={innerWidth:t.fn.innerWidth,innerHeight:t.fn.innerHeight,outerWidth:t.fn.outerWidth,outerHeight:t.fn.outerHeight};function a(e,i,s,r){return t.each(n,(function(){i-=parseFloat(t.css(e,"padding"+this))||0,s&&(i-=parseFloat(t.css(e,"border"+this+"Width"))||0),r&&(i-=parseFloat(t.css(e,"margin"+this))||0)})),i}t.fn["inner"+i]=function(e){return void 0===e?r["inner"+i].call(this):this.each((function(){t(this).css(s,a(this,e)+"px")}))},t.fn["outer"+i]=function(e,n){return"number"!=typeof e?r["outer"+i].call(this,e):this.each((function(){t(this).css(s,a(this,e,!0,n)+"px")}))}})),t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.ui.keyCode={BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38},t.ui.escapeSelector=(o=/([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g,function(t){return t.replace(o,"\\$1")}),t.fn.labels=function(){var e,i,n,s,r;return this[0].labels&&this[0].labels.length?this.pushStack(this[0].labels):(s=this.eq(0).parents("label"),(n=this.attr("id"))&&(r=(e=this.eq(0).parents().last()).add(e.length?e.siblings():this.siblings()),i="label[for='"+t.ui.escapeSelector(n)+"']",s=s.add(r.find(i).addBack(i))),this.pushStack(s))},t.fn.scrollParent=function(e){var i=this.css("position"),n="absolute"===i,s=e?/(auto|scroll|hidden)/:/(auto|scroll)/,r=this.parents().filter((function(){var e=t(this);return(!n||"static"!==e.css("position"))&&s.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))})).eq(0);return"fixed"!==i&&r.length?r:t(this[0].ownerDocument||document)},t.extend(t.expr[":"],{tabbable:function(e){var i=t.attr(e,"tabindex"),n=null!=i;return(!n||i>=0)&&t.ui.focusable(e,n)}}),t.fn.extend({uniqueId:(a=0,function(){return this.each((function(){this.id||(this.id="ui-id-"+ ++a)}))}),removeUniqueId:function(){return this.each((function(){/^ui-id-\d+$/.test(this.id)&&t(this).removeAttr("id")}))}}),t.widget("ui.accordion",{version:"1.12.1",options:{active:0,animate:{},classes:{"ui-accordion-header":"ui-corner-top","ui-accordion-header-collapsed":"ui-corner-all","ui-accordion-content":"ui-corner-bottom"},collapsible:!1,event:"click",header:"> li > :first-child, > :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},hideProps:{borderTopWidth:"hide",borderBottomWidth:"hide",paddingTop:"hide",paddingBottom:"hide",height:"hide"},showProps:{borderTopWidth:"show",borderBottomWidth:"show",paddingTop:"show",paddingBottom:"show",height:"show"},_create:function(){var e=this.options;this.prevShow=this.prevHide=t(),this._addClass("ui-accordion","ui-widget ui-helper-reset"),this.element.attr("role","tablist"),e.collapsible||!1!==e.active&&null!=e.active||(e.active=0),this._processPanels(),e.active<0&&(e.active+=this.headers.length),this._refresh()},_getCreateEventData:function(){return{header:this.active,panel:this.active.length?this.active.next():t()}},_createIcons:function(){var e,i,n=this.options.icons;n&&(e=t("<span>"),this._addClass(e,"ui-accordion-header-icon","ui-icon "+n.header),e.prependTo(this.headers),i=this.active.children(".ui-accordion-header-icon"),this._removeClass(i,n.header)._addClass(i,null,n.activeHeader)._addClass(this.headers,"ui-accordion-icons"))},_destroyIcons:function(){this._removeClass(this.headers,"ui-accordion-icons"),this.headers.children(".ui-accordion-header-icon").remove()},_destroy:function(){var t;this.element.removeAttr("role"),this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId(),this._destroyIcons(),t=this.headers.next().css("display","").removeAttr("role aria-hidden aria-labelledby").removeUniqueId(),"content"!==this.options.heightStyle&&t.css("height","")},_setOption:function(t,e){"active"!==t?("event"===t&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(e)),this._super(t,e),"collapsible"!==t||e||!1!==this.options.active||this._activate(0),"icons"===t&&(this._destroyIcons(),e&&this._createIcons())):this._activate(e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t),this._toggleClass(null,"ui-state-disabled",!!t),this._toggleClass(this.headers.add(this.headers.next()),null,"ui-state-disabled",!!t)},_keydown:function(e){if(!e.altKey&&!e.ctrlKey){var i=t.ui.keyCode,n=this.headers.length,s=this.headers.index(e.target),r=!1;switch(e.keyCode){case i.RIGHT:case i.DOWN:r=this.headers[(s+1)%n];break;case i.LEFT:case i.UP:r=this.headers[(s-1+n)%n];break;case i.SPACE:case i.ENTER:this._eventHandler(e);break;case i.HOME:r=this.headers[0];break;case i.END:r=this.headers[n-1]}r&&(t(e.target).attr("tabIndex",-1),t(r).attr("tabIndex",0),t(r).trigger("focus"),e.preventDefault())}},_panelKeyDown:function(e){e.keyCode===t.ui.keyCode.UP&&e.ctrlKey&&t(e.currentTarget).prev().trigger("focus")},refresh:function(){var e=this.options;this._processPanels(),!1===e.active&&!0===e.collapsible||!this.headers.length?(e.active=!1,this.active=t()):!1===e.active?this._activate(0):this.active.length&&!t.contains(this.element[0],this.active[0])?this.headers.length===this.headers.find(".ui-state-disabled").length?(e.active=!1,this.active=t()):this._activate(Math.max(0,e.active-1)):e.active=this.headers.index(this.active),this._destroyIcons(),this._refresh()},_processPanels:function(){var t=this.headers,e=this.panels;this.headers=this.element.find(this.options.header),this._addClass(this.headers,"ui-accordion-header ui-accordion-header-collapsed","ui-state-default"),this.panels=this.headers.next().filter(":not(.ui-accordion-content-active)").hide(),this._addClass(this.panels,"ui-accordion-content","ui-helper-reset ui-widget-content"),e&&(this._off(t.not(this.headers)),this._off(e.not(this.panels)))},_refresh:function(){var e,i=this.options,n=i.heightStyle,s=this.element.parent();this.active=this._findActive(i.active),this._addClass(this.active,"ui-accordion-header-active","ui-state-active")._removeClass(this.active,"ui-accordion-header-collapsed"),this._addClass(this.active.next(),"ui-accordion-content-active"),this.active.next().show(),this.headers.attr("role","tab").each((function(){var e=t(this),i=e.uniqueId().attr("id"),n=e.next(),s=n.uniqueId().attr("id");e.attr("aria-controls",s),n.attr("aria-labelledby",i)})).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}).next().attr({"aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}).next().attr({"aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._createIcons(),this._setupEvents(i.event),"fill"===n?(e=s.height(),this.element.siblings(":visible").each((function(){var i=t(this),n=i.css("position");"absolute"!==n&&"fixed"!==n&&(e-=i.outerHeight(!0))})),this.headers.each((function(){e-=t(this).outerHeight(!0)})),this.headers.next().each((function(){t(this).height(Math.max(0,e-t(this).innerHeight()+t(this).height()))})).css("overflow","auto")):"auto"===n&&(e=0,this.headers.next().each((function(){var i=t(this).is(":visible");i||t(this).show(),e=Math.max(e,t(this).css("height","").height()),i||t(this).hide()})).height(e))},_activate:function(e){var i=this._findActive(e)[0];i!==this.active[0]&&(i=i||this.active[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return"number"==typeof e?this.headers.eq(e):t()},_setupEvents:function(e){var i={keydown:"_keydown"};e&&t.each(e.split(" "),(function(t,e){i[e]="_eventHandler"})),this._off(this.headers.add(this.headers.next())),this._on(this.headers,i),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._hoverable(this.headers),this._focusable(this.headers)},_eventHandler:function(e){var i,n,s=this.options,r=this.active,a=t(e.currentTarget),o=a[0]===r[0],l=o&&s.collapsible,u=l?t():a.next(),h=r.next(),c={oldHeader:r,oldPanel:h,newHeader:l?t():a,newPanel:u};e.preventDefault(),o&&!s.collapsible||!1===this._trigger("beforeActivate",e,c)||(s.active=!l&&this.headers.index(a),this.active=o?t():a,this._toggle(c),this._removeClass(r,"ui-accordion-header-active","ui-state-active"),s.icons&&(i=r.children(".ui-accordion-header-icon"),this._removeClass(i,null,s.icons.activeHeader)._addClass(i,null,s.icons.header)),o||(this._removeClass(a,"ui-accordion-header-collapsed")._addClass(a,"ui-accordion-header-active","ui-state-active"),s.icons&&(n=a.children(".ui-accordion-header-icon"),this._removeClass(n,null,s.icons.header)._addClass(n,null,s.icons.activeHeader)),this._addClass(a.next(),"ui-accordion-content-active")))},_toggle:function(e){var i=e.newPanel,n=this.prevShow.length?this.prevShow:e.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=i,this.prevHide=n,this.options.animate?this._animate(i,n,e):(n.hide(),i.show(),this._toggleComplete(e)),n.attr({"aria-hidden":"true"}),n.prev().attr({"aria-selected":"false","aria-expanded":"false"}),i.length&&n.length?n.prev().attr({tabIndex:-1,"aria-expanded":"false"}):i.length&&this.headers.filter((function(){return 0===parseInt(t(this).attr("tabIndex"),10)})).attr("tabIndex",-1),i.attr("aria-hidden","false").prev().attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_animate:function(t,e,i){var n,s,r,a=this,o=0,l=t.css("box-sizing"),u=t.length&&(!e.length||t.index()<e.index()),h=this.options.animate||{},c=u&&h.down||h,d=function(){a._toggleComplete(i)};return"number"==typeof c&&(r=c),"string"==typeof c&&(s=c),s=s||c.easing||h.easing,r=r||c.duration||h.duration,e.length?t.length?(n=t.show().outerHeight(),e.animate(this.hideProps,{duration:r,easing:s,step:function(t,e){e.now=Math.round(t)}}),void t.hide().animate(this.showProps,{duration:r,easing:s,complete:d,step:function(t,i){i.now=Math.round(t),"height"!==i.prop?"content-box"===l&&(o+=i.now):"content"!==a.options.heightStyle&&(i.now=Math.round(n-e.outerHeight()-o),o=0)}})):e.animate(this.hideProps,r,s,d):t.animate(this.showProps,r,s,d)},_toggleComplete:function(t){var e=t.oldPanel,i=e.prev();this._removeClass(e,"ui-accordion-content-active"),this._removeClass(i,"ui-accordion-header-active")._addClass(i,"ui-accordion-header-collapsed"),e.length&&(e.parent()[0].className=e.parent()[0].className),this._trigger("activate",null,t)}}),t.ui.safeActiveElement=function(t){var e;try{e=t.activeElement}catch(i){e=t.body}return e||(e=t.body),e.nodeName||(e=t.body),e},t.widget("ui.menu",{version:"1.12.1",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-caret-1-e"},items:"> *",menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.mouseHandled=!1,this.element.uniqueId().attr({role:this.options.role,tabIndex:0}),this._addClass("ui-menu","ui-widget ui-widget-content"),this._on({"mousedown .ui-menu-item":function(t){t.preventDefault()},"click .ui-menu-item":function(e){var i=t(e.target),n=t(t.ui.safeActiveElement(this.document[0]));!this.mouseHandled&&i.not(".ui-state-disabled").length&&(this.select(e),e.isPropagationStopped()||(this.mouseHandled=!0),i.has(".ui-menu").length?this.expand(e):!this.element.is(":focus")&&n.closest(".ui-menu").length&&(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(e){if(!this.previousFilter){var i=t(e.target).closest(".ui-menu-item"),n=t(e.currentTarget);i[0]===n[0]&&(this._removeClass(n.siblings().children(".ui-state-active"),null,"ui-state-active"),this.focus(e,n))}},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(t,e){var i=this.active||this.element.find(this.options.items).eq(0);e||this.focus(t,i)},blur:function(e){this._delay((function(){!t.contains(this.element[0],t.ui.safeActiveElement(this.document[0]))&&this.collapseAll(e)}))},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(t){this._closeOnDocumentClick(t)&&this.collapseAll(t),this.mouseHandled=!1}})},_destroy:function(){var e=this.element.find(".ui-menu-item").removeAttr("role aria-disabled").children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show(),e.children().each((function(){var e=t(this);e.data("ui-menu-submenu-caret")&&e.remove()}))},_keydown:function(e){var i,n,s,r,a=!0;switch(e.keyCode){case t.ui.keyCode.PAGE_UP:this.previousPage(e);break;case t.ui.keyCode.PAGE_DOWN:this.nextPage(e);break;case t.ui.keyCode.HOME:this._move("first","first",e);break;case t.ui.keyCode.END:this._move("last","last",e);break;case t.ui.keyCode.UP:this.previous(e);break;case t.ui.keyCode.DOWN:this.next(e);break;case t.ui.keyCode.LEFT:this.collapse(e);break;case t.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(e);break;case t.ui.keyCode.ENTER:case t.ui.keyCode.SPACE:this._activate(e);break;case t.ui.keyCode.ESCAPE:this.collapse(e);break;default:a=!1,n=this.previousFilter||"",r=!1,s=e.keyCode>=96&&e.keyCode<=105?(e.keyCode-96).toString():String.fromCharCode(e.keyCode),clearTimeout(this.filterTimer),s===n?r=!0:s=n+s,i=this._filterMenuItems(s),(i=r&&-1!==i.index(this.active.next())?this.active.nextAll(".ui-menu-item"):i).length||(s=String.fromCharCode(e.keyCode),i=this._filterMenuItems(s)),i.length?(this.focus(e,i),this.previousFilter=s,this.filterTimer=this._delay((function(){delete this.previousFilter}),1e3)):delete this.previousFilter}a&&e.preventDefault()},_activate:function(t){this.active&&!this.active.is(".ui-state-disabled")&&(this.active.children("[aria-haspopup='true']").length?this.expand(t):this.select(t))},refresh:function(){var e,i,n,s,r=this,a=this.options.icons.submenu,o=this.element.find(this.options.menus);this._toggleClass("ui-menu-icons",null,!!this.element.find(".ui-icon").length),i=o.filter(":not(.ui-menu)").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each((function(){var e=t(this),i=e.prev(),n=t("<span>").data("ui-menu-submenu-caret",!0);r._addClass(n,"ui-menu-icon","ui-icon "+a),i.attr("aria-haspopup","true").prepend(n),e.attr("aria-labelledby",i.attr("id"))})),this._addClass(i,"ui-menu","ui-widget ui-widget-content ui-front"),(e=o.add(this.element).find(this.options.items)).not(".ui-menu-item").each((function(){var e=t(this);r._isDivider(e)&&r._addClass(e,"ui-menu-divider","ui-widget-content")})),s=(n=e.not(".ui-menu-item, .ui-menu-divider")).children().not(".ui-menu").uniqueId().attr({tabIndex:-1,role:this._itemRole()}),this._addClass(n,"ui-menu-item")._addClass(s,"ui-menu-item-wrapper"),e.filter(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!t.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},_setOption:function(t,e){if("icons"===t){var i=this.element.find(".ui-menu-icon");this._removeClass(i,null,this.options.icons.submenu)._addClass(i,null,e.submenu)}this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",String(t)),this._toggleClass(null,"ui-state-disabled",!!t)},focus:function(t,e){var i,n,s;this.blur(t,t&&"focus"===t.type),this._scrollIntoView(e),this.active=e.first(),n=this.active.children(".ui-menu-item-wrapper"),this._addClass(n,null,"ui-state-active"),this.options.role&&this.element.attr("aria-activedescendant",n.attr("id")),s=this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"),this._addClass(s,null,"ui-state-active"),t&&"keydown"===t.type?this._close():this.timer=this._delay((function(){this._close()}),this.delay),(i=e.children(".ui-menu")).length&&t&&/^mouse/.test(t.type)&&this._startOpening(i),this.activeMenu=e.parent(),this._trigger("focus",t,{item:e})},_scrollIntoView:function(e){var i,n,s,r,a,o;this._hasScroll()&&(i=parseFloat(t.css(this.activeMenu[0],"borderTopWidth"))||0,n=parseFloat(t.css(this.activeMenu[0],"paddingTop"))||0,s=e.offset().top-this.activeMenu.offset().top-i-n,r=this.activeMenu.scrollTop(),a=this.activeMenu.height(),o=e.outerHeight(),s<0?this.activeMenu.scrollTop(r+s):s+o>a&&this.activeMenu.scrollTop(r+s-a+o))},blur:function(t,e){e||clearTimeout(this.timer),this.active&&(this._removeClass(this.active.children(".ui-menu-item-wrapper"),null,"ui-state-active"),this._trigger("blur",t,{item:this.active}),this.active=null)},_startOpening:function(t){clearTimeout(this.timer),"true"===t.attr("aria-hidden")&&(this.timer=this._delay((function(){this._close(),this._open(t)}),this.delay))},_open:function(e){var i=t.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden","true"),e.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(i)},collapseAll:function(e,i){clearTimeout(this.timer),this.timer=this._delay((function(){var n=i?this.element:t(e&&e.target).closest(this.element.find(".ui-menu"));n.length||(n=this.element),this._close(n),this.blur(e),this._removeClass(n.find(".ui-state-active"),null,"ui-state-active"),this.activeMenu=n}),this.delay)},_close:function(t){t||(t=this.active?this.active.parent():this.element),t.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false")},_closeOnDocumentClick:function(e){return!t(e.target).closest(".ui-menu").length},_isDivider:function(t){return!/[^\-\u2014\u2013\s]/.test(t.text())},collapse:function(t){var e=this.active&&this.active.parent().closest(".ui-menu-item",this.element);e&&e.length&&(this._close(),this.focus(t,e))},expand:function(t){var e=this.active&&this.active.children(".ui-menu ").find(this.options.items).first();e&&e.length&&(this._open(e.parent()),this._delay((function(){this.focus(t,e)})))},next:function(t){this._move("next","first",t)},previous:function(t){this._move("prev","last",t)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(t,e,i){var n;this.active&&(n="first"===t||"last"===t?this.active["first"===t?"prevAll":"nextAll"](".ui-menu-item").eq(-1):this.active[t+"All"](".ui-menu-item").eq(0)),n&&n.length&&this.active||(n=this.activeMenu.find(this.options.items)[e]()),this.focus(i,n)},nextPage:function(e){var i,n,s;this.active?this.isLastItem()||(this._hasScroll()?(n=this.active.offset().top,s=this.element.height(),this.active.nextAll(".ui-menu-item").each((function(){return(i=t(this)).offset().top-n-s<0})),this.focus(e,i)):this.focus(e,this.activeMenu.find(this.options.items)[this.active?"last":"first"]())):this.next(e)},previousPage:function(e){var i,n,s;this.active?this.isFirstItem()||(this._hasScroll()?(n=this.active.offset().top,s=this.element.height(),this.active.prevAll(".ui-menu-item").each((function(){return(i=t(this)).offset().top-n+s>0})),this.focus(e,i)):this.focus(e,this.activeMenu.find(this.options.items).first())):this.next(e)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(e){this.active=this.active||t(e.target).closest(".ui-menu-item");var i={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(e,!0),this._trigger("select",e,i)},_filterMenuItems:function(e){var i=e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"),n=new RegExp("^"+i,"i");return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter((function(){return n.test(t.trim(t(this).children(".ui-menu-item-wrapper").text()))}))}}),
/*!
 * jQuery UI Autocomplete 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
t.widget("ui.autocomplete",{version:"1.12.1",defaultElement:"<input>",options:{appendTo:null,autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},requestIndex:0,pending:0,_create:function(){var e,i,n,s=this.element[0].nodeName.toLowerCase(),r="textarea"===s,a="input"===s;this.isMultiLine=r||!a&&this._isContentEditable(this.element),this.valueMethod=this.element[r||a?"val":"text"],this.isNewMenu=!0,this._addClass("ui-autocomplete-input"),this.element.attr("autocomplete","off"),this._on(this.element,{keydown:function(s){if(this.element.prop("readOnly"))return e=!0,n=!0,void(i=!0);e=!1,n=!1,i=!1;var r=t.ui.keyCode;switch(s.keyCode){case r.PAGE_UP:e=!0,this._move("previousPage",s);break;case r.PAGE_DOWN:e=!0,this._move("nextPage",s);break;case r.UP:e=!0,this._keyEvent("previous",s);break;case r.DOWN:e=!0,this._keyEvent("next",s);break;case r.ENTER:this.menu.active&&(e=!0,s.preventDefault(),this.menu.select(s));break;case r.TAB:this.menu.active&&this.menu.select(s);break;case r.ESCAPE:this.menu.element.is(":visible")&&(this.isMultiLine||this._value(this.term),this.close(s),s.preventDefault());break;default:i=!0,this._searchTimeout(s)}},keypress:function(n){if(e)return e=!1,void(this.isMultiLine&&!this.menu.element.is(":visible")||n.preventDefault());if(!i){var s=t.ui.keyCode;switch(n.keyCode){case s.PAGE_UP:this._move("previousPage",n);break;case s.PAGE_DOWN:this._move("nextPage",n);break;case s.UP:this._keyEvent("previous",n);break;case s.DOWN:this._keyEvent("next",n)}}},input:function(t){if(n)return n=!1,void t.preventDefault();this._searchTimeout(t)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(t){this.cancelBlur?delete this.cancelBlur:(clearTimeout(this.searching),this.close(t),this._change(t))}}),this._initSource(),this.menu=t("<ul>").appendTo(this._appendTo()).menu({role:null}).hide().menu("instance"),this._addClass(this.menu.element,"ui-autocomplete","ui-front"),this._on(this.menu.element,{mousedown:function(e){e.preventDefault(),this.cancelBlur=!0,this._delay((function(){delete this.cancelBlur,this.element[0]!==t.ui.safeActiveElement(this.document[0])&&this.element.trigger("focus")}))},menufocus:function(e,i){var n,s;if(this.isNewMenu&&(this.isNewMenu=!1,e.originalEvent&&/^mouse/.test(e.originalEvent.type)))return this.menu.blur(),void this.document.one("mousemove",(function(){t(e.target).trigger(e.originalEvent)}));s=i.item.data("ui-autocomplete-item"),!1!==this._trigger("focus",e,{item:s})&&e.originalEvent&&/^key/.test(e.originalEvent.type)&&this._value(s.value),(n=i.item.attr("aria-label")||s.value)&&t.trim(n).length&&(this.liveRegion.children().hide(),t("<div>").text(n).appendTo(this.liveRegion))},menuselect:function(e,i){var n=i.item.data("ui-autocomplete-item"),s=this.previous;this.element[0]!==t.ui.safeActiveElement(this.document[0])&&(this.element.trigger("focus"),this.previous=s,this._delay((function(){this.previous=s,this.selectedItem=n}))),!1!==this._trigger("select",e,{item:n})&&this._value(n.value),this.term=this._value(),this.close(e),this.selectedItem=n}}),this.liveRegion=t("<div>",{role:"status","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(t,e){this._super(t,e),"source"===t&&this._initSource(),"appendTo"===t&&this.menu.element.appendTo(this._appendTo()),"disabled"===t&&e&&this.xhr&&this.xhr.abort()},_isEventTargetInWidget:function(e){var i=this.menu.element[0];return e.target===this.element[0]||e.target===i||t.contains(i,e.target)},_closeOnClickOutside:function(t){this._isEventTargetInWidget(t)||this.close()},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e&&e[0]||(e=this.element.closest(".ui-front, dialog")),e.length||(e=this.document[0].body),e},_initSource:function(){var e,i,n=this;t.isArray(this.options.source)?(e=this.options.source,this.source=function(i,n){n(t.ui.autocomplete.filter(e,i.term))}):"string"==typeof this.options.source?(i=this.options.source,this.source=function(e,s){n.xhr&&n.xhr.abort(),n.xhr=t.ajax({url:i,data:e,dataType:"json",success:function(t){s(t)},error:function(){s([])}})}):this.source=this.options.source},_searchTimeout:function(t){clearTimeout(this.searching),this.searching=this._delay((function(){var e=this.term===this._value(),i=this.menu.element.is(":visible"),n=t.altKey||t.ctrlKey||t.metaKey||t.shiftKey;e&&(!e||i||n)||(this.selectedItem=null,this.search(null,t))}),this.options.delay)},search:function(t,e){return t=null!=t?t:this._value(),this.term=this._value(),t.length<this.options.minLength?this.close(e):!1!==this._trigger("search",e)?this._search(t):void 0},_search:function(t){this.pending++,this._addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:t},this._response())},_response:function(){var e=++this.requestIndex;return t.proxy((function(t){e===this.requestIndex&&this.__response(t),this.pending--,this.pending||this._removeClass("ui-autocomplete-loading")}),this)},__response:function(t){t&&(t=this._normalize(t)),this._trigger("response",null,{content:t}),!this.options.disabled&&t&&t.length&&!this.cancelSearch?(this._suggest(t),this._trigger("open")):this._close()},close:function(t){this.cancelSearch=!0,this._close(t)},_close:function(t){this._off(this.document,"mousedown"),this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",t))},_change:function(t){this.previous!==this._value()&&this._trigger("change",t,{item:this.selectedItem})},_normalize:function(e){return e.length&&e[0].label&&e[0].value?e:t.map(e,(function(e){return"string"==typeof e?{label:e,value:e}:t.extend({},e,{label:e.label||e.value,value:e.value||e.label})}))},_suggest:function(e){var i=this.menu.element.empty();this._renderMenu(i,e),this.isNewMenu=!0,this.menu.refresh(),i.show(),this._resizeMenu(),i.position(t.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next(),this._on(this.document,{mousedown:"_closeOnClickOutside"})},_resizeMenu:function(){var t=this.menu.element;t.outerWidth(Math.max(t.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(e,i){var n=this;t.each(i,(function(t,i){n._renderItemData(e,i)}))},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-autocomplete-item",e)},_renderItem:function(e,i){return t("<li>").append(t("<div>").text(i.label)).appendTo(e)},_move:function(t,e){if(this.menu.element.is(":visible"))return this.menu.isFirstItem()&&/^previous/.test(t)||this.menu.isLastItem()&&/^next/.test(t)?(this.isMultiLine||this._value(this.term),void this.menu.blur()):void this.menu[t](e);this.search(null,e)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(t,e){this.isMultiLine&&!this.menu.element.is(":visible")||(this._move(t,e),e.preventDefault())},_isContentEditable:function(t){if(!t.length)return!1;var e=t.prop("contentEditable");return"inherit"===e?this._isContentEditable(t.parent()):"true"===e}}),t.extend(t.ui.autocomplete,{escapeRegex:function(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(e,i){var n=new RegExp(t.ui.autocomplete.escapeRegex(i),"i");return t.grep(e,(function(t){return n.test(t.label||t.value||t)}))}}),t.widget("ui.autocomplete",t.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(t){return t+(t>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(e){var i;this._superApply(arguments),this.options.disabled||this.cancelSearch||(i=e&&e.length?this.options.messages.results(e.length):this.options.messages.noResults,this.liveRegion.children().hide(),t("<div>").text(i).appendTo(this.liveRegion))}}),t.ui.autocomplete;var u,h=/ui-corner-([a-z]){2,6}/g;
/*!
 * jQuery UI Controlgroup 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */function c(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},t.extend(this._defaults,this.regional[""]),this.regional.en=t.extend(!0,{},this.regional[""]),this.regional["en-US"]=t.extend(!0,{},this.regional.en),this.dpDiv=d(t("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function d(e){var i="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.on("mouseout",i,(function(){t(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).removeClass("ui-datepicker-next-hover")})).on("mouseover",i,p)}function p(){t.datepicker._isDisabledDatepicker(u.inline?u.dpDiv.parent()[0]:u.input[0])||(t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),t(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).addClass("ui-datepicker-next-hover"))}function f(e,i){for(var n in t.extend(e,i),i)null==i[n]&&(e[n]=i[n]);return e}t.widget("ui.controlgroup",{version:"1.12.1",defaultElement:"<div>",options:{direction:"horizontal",disabled:null,onlyVisible:!0,items:{button:"input[type=button], input[type=submit], input[type=reset], button, a",controlgroupLabel:".ui-controlgroup-label",checkboxradio:"input[type='checkbox'], input[type='radio']",selectmenu:"select",spinner:".ui-spinner-input"}},_create:function(){this._enhance()},_enhance:function(){this.element.attr("role","toolbar"),this.refresh()},_destroy:function(){this._callChildMethod("destroy"),this.childWidgets.removeData("ui-controlgroup-data"),this.element.removeAttr("role"),this.options.items.controlgroupLabel&&this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap()},_initWidgets:function(){var e=this,i=[];t.each(this.options.items,(function(n,s){var r,a={};if(s)return"controlgroupLabel"===n?((r=e.element.find(s)).each((function(){var e=t(this);e.children(".ui-controlgroup-label-contents").length||e.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>")})),e._addClass(r,null,"ui-widget ui-widget-content ui-state-default"),void(i=i.concat(r.get()))):void(t.fn[n]&&(a=e["_"+n+"Options"]?e["_"+n+"Options"]("middle"):{classes:{}},e.element.find(s).each((function(){var s=t(this),r=s[n]("instance"),o=t.widget.extend({},a);if("button"!==n||!s.parent(".ui-spinner").length){r||(r=s[n]()[n]("instance")),r&&(o.classes=e._resolveClassesValues(o.classes,r)),s[n](o);var l=s[n]("widget");t.data(l[0],"ui-controlgroup-data",r||s[n]("instance")),i.push(l[0])}}))))})),this.childWidgets=t(t.unique(i)),this._addClass(this.childWidgets,"ui-controlgroup-item")},_callChildMethod:function(e){this.childWidgets.each((function(){var i=t(this).data("ui-controlgroup-data");i&&i[e]&&i[e]()}))},_updateCornerClass:function(t,e){var i=this._buildSimpleOptions(e,"label").classes.label;this._removeClass(t,null,"ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all"),this._addClass(t,null,i)},_buildSimpleOptions:function(t,e){var i="vertical"===this.options.direction,n={classes:{}};return n.classes[e]={middle:"",first:"ui-corner-"+(i?"top":"left"),last:"ui-corner-"+(i?"bottom":"right"),only:"ui-corner-all"}[t],n},_spinnerOptions:function(t){var e=this._buildSimpleOptions(t,"ui-spinner");return e.classes["ui-spinner-up"]="",e.classes["ui-spinner-down"]="",e},_buttonOptions:function(t){return this._buildSimpleOptions(t,"ui-button")},_checkboxradioOptions:function(t){return this._buildSimpleOptions(t,"ui-checkboxradio-label")},_selectmenuOptions:function(t){var e="vertical"===this.options.direction;return{width:!!e&&"auto",classes:{middle:{"ui-selectmenu-button-open":"","ui-selectmenu-button-closed":""},first:{"ui-selectmenu-button-open":"ui-corner-"+(e?"top":"tl"),"ui-selectmenu-button-closed":"ui-corner-"+(e?"top":"left")},last:{"ui-selectmenu-button-open":e?"":"ui-corner-tr","ui-selectmenu-button-closed":"ui-corner-"+(e?"bottom":"right")},only:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"}}[t]}},_resolveClassesValues:function(e,i){var n={};return t.each(e,(function(s){var r=i.options.classes[s]||"";r=t.trim(r.replace(h,"")),n[s]=(r+" "+e[s]).replace(/\s+/g," ")})),n},_setOption:function(t,e){"direction"===t&&this._removeClass("ui-controlgroup-"+this.options.direction),this._super(t,e),"disabled"!==t?this.refresh():this._callChildMethod(e?"disable":"enable")},refresh:function(){var e,i=this;this._addClass("ui-controlgroup ui-controlgroup-"+this.options.direction),"horizontal"===this.options.direction&&this._addClass(null,"ui-helper-clearfix"),this._initWidgets(),e=this.childWidgets,this.options.onlyVisible&&(e=e.filter(":visible")),e.length&&(t.each(["first","last"],(function(t,n){var s=e[n]().data("ui-controlgroup-data");if(s&&i["_"+s.widgetName+"Options"]){var r=i["_"+s.widgetName+"Options"](1===e.length?"only":n);r.classes=i._resolveClassesValues(r.classes,s),s.element[s.widgetName](r)}else i._updateCornerClass(e[n](),n)})),this._callChildMethod("refresh"))}}),
/*!
 * jQuery UI Checkboxradio 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
t.widget("ui.checkboxradio",[t.ui.formResetMixin,{version:"1.12.1",options:{disabled:null,label:null,icon:!0,classes:{"ui-checkboxradio-label":"ui-corner-all","ui-checkboxradio-icon":"ui-corner-all"}},_getCreateOptions:function(){var e,i,n=this,s=this._super()||{};return this._readType(),i=this.element.labels(),this.label=t(i[i.length-1]),this.label.length||t.error("No label found for checkboxradio widget"),this.originalLabel="",this.label.contents().not(this.element[0]).each((function(){n.originalLabel+=3===this.nodeType?t(this).text():this.outerHTML})),this.originalLabel&&(s.label=this.originalLabel),null!=(e=this.element[0].disabled)&&(s.disabled=e),s},_create:function(){var t=this.element[0].checked;this._bindFormResetHandler(),null==this.options.disabled&&(this.options.disabled=this.element[0].disabled),this._setOption("disabled",this.options.disabled),this._addClass("ui-checkboxradio","ui-helper-hidden-accessible"),this._addClass(this.label,"ui-checkboxradio-label","ui-button ui-widget"),"radio"===this.type&&this._addClass(this.label,"ui-checkboxradio-radio-label"),this.options.label&&this.options.label!==this.originalLabel?this._updateLabel():this.originalLabel&&(this.options.label=this.originalLabel),this._enhance(),t&&(this._addClass(this.label,"ui-checkboxradio-checked","ui-state-active"),this.icon&&this._addClass(this.icon,null,"ui-state-hover")),this._on({change:"_toggleClasses",focus:function(){this._addClass(this.label,null,"ui-state-focus ui-visual-focus")},blur:function(){this._removeClass(this.label,null,"ui-state-focus ui-visual-focus")}})},_readType:function(){var e=this.element[0].nodeName.toLowerCase();this.type=this.element[0].type,"input"===e&&/radio|checkbox/.test(this.type)||t.error("Can't create checkboxradio on element.nodeName="+e+" and element.type="+this.type)},_enhance:function(){this._updateIcon(this.element[0].checked)},widget:function(){return this.label},_getRadioGroup:function(){var e=this.element[0].name,i="input[name='"+t.ui.escapeSelector(e)+"']";return e?(this.form.length?t(this.form[0].elements).filter(i):t(i).filter((function(){return 0===t(this).form().length}))).not(this.element):t([])},_toggleClasses:function(){var e=this.element[0].checked;this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",e),this.options.icon&&"checkbox"===this.type&&this._toggleClass(this.icon,null,"ui-icon-check ui-state-checked",e)._toggleClass(this.icon,null,"ui-icon-blank",!e),"radio"===this.type&&this._getRadioGroup().each((function(){var e=t(this).checkboxradio("instance");e&&e._removeClass(e.label,"ui-checkboxradio-checked","ui-state-active")}))},_destroy:function(){this._unbindFormResetHandler(),this.icon&&(this.icon.remove(),this.iconSpace.remove())},_setOption:function(t,e){if("label"!==t||e){if(this._super(t,e),"disabled"===t)return this._toggleClass(this.label,null,"ui-state-disabled",e),void(this.element[0].disabled=e);this.refresh()}},_updateIcon:function(e){var i="ui-icon ui-icon-background ";this.options.icon?(this.icon||(this.icon=t("<span>"),this.iconSpace=t("<span> </span>"),this._addClass(this.iconSpace,"ui-checkboxradio-icon-space")),"checkbox"===this.type?(i+=e?"ui-icon-check ui-state-checked":"ui-icon-blank",this._removeClass(this.icon,null,e?"ui-icon-blank":"ui-icon-check")):i+="ui-icon-blank",this._addClass(this.icon,"ui-checkboxradio-icon",i),e||this._removeClass(this.icon,null,"ui-icon-check ui-state-checked"),this.icon.prependTo(this.label).after(this.iconSpace)):void 0!==this.icon&&(this.icon.remove(),this.iconSpace.remove(),delete this.icon)},_updateLabel:function(){var t=this.label.contents().not(this.element[0]);this.icon&&(t=t.not(this.icon[0])),this.iconSpace&&(t=t.not(this.iconSpace[0])),t.remove(),this.label.append(this.options.label)},refresh:function(){var t=this.element[0].checked,e=this.element[0].disabled;this._updateIcon(t),this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",t),null!==this.options.label&&this._updateLabel(),e!==this.options.disabled&&this._setOptions({disabled:e})}}]),t.ui.checkboxradio,
/*!
 * jQuery UI Button 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
t.widget("ui.button",{version:"1.12.1",defaultElement:"<button>",options:{classes:{"ui-button":"ui-corner-all"},disabled:null,icon:null,iconPosition:"beginning",label:null,showLabel:!0},_getCreateOptions:function(){var t,e=this._super()||{};return this.isInput=this.element.is("input"),null!=(t=this.element[0].disabled)&&(e.disabled=t),this.originalLabel=this.isInput?this.element.val():this.element.html(),this.originalLabel&&(e.label=this.originalLabel),e},_create:function(){!this.option.showLabel&!this.options.icon&&(this.options.showLabel=!0),null==this.options.disabled&&(this.options.disabled=this.element[0].disabled||!1),this.hasTitle=!!this.element.attr("title"),this.options.label&&this.options.label!==this.originalLabel&&(this.isInput?this.element.val(this.options.label):this.element.html(this.options.label)),this._addClass("ui-button","ui-widget"),this._setOption("disabled",this.options.disabled),this._enhance(),this.element.is("a")&&this._on({keyup:function(e){e.keyCode===t.ui.keyCode.SPACE&&(e.preventDefault(),this.element[0].click?this.element[0].click():this.element.trigger("click"))}})},_enhance:function(){this.element.is("button")||this.element.attr("role","button"),this.options.icon&&(this._updateIcon("icon",this.options.icon),this._updateTooltip())},_updateTooltip:function(){this.title=this.element.attr("title"),this.options.showLabel||this.title||this.element.attr("title",this.options.label)},_updateIcon:function(e,i){var n="iconPosition"!==e,s=n?this.options.iconPosition:i,r="top"===s||"bottom"===s;this.icon?n&&this._removeClass(this.icon,null,this.options.icon):(this.icon=t("<span>"),this._addClass(this.icon,"ui-button-icon","ui-icon"),this.options.showLabel||this._addClass("ui-button-icon-only")),n&&this._addClass(this.icon,null,i),this._attachIcon(s),r?(this._addClass(this.icon,null,"ui-widget-icon-block"),this.iconSpace&&this.iconSpace.remove()):(this.iconSpace||(this.iconSpace=t("<span> </span>"),this._addClass(this.iconSpace,"ui-button-icon-space")),this._removeClass(this.icon,null,"ui-wiget-icon-block"),this._attachIconSpace(s))},_destroy:function(){this.element.removeAttr("role"),this.icon&&this.icon.remove(),this.iconSpace&&this.iconSpace.remove(),this.hasTitle||this.element.removeAttr("title")},_attachIconSpace:function(t){this.icon[/^(?:end|bottom)/.test(t)?"before":"after"](this.iconSpace)},_attachIcon:function(t){this.element[/^(?:end|bottom)/.test(t)?"append":"prepend"](this.icon)},_setOptions:function(t){var e=void 0===t.showLabel?this.options.showLabel:t.showLabel,i=void 0===t.icon?this.options.icon:t.icon;e||i||(t.showLabel=!0),this._super(t)},_setOption:function(t,e){"icon"===t&&(e?this._updateIcon(t,e):this.icon&&(this.icon.remove(),this.iconSpace&&this.iconSpace.remove())),"iconPosition"===t&&this._updateIcon(t,e),"showLabel"===t&&(this._toggleClass("ui-button-icon-only",null,!e),this._updateTooltip()),"label"===t&&(this.isInput?this.element.val(e):(this.element.html(e),this.icon&&(this._attachIcon(this.options.iconPosition),this._attachIconSpace(this.options.iconPosition)))),this._super(t,e),"disabled"===t&&(this._toggleClass(null,"ui-state-disabled",e),this.element[0].disabled=e,e&&this.element.blur())},refresh:function(){var t=this.element.is("input, button")?this.element[0].disabled:this.element.hasClass("ui-button-disabled");t!==this.options.disabled&&this._setOptions({disabled:t}),this._updateTooltip()}}),!1!==t.uiBackCompat&&(t.widget("ui.button",t.ui.button,{options:{text:!0,icons:{primary:null,secondary:null}},_create:function(){this.options.showLabel&&!this.options.text&&(this.options.showLabel=this.options.text),!this.options.showLabel&&this.options.text&&(this.options.text=this.options.showLabel),this.options.icon||!this.options.icons.primary&&!this.options.icons.secondary?this.options.icon&&(this.options.icons.primary=this.options.icon):this.options.icons.primary?this.options.icon=this.options.icons.primary:(this.options.icon=this.options.icons.secondary,this.options.iconPosition="end"),this._super()},_setOption:function(t,e){"text"!==t?("showLabel"===t&&(this.options.text=e),"icon"===t&&(this.options.icons.primary=e),"icons"===t&&(e.primary?(this._super("icon",e.primary),this._super("iconPosition","beginning")):e.secondary&&(this._super("icon",e.secondary),this._super("iconPosition","end"))),this._superApply(arguments)):this._super("showLabel",e)}}),t.fn.button=function(e){return function(){return!this.length||this.length&&"INPUT"!==this[0].tagName||this.length&&"INPUT"===this[0].tagName&&"checkbox"!==this.attr("type")&&"radio"!==this.attr("type")?e.apply(this,arguments):(t.ui.checkboxradio||t.error("Checkboxradio widget missing"),0===arguments.length?this.checkboxradio({icon:!1}):this.checkboxradio.apply(this,arguments))}}(t.fn.button),t.fn.buttonset=function(){return t.ui.controlgroup||t.error("Controlgroup widget missing"),"option"===arguments[0]&&"items"===arguments[1]&&arguments[2]?this.controlgroup.apply(this,[arguments[0],"items.button",arguments[2]]):"option"===arguments[0]&&"items"===arguments[1]?this.controlgroup.apply(this,[arguments[0],"items.button"]):("object"==typeof arguments[0]&&arguments[0].items&&(arguments[0].items={button:arguments[0].items}),this.controlgroup.apply(this,arguments))}),t.ui.button,
/*!
 * jQuery UI Datepicker 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
t.extend(t.ui,{datepicker:{version:"1.12.1"}}),t.extend(c.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(t){return f(this._defaults,t||{}),this},_attachDatepicker:function(e,i){var n,s,r;s="div"===(n=e.nodeName.toLowerCase())||"span"===n,e.id||(this.uuid+=1,e.id="dp"+this.uuid),(r=this._newInst(t(e),s)).settings=t.extend({},i||{}),"input"===n?this._connectDatepicker(e,r):s&&this._inlineDatepicker(e,r)},_newInst:function(e,i){return{id:e[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1"),input:e,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:i,dpDiv:i?d(t("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(e,i){var n=t(e);i.append=t([]),i.trigger=t([]),n.hasClass(this.markerClassName)||(this._attachments(n,i),n.addClass(this.markerClassName).on("keydown",this._doKeyDown).on("keypress",this._doKeyPress).on("keyup",this._doKeyUp),this._autoSize(i),t.data(e,"datepicker",i),i.settings.disabled&&this._disableDatepicker(e))},_attachments:function(e,i){var n,s,r,a=this._get(i,"appendText"),o=this._get(i,"isRTL");i.append&&i.append.remove(),a&&(i.append=t("<span class='"+this._appendClass+"'>"+a+"</span>"),e[o?"before":"after"](i.append)),e.off("focus",this._showDatepicker),i.trigger&&i.trigger.remove(),"focus"!==(n=this._get(i,"showOn"))&&"both"!==n||e.on("focus",this._showDatepicker),"button"!==n&&"both"!==n||(s=this._get(i,"buttonText"),r=this._get(i,"buttonImage"),i.trigger=t(this._get(i,"buttonImageOnly")?t("<img/>").addClass(this._triggerClass).attr({src:r,alt:s,title:s}):t("<button type='button'></button>").addClass(this._triggerClass).html(r?t("<img/>").attr({src:r,alt:s,title:s}):s)),e[o?"before":"after"](i.trigger),i.trigger.on("click",(function(){return t.datepicker._datepickerShowing&&t.datepicker._lastInput===e[0]?t.datepicker._hideDatepicker():t.datepicker._datepickerShowing&&t.datepicker._lastInput!==e[0]?(t.datepicker._hideDatepicker(),t.datepicker._showDatepicker(e[0])):t.datepicker._showDatepicker(e[0]),!1})))},_autoSize:function(t){if(this._get(t,"autoSize")&&!t.inline){var e,i,n,s,r=new Date(2009,11,20),a=this._get(t,"dateFormat");a.match(/[DM]/)&&(e=function(t){for(i=0,n=0,s=0;s<t.length;s++)t[s].length>i&&(i=t[s].length,n=s);return n},r.setMonth(e(this._get(t,a.match(/MM/)?"monthNames":"monthNamesShort"))),r.setDate(e(this._get(t,a.match(/DD/)?"dayNames":"dayNamesShort"))+20-r.getDay())),t.input.attr("size",this._formatDate(t,r).length)}},_inlineDatepicker:function(e,i){var n=t(e);n.hasClass(this.markerClassName)||(n.addClass(this.markerClassName).append(i.dpDiv),t.data(e,"datepicker",i),this._setDate(i,this._getDefaultDate(i),!0),this._updateDatepicker(i),this._updateAlternate(i),i.settings.disabled&&this._disableDatepicker(e),i.dpDiv.css("display","block"))},_dialogDatepicker:function(e,i,n,s,r){var a,o,l,u,h,c=this._dialogInst;return c||(this.uuid+=1,a="dp"+this.uuid,this._dialogInput=t("<input type='text' id='"+a+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.on("keydown",this._doKeyDown),t("body").append(this._dialogInput),(c=this._dialogInst=this._newInst(this._dialogInput,!1)).settings={},t.data(this._dialogInput[0],"datepicker",c)),f(c.settings,s||{}),i=i&&i.constructor===Date?this._formatDate(c,i):i,this._dialogInput.val(i),this._pos=r?r.length?r:[r.pageX,r.pageY]:null,this._pos||(o=document.documentElement.clientWidth,l=document.documentElement.clientHeight,u=document.documentElement.scrollLeft||document.body.scrollLeft,h=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[o/2-100+u,l/2-150+h]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),c.settings.onSelect=n,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),t.blockUI&&t.blockUI(this.dpDiv),t.data(this._dialogInput[0],"datepicker",c),this},_destroyDatepicker:function(e){var i,n=t(e),s=t.data(e,"datepicker");n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),t.removeData(e,"datepicker"),"input"===i?(s.append.remove(),s.trigger.remove(),n.removeClass(this.markerClassName).off("focus",this._showDatepicker).off("keydown",this._doKeyDown).off("keypress",this._doKeyPress).off("keyup",this._doKeyUp)):"div"!==i&&"span"!==i||n.removeClass(this.markerClassName).empty(),u===s&&(u=null))},_enableDatepicker:function(e){var i,n,s=t(e),r=t.data(e,"datepicker");s.hasClass(this.markerClassName)&&("input"===(i=e.nodeName.toLowerCase())?(e.disabled=!1,r.trigger.filter("button").each((function(){this.disabled=!1})).end().filter("img").css({opacity:"1.0",cursor:""})):"div"!==i&&"span"!==i||((n=s.children("."+this._inlineClass)).children().removeClass("ui-state-disabled"),n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=t.map(this._disabledInputs,(function(t){return t===e?null:t})))},_disableDatepicker:function(e){var i,n,s=t(e),r=t.data(e,"datepicker");s.hasClass(this.markerClassName)&&("input"===(i=e.nodeName.toLowerCase())?(e.disabled=!0,r.trigger.filter("button").each((function(){this.disabled=!0})).end().filter("img").css({opacity:"0.5",cursor:"default"})):"div"!==i&&"span"!==i||((n=s.children("."+this._inlineClass)).children().addClass("ui-state-disabled"),n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=t.map(this._disabledInputs,(function(t){return t===e?null:t})),this._disabledInputs[this._disabledInputs.length]=e)},_isDisabledDatepicker:function(t){if(!t)return!1;for(var e=0;e<this._disabledInputs.length;e++)if(this._disabledInputs[e]===t)return!0;return!1},_getInst:function(e){try{return t.data(e,"datepicker")}catch(t){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(e,i,n){var s,r,a,o,l=this._getInst(e);if(2===arguments.length&&"string"==typeof i)return"defaults"===i?t.extend({},t.datepicker._defaults):l?"all"===i?t.extend({},l.settings):this._get(l,i):null;s=i||{},"string"==typeof i&&((s={})[i]=n),l&&(this._curInst===l&&this._hideDatepicker(),r=this._getDateDatepicker(e,!0),a=this._getMinMaxDate(l,"min"),o=this._getMinMaxDate(l,"max"),f(l.settings,s),null!==a&&void 0!==s.dateFormat&&void 0===s.minDate&&(l.settings.minDate=this._formatDate(l,a)),null!==o&&void 0!==s.dateFormat&&void 0===s.maxDate&&(l.settings.maxDate=this._formatDate(l,o)),"disabled"in s&&(s.disabled?this._disableDatepicker(e):this._enableDatepicker(e)),this._attachments(t(e),l),this._autoSize(l),this._setDate(l,r),this._updateAlternate(l),this._updateDatepicker(l))},_changeDatepicker:function(t,e,i){this._optionDatepicker(t,e,i)},_refreshDatepicker:function(t){var e=this._getInst(t);e&&this._updateDatepicker(e)},_setDateDatepicker:function(t,e){var i=this._getInst(t);i&&(this._setDate(i,e),this._updateDatepicker(i),this._updateAlternate(i))},_getDateDatepicker:function(t,e){var i=this._getInst(t);return i&&!i.inline&&this._setDateFromField(i,e),i?this._getDate(i):null},_doKeyDown:function(e){var i,n,s,r=t.datepicker._getInst(e.target),a=!0,o=r.dpDiv.is(".ui-datepicker-rtl");if(r._keyEvent=!0,t.datepicker._datepickerShowing)switch(e.keyCode){case 9:t.datepicker._hideDatepicker(),a=!1;break;case 13:return(s=t("td."+t.datepicker._dayOverClass+":not(."+t.datepicker._currentClass+")",r.dpDiv))[0]&&t.datepicker._selectDay(e.target,r.selectedMonth,r.selectedYear,s[0]),(i=t.datepicker._get(r,"onSelect"))?(n=t.datepicker._formatDate(r),i.apply(r.input?r.input[0]:null,[n,r])):t.datepicker._hideDatepicker(),!1;case 27:t.datepicker._hideDatepicker();break;case 33:t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(r,"stepBigMonths"):-t.datepicker._get(r,"stepMonths"),"M");break;case 34:t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(r,"stepBigMonths"):+t.datepicker._get(r,"stepMonths"),"M");break;case 35:(e.ctrlKey||e.metaKey)&&t.datepicker._clearDate(e.target),a=e.ctrlKey||e.metaKey;break;case 36:(e.ctrlKey||e.metaKey)&&t.datepicker._gotoToday(e.target),a=e.ctrlKey||e.metaKey;break;case 37:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,o?1:-1,"D"),a=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(r,"stepBigMonths"):-t.datepicker._get(r,"stepMonths"),"M");break;case 38:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,-7,"D"),a=e.ctrlKey||e.metaKey;break;case 39:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,o?-1:1,"D"),a=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(r,"stepBigMonths"):+t.datepicker._get(r,"stepMonths"),"M");break;case 40:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,7,"D"),a=e.ctrlKey||e.metaKey;break;default:a=!1}else 36===e.keyCode&&e.ctrlKey?t.datepicker._showDatepicker(this):a=!1;a&&(e.preventDefault(),e.stopPropagation())},_doKeyPress:function(e){var i,n,s=t.datepicker._getInst(e.target);if(t.datepicker._get(s,"constrainInput"))return i=t.datepicker._possibleChars(t.datepicker._get(s,"dateFormat")),n=String.fromCharCode(null==e.charCode?e.keyCode:e.charCode),e.ctrlKey||e.metaKey||n<" "||!i||i.indexOf(n)>-1},_doKeyUp:function(e){var i=t.datepicker._getInst(e.target);if(i.input.val()!==i.lastVal)try{t.datepicker.parseDate(t.datepicker._get(i,"dateFormat"),i.input?i.input.val():null,t.datepicker._getFormatConfig(i))&&(t.datepicker._setDateFromField(i),t.datepicker._updateAlternate(i),t.datepicker._updateDatepicker(i))}catch(t){}return!0},_showDatepicker:function(e){var i,n,s,r,a,o,l;"input"!==(e=e.target||e).nodeName.toLowerCase()&&(e=t("input",e.parentNode)[0]),t.datepicker._isDisabledDatepicker(e)||t.datepicker._lastInput===e||(i=t.datepicker._getInst(e),t.datepicker._curInst&&t.datepicker._curInst!==i&&(t.datepicker._curInst.dpDiv.stop(!0,!0),i&&t.datepicker._datepickerShowing&&t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])),!1!==(s=(n=t.datepicker._get(i,"beforeShow"))?n.apply(e,[e,i]):{})&&(f(i.settings,s),i.lastVal=null,t.datepicker._lastInput=e,t.datepicker._setDateFromField(i),t.datepicker._inDialog&&(e.value=""),t.datepicker._pos||(t.datepicker._pos=t.datepicker._findPos(e),t.datepicker._pos[1]+=e.offsetHeight),r=!1,t(e).parents().each((function(){return!(r|="fixed"===t(this).css("position"))})),a={left:t.datepicker._pos[0],top:t.datepicker._pos[1]},t.datepicker._pos=null,i.dpDiv.empty(),i.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),t.datepicker._updateDatepicker(i),a=t.datepicker._checkOffset(i,a,r),i.dpDiv.css({position:t.datepicker._inDialog&&t.blockUI?"static":r?"fixed":"absolute",display:"none",left:a.left+"px",top:a.top+"px"}),i.inline||(o=t.datepicker._get(i,"showAnim"),l=t.datepicker._get(i,"duration"),i.dpDiv.css("z-index",function(t){for(var e,i;t.length&&t[0]!==document;){if(("absolute"===(e=t.css("position"))||"relative"===e||"fixed"===e)&&(i=parseInt(t.css("zIndex"),10),!isNaN(i)&&0!==i))return i;t=t.parent()}return 0}(t(e))+1),t.datepicker._datepickerShowing=!0,t.effects&&t.effects.effect[o]?i.dpDiv.show(o,t.datepicker._get(i,"showOptions"),l):i.dpDiv[o||"show"](o?l:null),t.datepicker._shouldFocusInput(i)&&i.input.trigger("focus"),t.datepicker._curInst=i)))},_updateDatepicker:function(e){this.maxRows=4,u=e,e.dpDiv.empty().append(this._generateHTML(e)),this._attachHandlers(e);var i,n=this._getNumberOfMonths(e),s=n[1],r=e.dpDiv.find("."+this._dayOverClass+" a");r.length>0&&p.apply(r.get(0)),e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),s>1&&e.dpDiv.addClass("ui-datepicker-multi-"+s).css("width",17*s+"em"),e.dpDiv[(1!==n[0]||1!==n[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),e.dpDiv[(this._get(e,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),e===t.datepicker._curInst&&t.datepicker._datepickerShowing&&t.datepicker._shouldFocusInput(e)&&e.input.trigger("focus"),e.yearshtml&&(i=e.yearshtml,setTimeout((function(){i===e.yearshtml&&e.yearshtml&&e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml),i=e.yearshtml=null}),0))},_shouldFocusInput:function(t){return t.input&&t.input.is(":visible")&&!t.input.is(":disabled")&&!t.input.is(":focus")},_checkOffset:function(e,i,n){var s=e.dpDiv.outerWidth(),r=e.dpDiv.outerHeight(),a=e.input?e.input.outerWidth():0,o=e.input?e.input.outerHeight():0,l=document.documentElement.clientWidth+(n?0:t(document).scrollLeft()),u=document.documentElement.clientHeight+(n?0:t(document).scrollTop());return i.left-=this._get(e,"isRTL")?s-a:0,i.left-=n&&i.left===e.input.offset().left?t(document).scrollLeft():0,i.top-=n&&i.top===e.input.offset().top+o?t(document).scrollTop():0,i.left-=Math.min(i.left,i.left+s>l&&l>s?Math.abs(i.left+s-l):0),i.top-=Math.min(i.top,i.top+r>u&&u>r?Math.abs(r+o):0),i},_findPos:function(e){for(var i,n=this._getInst(e),s=this._get(n,"isRTL");e&&("hidden"===e.type||1!==e.nodeType||t.expr.filters.hidden(e));)e=e[s?"previousSibling":"nextSibling"];return[(i=t(e).offset()).left,i.top]},_hideDatepicker:function(e){var i,n,s,r,a=this._curInst;!a||e&&a!==t.data(e,"datepicker")||this._datepickerShowing&&(i=this._get(a,"showAnim"),n=this._get(a,"duration"),s=function(){t.datepicker._tidyDialog(a)},t.effects&&(t.effects.effect[i]||t.effects[i])?a.dpDiv.hide(i,t.datepicker._get(a,"showOptions"),n,s):a.dpDiv["slideDown"===i?"slideUp":"fadeIn"===i?"fadeOut":"hide"](i?n:null,s),i||s(),this._datepickerShowing=!1,(r=this._get(a,"onClose"))&&r.apply(a.input?a.input[0]:null,[a.input?a.input.val():"",a]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),t.blockUI&&(t.unblockUI(),t("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(t){t.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar")},_checkExternalClick:function(e){if(t.datepicker._curInst){var i=t(e.target),n=t.datepicker._getInst(i[0]);(i[0].id===t.datepicker._mainDivId||0!==i.parents("#"+t.datepicker._mainDivId).length||i.hasClass(t.datepicker.markerClassName)||i.closest("."+t.datepicker._triggerClass).length||!t.datepicker._datepickerShowing||t.datepicker._inDialog&&t.blockUI)&&(!i.hasClass(t.datepicker.markerClassName)||t.datepicker._curInst===n)||t.datepicker._hideDatepicker()}},_adjustDate:function(e,i,n){var s=t(e),r=this._getInst(s[0]);this._isDisabledDatepicker(s[0])||(this._adjustInstDate(r,i+("M"===n?this._get(r,"showCurrentAtPos"):0),n),this._updateDatepicker(r))},_gotoToday:function(e){var i,n=t(e),s=this._getInst(n[0]);this._get(s,"gotoCurrent")&&s.currentDay?(s.selectedDay=s.currentDay,s.drawMonth=s.selectedMonth=s.currentMonth,s.drawYear=s.selectedYear=s.currentYear):(i=new Date,s.selectedDay=i.getDate(),s.drawMonth=s.selectedMonth=i.getMonth(),s.drawYear=s.selectedYear=i.getFullYear()),this._notifyChange(s),this._adjustDate(n)},_selectMonthYear:function(e,i,n){var s=t(e),r=this._getInst(s[0]);r["selected"+("M"===n?"Month":"Year")]=r["draw"+("M"===n?"Month":"Year")]=parseInt(i.options[i.selectedIndex].value,10),this._notifyChange(r),this._adjustDate(s)},_selectDay:function(e,i,n,s){var r,a=t(e);t(s).hasClass(this._unselectableClass)||this._isDisabledDatepicker(a[0])||((r=this._getInst(a[0])).selectedDay=r.currentDay=t("a",s).html(),r.selectedMonth=r.currentMonth=i,r.selectedYear=r.currentYear=n,this._selectDate(e,this._formatDate(r,r.currentDay,r.currentMonth,r.currentYear)))},_clearDate:function(e){var i=t(e);this._selectDate(i,"")},_selectDate:function(e,i){var n,s=t(e),r=this._getInst(s[0]);i=null!=i?i:this._formatDate(r),r.input&&r.input.val(i),this._updateAlternate(r),(n=this._get(r,"onSelect"))?n.apply(r.input?r.input[0]:null,[i,r]):r.input&&r.input.trigger("change"),r.inline?this._updateDatepicker(r):(this._hideDatepicker(),this._lastInput=r.input[0],"object"!=typeof r.input[0]&&r.input.trigger("focus"),this._lastInput=null)},_updateAlternate:function(e){var i,n,s,r=this._get(e,"altField");r&&(i=this._get(e,"altFormat")||this._get(e,"dateFormat"),n=this._getDate(e),s=this.formatDate(i,n,this._getFormatConfig(e)),t(r).val(s))},noWeekends:function(t){var e=t.getDay();return[e>0&&e<6,""]},iso8601Week:function(t){var e,i=new Date(t.getTime());return i.setDate(i.getDate()+4-(i.getDay()||7)),e=i.getTime(),i.setMonth(0),i.setDate(1),Math.floor(Math.round((e-i)/864e5)/7)+1},parseDate:function(e,i,n){if(null==e||null==i)throw"Invalid arguments";if(""===(i="object"==typeof i?i.toString():i+""))return null;var s,r,a,o,l=0,u=(n?n.shortYearCutoff:null)||this._defaults.shortYearCutoff,h="string"!=typeof u?u:(new Date).getFullYear()%100+parseInt(u,10),c=(n?n.dayNamesShort:null)||this._defaults.dayNamesShort,d=(n?n.dayNames:null)||this._defaults.dayNames,p=(n?n.monthNamesShort:null)||this._defaults.monthNamesShort,f=(n?n.monthNames:null)||this._defaults.monthNames,g=-1,m=-1,v=-1,b=-1,y=!1,_=function(t){var i=s+1<e.length&&e.charAt(s+1)===t;return i&&s++,i},x=function(t){var e=_(t),n="@"===t?14:"!"===t?20:"y"===t&&e?4:"o"===t?3:2,s=new RegExp("^\\d{"+("y"===t?n:1)+","+n+"}"),r=i.substring(l).match(s);if(!r)throw"Missing number at position "+l;return l+=r[0].length,parseInt(r[0],10)},w=function(e,n,s){var r=-1,a=t.map(_(e)?s:n,(function(t,e){return[[e,t]]})).sort((function(t,e){return-(t[1].length-e[1].length)}));if(t.each(a,(function(t,e){var n=e[1];if(i.substr(l,n.length).toLowerCase()===n.toLowerCase())return r=e[0],l+=n.length,!1})),-1!==r)return r+1;throw"Unknown name at position "+l},S=function(){if(i.charAt(l)!==e.charAt(s))throw"Unexpected literal at position "+l;l++};for(s=0;s<e.length;s++)if(y)"'"!==e.charAt(s)||_("'")?S():y=!1;else switch(e.charAt(s)){case"d":v=x("d");break;case"D":w("D",c,d);break;case"o":b=x("o");break;case"m":m=x("m");break;case"M":m=w("M",p,f);break;case"y":g=x("y");break;case"@":g=(o=new Date(x("@"))).getFullYear(),m=o.getMonth()+1,v=o.getDate();break;case"!":g=(o=new Date((x("!")-this._ticksTo1970)/1e4)).getFullYear(),m=o.getMonth()+1,v=o.getDate();break;case"'":_("'")?S():y=!0;break;default:S()}if(l<i.length&&(a=i.substr(l),!/^\s+/.test(a)))throw"Extra/unparsed characters found in date: "+a;if(-1===g?g=(new Date).getFullYear():g<100&&(g+=(new Date).getFullYear()-(new Date).getFullYear()%100+(g<=h?0:-100)),b>-1)for(m=1,v=b;!(v<=(r=this._getDaysInMonth(g,m-1)));)m++,v-=r;if((o=this._daylightSavingAdjust(new Date(g,m-1,v))).getFullYear()!==g||o.getMonth()+1!==m||o.getDate()!==v)throw"Invalid date";return o},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925))*60*60*1e7,formatDate:function(t,e,i){if(!e)return"";var n,s=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,r=(i?i.dayNames:null)||this._defaults.dayNames,a=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,o=(i?i.monthNames:null)||this._defaults.monthNames,l=function(e){var i=n+1<t.length&&t.charAt(n+1)===e;return i&&n++,i},u=function(t,e,i){var n=""+e;if(l(t))for(;n.length<i;)n="0"+n;return n},h=function(t,e,i,n){return l(t)?n[e]:i[e]},c="",d=!1;if(e)for(n=0;n<t.length;n++)if(d)"'"!==t.charAt(n)||l("'")?c+=t.charAt(n):d=!1;else switch(t.charAt(n)){case"d":c+=u("d",e.getDate(),2);break;case"D":c+=h("D",e.getDay(),s,r);break;case"o":c+=u("o",Math.round((new Date(e.getFullYear(),e.getMonth(),e.getDate()).getTime()-new Date(e.getFullYear(),0,0).getTime())/864e5),3);break;case"m":c+=u("m",e.getMonth()+1,2);break;case"M":c+=h("M",e.getMonth(),a,o);break;case"y":c+=l("y")?e.getFullYear():(e.getFullYear()%100<10?"0":"")+e.getFullYear()%100;break;case"@":c+=e.getTime();break;case"!":c+=1e4*e.getTime()+this._ticksTo1970;break;case"'":l("'")?c+="'":d=!0;break;default:c+=t.charAt(n)}return c},_possibleChars:function(t){var e,i="",n=!1,s=function(i){var n=e+1<t.length&&t.charAt(e+1)===i;return n&&e++,n};for(e=0;e<t.length;e++)if(n)"'"!==t.charAt(e)||s("'")?i+=t.charAt(e):n=!1;else switch(t.charAt(e)){case"d":case"m":case"y":case"@":i+="0123456789";break;case"D":case"M":return null;case"'":s("'")?i+="'":n=!0;break;default:i+=t.charAt(e)}return i},_get:function(t,e){return void 0!==t.settings[e]?t.settings[e]:this._defaults[e]},_setDateFromField:function(t,e){if(t.input.val()!==t.lastVal){var i=this._get(t,"dateFormat"),n=t.lastVal=t.input?t.input.val():null,s=this._getDefaultDate(t),r=s,a=this._getFormatConfig(t);try{r=this.parseDate(i,n,a)||s}catch(t){n=e?"":n}t.selectedDay=r.getDate(),t.drawMonth=t.selectedMonth=r.getMonth(),t.drawYear=t.selectedYear=r.getFullYear(),t.currentDay=n?r.getDate():0,t.currentMonth=n?r.getMonth():0,t.currentYear=n?r.getFullYear():0,this._adjustInstDate(t)}},_getDefaultDate:function(t){return this._restrictMinMax(t,this._determineDate(t,this._get(t,"defaultDate"),new Date))},_determineDate:function(e,i,n){var s=null==i||""===i?n:"string"==typeof i?function(i){try{return t.datepicker.parseDate(t.datepicker._get(e,"dateFormat"),i,t.datepicker._getFormatConfig(e))}catch(t){}for(var n=(i.toLowerCase().match(/^c/)?t.datepicker._getDate(e):null)||new Date,s=n.getFullYear(),r=n.getMonth(),a=n.getDate(),o=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,l=o.exec(i);l;){switch(l[2]||"d"){case"d":case"D":a+=parseInt(l[1],10);break;case"w":case"W":a+=7*parseInt(l[1],10);break;case"m":case"M":r+=parseInt(l[1],10),a=Math.min(a,t.datepicker._getDaysInMonth(s,r));break;case"y":case"Y":s+=parseInt(l[1],10),a=Math.min(a,t.datepicker._getDaysInMonth(s,r))}l=o.exec(i)}return new Date(s,r,a)}(i):"number"==typeof i?isNaN(i)?n:function(t){var e=new Date;return e.setDate(e.getDate()+t),e}(i):new Date(i.getTime());return(s=s&&"Invalid Date"===s.toString()?n:s)&&(s.setHours(0),s.setMinutes(0),s.setSeconds(0),s.setMilliseconds(0)),this._daylightSavingAdjust(s)},_daylightSavingAdjust:function(t){return t?(t.setHours(t.getHours()>12?t.getHours()+2:0),t):null},_setDate:function(t,e,i){var n=!e,s=t.selectedMonth,r=t.selectedYear,a=this._restrictMinMax(t,this._determineDate(t,e,new Date));t.selectedDay=t.currentDay=a.getDate(),t.drawMonth=t.selectedMonth=t.currentMonth=a.getMonth(),t.drawYear=t.selectedYear=t.currentYear=a.getFullYear(),s===t.selectedMonth&&r===t.selectedYear||i||this._notifyChange(t),this._adjustInstDate(t),t.input&&t.input.val(n?"":this._formatDate(t))},_getDate:function(t){return!t.currentYear||t.input&&""===t.input.val()?null:this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay))},_attachHandlers:function(e){var i=this._get(e,"stepMonths"),n="#"+e.id.replace(/\\\\/g,"\\");e.dpDiv.find("[data-handler]").map((function(){var e={prev:function(){t.datepicker._adjustDate(n,-i,"M")},next:function(){t.datepicker._adjustDate(n,+i,"M")},hide:function(){t.datepicker._hideDatepicker()},today:function(){t.datepicker._gotoToday(n)},selectDay:function(){return t.datepicker._selectDay(n,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return t.datepicker._selectMonthYear(n,this,"M"),!1},selectYear:function(){return t.datepicker._selectMonthYear(n,this,"Y"),!1}};t(this).on(this.getAttribute("data-event"),e[this.getAttribute("data-handler")])}))},_generateHTML:function(t){var e,i,n,s,r,a,o,l,u,h,c,d,p,f,g,m,v,b,y,_,x,w,S,C,k,D,T,A,M,I,E,P,N,H,z,L,O,q,G,R=new Date,F=this._daylightSavingAdjust(new Date(R.getFullYear(),R.getMonth(),R.getDate())),B=this._get(t,"isRTL"),W=this._get(t,"showButtonPanel"),j=this._get(t,"hideIfNoPrevNext"),$=this._get(t,"navigationAsDateFormat"),U=this._getNumberOfMonths(t),V=this._get(t,"showCurrentAtPos"),Y=this._get(t,"stepMonths"),X=1!==U[0]||1!==U[1],K=this._daylightSavingAdjust(t.currentDay?new Date(t.currentYear,t.currentMonth,t.currentDay):new Date(9999,9,9)),Q=this._getMinMaxDate(t,"min"),J=this._getMinMaxDate(t,"max"),Z=t.drawMonth-V,tt=t.drawYear;if(Z<0&&(Z+=12,tt--),J)for(e=this._daylightSavingAdjust(new Date(J.getFullYear(),J.getMonth()-U[0]*U[1]+1,J.getDate())),e=Q&&e<Q?Q:e;this._daylightSavingAdjust(new Date(tt,Z,1))>e;)--Z<0&&(Z=11,tt--);for(t.drawMonth=Z,t.drawYear=tt,i=this._get(t,"prevText"),i=$?this.formatDate(i,this._daylightSavingAdjust(new Date(tt,Z-Y,1)),this._getFormatConfig(t)):i,n=this._canAdjustMonth(t,-1,tt,Z)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(B?"e":"w")+"'>"+i+"</span></a>":j?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(B?"e":"w")+"'>"+i+"</span></a>",s=this._get(t,"nextText"),s=$?this.formatDate(s,this._daylightSavingAdjust(new Date(tt,Z+Y,1)),this._getFormatConfig(t)):s,r=this._canAdjustMonth(t,1,tt,Z)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='"+s+"'><span class='ui-icon ui-icon-circle-triangle-"+(B?"w":"e")+"'>"+s+"</span></a>":j?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+s+"'><span class='ui-icon ui-icon-circle-triangle-"+(B?"w":"e")+"'>"+s+"</span></a>",a=this._get(t,"currentText"),o=this._get(t,"gotoCurrent")&&t.currentDay?K:F,a=$?this.formatDate(a,o,this._getFormatConfig(t)):a,l=t.inline?"":"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(t,"closeText")+"</button>",u=W?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(B?l:"")+(this._isInRange(t,o)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>"+a+"</button>":"")+(B?"":l)+"</div>":"",h=parseInt(this._get(t,"firstDay"),10),h=isNaN(h)?0:h,c=this._get(t,"showWeek"),d=this._get(t,"dayNames"),p=this._get(t,"dayNamesMin"),f=this._get(t,"monthNames"),g=this._get(t,"monthNamesShort"),m=this._get(t,"beforeShowDay"),v=this._get(t,"showOtherMonths"),b=this._get(t,"selectOtherMonths"),y=this._getDefaultDate(t),_="",w=0;w<U[0];w++){for(S="",this.maxRows=4,C=0;C<U[1];C++){if(k=this._daylightSavingAdjust(new Date(tt,Z,t.selectedDay)),D=" ui-corner-all",T="",X){if(T+="<div class='ui-datepicker-group",U[1]>1)switch(C){case 0:T+=" ui-datepicker-group-first",D=" ui-corner-"+(B?"right":"left");break;case U[1]-1:T+=" ui-datepicker-group-last",D=" ui-corner-"+(B?"left":"right");break;default:T+=" ui-datepicker-group-middle",D=""}T+="'>"}for(T+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+D+"'>"+(/all|left/.test(D)&&0===w?B?r:n:"")+(/all|right/.test(D)&&0===w?B?n:r:"")+this._generateMonthYearHeader(t,Z,tt,Q,J,w>0||C>0,f,g)+"</div><table class='ui-datepicker-calendar'><thead><tr>",A=c?"<th class='ui-datepicker-week-col'>"+this._get(t,"weekHeader")+"</th>":"",x=0;x<7;x++)A+="<th scope='col'"+((x+h+6)%7>=5?" class='ui-datepicker-week-end'":"")+"><span title='"+d[M=(x+h)%7]+"'>"+p[M]+"</span></th>";for(T+=A+"</tr></thead><tbody>",I=this._getDaysInMonth(tt,Z),tt===t.selectedYear&&Z===t.selectedMonth&&(t.selectedDay=Math.min(t.selectedDay,I)),E=(this._getFirstDayOfMonth(tt,Z)-h+7)%7,P=Math.ceil((E+I)/7),N=X&&this.maxRows>P?this.maxRows:P,this.maxRows=N,H=this._daylightSavingAdjust(new Date(tt,Z,1-E)),z=0;z<N;z++){for(T+="<tr>",L=c?"<td class='ui-datepicker-week-col'>"+this._get(t,"calculateWeek")(H)+"</td>":"",x=0;x<7;x++)O=m?m.apply(t.input?t.input[0]:null,[H]):[!0,""],G=(q=H.getMonth()!==Z)&&!b||!O[0]||Q&&H<Q||J&&H>J,L+="<td class='"+((x+h+6)%7>=5?" ui-datepicker-week-end":"")+(q?" ui-datepicker-other-month":"")+(H.getTime()===k.getTime()&&Z===t.selectedMonth&&t._keyEvent||y.getTime()===H.getTime()&&y.getTime()===k.getTime()?" "+this._dayOverClass:"")+(G?" "+this._unselectableClass+" ui-state-disabled":"")+(q&&!v?"":" "+O[1]+(H.getTime()===K.getTime()?" "+this._currentClass:"")+(H.getTime()===F.getTime()?" ui-datepicker-today":""))+"'"+(q&&!v||!O[2]?"":" title='"+O[2].replace(/'/g,"&#39;")+"'")+(G?"":" data-handler='selectDay' data-event='click' data-month='"+H.getMonth()+"' data-year='"+H.getFullYear()+"'")+">"+(q&&!v?"&#xa0;":G?"<span class='ui-state-default'>"+H.getDate()+"</span>":"<a class='ui-state-default"+(H.getTime()===F.getTime()?" ui-state-highlight":"")+(H.getTime()===K.getTime()?" ui-state-active":"")+(q?" ui-priority-secondary":"")+"' href='#'>"+H.getDate()+"</a>")+"</td>",H.setDate(H.getDate()+1),H=this._daylightSavingAdjust(H);T+=L+"</tr>"}++Z>11&&(Z=0,tt++),S+=T+="</tbody></table>"+(X?"</div>"+(U[0]>0&&C===U[1]-1?"<div class='ui-datepicker-row-break'></div>":""):"")}_+=S}return _+=u,t._keyEvent=!1,_},_generateMonthYearHeader:function(t,e,i,n,s,r,a,o){var l,u,h,c,d,p,f,g,m=this._get(t,"changeMonth"),v=this._get(t,"changeYear"),b=this._get(t,"showMonthAfterYear"),y="<div class='ui-datepicker-title'>",_="";if(r||!m)_+="<span class='ui-datepicker-month'>"+a[e]+"</span>";else{for(l=n&&n.getFullYear()===i,u=s&&s.getFullYear()===i,_+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>",h=0;h<12;h++)(!l||h>=n.getMonth())&&(!u||h<=s.getMonth())&&(_+="<option value='"+h+"'"+(h===e?" selected='selected'":"")+">"+o[h]+"</option>");_+="</select>"}if(b||(y+=_+(!r&&m&&v?"":"&#xa0;")),!t.yearshtml)if(t.yearshtml="",r||!v)y+="<span class='ui-datepicker-year'>"+i+"</span>";else{for(c=this._get(t,"yearRange").split(":"),d=(new Date).getFullYear(),f=(p=function(t){var e=t.match(/c[+\-].*/)?i+parseInt(t.substring(1),10):t.match(/[+\-].*/)?d+parseInt(t,10):parseInt(t,10);return isNaN(e)?d:e})(c[0]),g=Math.max(f,p(c[1]||"")),f=n?Math.max(f,n.getFullYear()):f,g=s?Math.min(g,s.getFullYear()):g,t.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";f<=g;f++)t.yearshtml+="<option value='"+f+"'"+(f===i?" selected='selected'":"")+">"+f+"</option>";t.yearshtml+="</select>",y+=t.yearshtml,t.yearshtml=null}return y+=this._get(t,"yearSuffix"),b&&(y+=(!r&&m&&v?"":"&#xa0;")+_),y+="</div>"},_adjustInstDate:function(t,e,i){var n=t.selectedYear+("Y"===i?e:0),s=t.selectedMonth+("M"===i?e:0),r=Math.min(t.selectedDay,this._getDaysInMonth(n,s))+("D"===i?e:0),a=this._restrictMinMax(t,this._daylightSavingAdjust(new Date(n,s,r)));t.selectedDay=a.getDate(),t.drawMonth=t.selectedMonth=a.getMonth(),t.drawYear=t.selectedYear=a.getFullYear(),"M"!==i&&"Y"!==i||this._notifyChange(t)},_restrictMinMax:function(t,e){var i=this._getMinMaxDate(t,"min"),n=this._getMinMaxDate(t,"max"),s=i&&e<i?i:e;return n&&s>n?n:s},_notifyChange:function(t){var e=this._get(t,"onChangeMonthYear");e&&e.apply(t.input?t.input[0]:null,[t.selectedYear,t.selectedMonth+1,t])},_getNumberOfMonths:function(t){var e=this._get(t,"numberOfMonths");return null==e?[1,1]:"number"==typeof e?[1,e]:e},_getMinMaxDate:function(t,e){return this._determineDate(t,this._get(t,e+"Date"),null)},_getDaysInMonth:function(t,e){return 32-this._daylightSavingAdjust(new Date(t,e,32)).getDate()},_getFirstDayOfMonth:function(t,e){return new Date(t,e,1).getDay()},_canAdjustMonth:function(t,e,i,n){var s=this._getNumberOfMonths(t),r=this._daylightSavingAdjust(new Date(i,n+(e<0?e:s[0]*s[1]),1));return e<0&&r.setDate(this._getDaysInMonth(r.getFullYear(),r.getMonth())),this._isInRange(t,r)},_isInRange:function(t,e){var i,n,s=this._getMinMaxDate(t,"min"),r=this._getMinMaxDate(t,"max"),a=null,o=null,l=this._get(t,"yearRange");return l&&(i=l.split(":"),n=(new Date).getFullYear(),a=parseInt(i[0],10),o=parseInt(i[1],10),i[0].match(/[+\-].*/)&&(a+=n),i[1].match(/[+\-].*/)&&(o+=n)),(!s||e.getTime()>=s.getTime())&&(!r||e.getTime()<=r.getTime())&&(!a||e.getFullYear()>=a)&&(!o||e.getFullYear()<=o)},_getFormatConfig:function(t){var e=this._get(t,"shortYearCutoff");return{shortYearCutoff:e="string"!=typeof e?e:(new Date).getFullYear()%100+parseInt(e,10),dayNamesShort:this._get(t,"dayNamesShort"),dayNames:this._get(t,"dayNames"),monthNamesShort:this._get(t,"monthNamesShort"),monthNames:this._get(t,"monthNames")}},_formatDate:function(t,e,i,n){e||(t.currentDay=t.selectedDay,t.currentMonth=t.selectedMonth,t.currentYear=t.selectedYear);var s=e?"object"==typeof e?e:this._daylightSavingAdjust(new Date(n,i,e)):this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return this.formatDate(this._get(t,"dateFormat"),s,this._getFormatConfig(t))}}),t.fn.datepicker=function(e){if(!this.length)return this;t.datepicker.initialized||(t(document).on("mousedown",t.datepicker._checkExternalClick),t.datepicker.initialized=!0),0===t("#"+t.datepicker._mainDivId).length&&t("body").append(t.datepicker.dpDiv);var i=Array.prototype.slice.call(arguments,1);return"string"!=typeof e||"isDisabled"!==e&&"getDate"!==e&&"widget"!==e?"option"===e&&2===arguments.length&&"string"==typeof arguments[1]?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i)):this.each((function(){"string"==typeof e?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this].concat(i)):t.datepicker._attachDatepicker(this,e)})):t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i))},t.datepicker=new c,t.datepicker.initialized=!1,t.datepicker.uuid=(new Date).getTime(),t.datepicker.version="1.12.1",t.datepicker,t.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());var g=!1;t(document).on("mouseup",(function(){g=!1})),t.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var e=this;this.element.on("mousedown."+this.widgetName,(function(t){return e._mouseDown(t)})).on("click."+this.widgetName,(function(i){if(!0===t.data(i.target,e.widgetName+".preventClickEvent"))return t.removeData(i.target,e.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1})),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(e){if(!g){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(e),this._mouseDownEvent=e;var i=this,n=1===e.which,s=!("string"!=typeof this.options.cancel||!e.target.nodeName)&&t(e.target).closest(this.options.cancel).length;return!(n&&!s&&this._mouseCapture(e)&&(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout((function(){i.mouseDelayMet=!0}),this.options.delay)),this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(e),!this._mouseStarted)?(e.preventDefault(),0):(!0===t.data(e.target,this.widgetName+".preventClickEvent")&&t.removeData(e.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(t){return i._mouseMove(t)},this._mouseUpDelegate=function(t){return i._mouseUp(t)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),e.preventDefault(),g=!0,0)))}},_mouseMove:function(e){if(this._mouseMoved){if(t.ui.ie&&(!document.documentMode||document.documentMode<9)&&!e.button)return this._mouseUp(e);if(!e.which)if(e.originalEvent.altKey||e.originalEvent.ctrlKey||e.originalEvent.metaKey||e.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if(!this.ignoreMissingWhich)return this._mouseUp(e)}return(e.which||e.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(this._mouseDownEvent,e),this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&t.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,g=!1,e.preventDefault()},_mouseDistanceMet:function(t){return Math.max(Math.abs(this._mouseDownEvent.pageX-t.pageX),Math.abs(this._mouseDownEvent.pageY-t.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),t.ui.plugin={add:function(e,i,n){var s,r=t.ui[e].prototype;for(s in n)r.plugins[s]=r.plugins[s]||[],r.plugins[s].push([i,n[s]])},call:function(t,e,i,n){var s,r=t.plugins[e];if(r&&(n||t.element[0].parentNode&&11!==t.element[0].parentNode.nodeType))for(s=0;s<r.length;s++)t.options[r[s][0]]&&r[s][1].apply(t.element,i)}},t.ui.safeBlur=function(e){e&&"body"!==e.nodeName.toLowerCase()&&t(e).trigger("blur")},
/*!
 * jQuery UI Draggable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
t.widget("ui.draggable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this._addClass("ui-draggable"),this._setHandleClassName(),this._mouseInit()},_setOption:function(t,e){this._super(t,e),"handle"===t&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){(this.helper||this.element).is(".ui-draggable-dragging")?this.destroyOnClear=!0:(this._removeHandleClassName(),this._mouseDestroy())},_mouseCapture:function(e){var i=this.options;return!(this.helper||i.disabled||t(e.target).closest(".ui-resizable-handle").length>0||(this.handle=this._getHandle(e),!this.handle||(this._blurActiveElement(e),this._blockFrames(!0===i.iframeFix?"iframe":i.iframeFix),0)))},_blockFrames:function(e){this.iframeBlocks=this.document.find(e).map((function(){var e=t(this);return t("<div>").css("position","absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0]}))},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(e){var i=t.ui.safeActiveElement(this.document[0]);t(e.target).closest(i).length||t.ui.safeBlur(i)},_mouseStart:function(e){var i=this.options;return this.helper=this._createHelper(e),this._addClass(this.helper,"ui-draggable-dragging"),this._cacheHelperProportions(),t.ui.ddmanager&&(t.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=this.helper.parents().filter((function(){return"fixed"===t(this).css("position")})).length>0,this.positionAbs=this.element.offset(),this._refreshOffsets(e),this.originalPosition=this.position=this._generatePosition(e,!1),this.originalPageX=e.pageX,this.originalPageY=e.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this._setContainment(),!1===this._trigger("start",e)?(this._clear(),!1):(this._cacheHelperProportions(),t.ui.ddmanager&&!i.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),t.ui.ddmanager&&t.ui.ddmanager.dragStart(this,e),!0)},_refreshOffsets:function(t){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:t.pageX-this.offset.left,top:t.pageY-this.offset.top}},_mouseDrag:function(e,i){if(this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e,!0),this.positionAbs=this._convertPositionTo("absolute"),!i){var n=this._uiHash();if(!1===this._trigger("drag",e,n))return this._mouseUp(new t.Event("mouseup",e)),!1;this.position=n.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var i=this,n=!1;return t.ui.ddmanager&&!this.options.dropBehaviour&&(n=t.ui.ddmanager.drop(this,e)),this.dropped&&(n=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!n||"valid"===this.options.revert&&n||!0===this.options.revert||t.isFunction(this.options.revert)&&this.options.revert.call(this.element,n)?t(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),(function(){!1!==i._trigger("stop",e)&&i._clear()})):!1!==this._trigger("stop",e)&&this._clear(),!1},_mouseUp:function(e){return this._unblockFrames(),t.ui.ddmanager&&t.ui.ddmanager.dragStop(this,e),this.handleElement.is(e.target)&&this.element.trigger("focus"),t.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp(new t.Event("mouseup",{target:this.element[0]})):this._clear(),this},_getHandle:function(e){return!this.options.handle||!!t(e.target).closest(this.element.find(this.options.handle)).length},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this._addClass(this.handleElement,"ui-draggable-handle")},_removeHandleClassName:function(){this._removeClass(this.handleElement,"ui-draggable-handle")},_createHelper:function(e){var i=this.options,n=t.isFunction(i.helper),s=n?t(i.helper.apply(this.element[0],[e])):"clone"===i.helper?this.element.clone().removeAttr("id"):this.element;return s.parents("body").length||s.appendTo("parent"===i.appendTo?this.element[0].parentNode:i.appendTo),n&&s[0]===this.element[0]&&this._setPositionRelative(),s[0]===this.element[0]||/(fixed|absolute)/.test(s.css("position"))||s.css("position","absolute"),s},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_isRootNode:function(t){return/(html|body)/i.test(t.tagName)||t===this.document[0]},_getParentOffset:function(){var e=this.offsetParent.offset(),i=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==i&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),this._isRootNode(this.offsetParent[0])&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"!==this.cssPosition)return{top:0,left:0};var t=this.element.position(),e=this._isRootNode(this.scrollParent[0]);return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+(e?0:this.scrollParent.scrollTop()),left:t.left-(parseInt(this.helper.css("left"),10)||0)+(e?0:this.scrollParent.scrollLeft())}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,n,s=this.options,r=this.document[0];this.relativeContainer=null,s.containment?"window"!==s.containment?"document"!==s.containment?s.containment.constructor!==Array?("parent"===s.containment&&(s.containment=this.helper[0].parentNode),(n=(i=t(s.containment))[0])&&(e=/(scroll|auto)/.test(i.css("overflow")),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(e?Math.max(n.scrollWidth,n.offsetWidth):n.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(n.scrollHeight,n.offsetHeight):n.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=i)):this.containment=s.containment:this.containment=[0,0,t(r).width()-this.helperProportions.width-this.margins.left,(t(r).height()||r.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=[t(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,t(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,t(window).scrollLeft()+t(window).width()-this.helperProportions.width-this.margins.left,t(window).scrollTop()+(t(window).height()||r.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=null},_convertPositionTo:function(t,e){e||(e=this.position);var i="absolute"===t?1:-1,n=this._isRootNode(this.scrollParent[0]);return{top:e.top+this.offset.relative.top*i+this.offset.parent.top*i-("fixed"===this.cssPosition?-this.offset.scroll.top:n?0:this.offset.scroll.top)*i,left:e.left+this.offset.relative.left*i+this.offset.parent.left*i-("fixed"===this.cssPosition?-this.offset.scroll.left:n?0:this.offset.scroll.left)*i}},_generatePosition:function(t,e){var i,n,s,r,a=this.options,o=this._isRootNode(this.scrollParent[0]),l=t.pageX,u=t.pageY;return o&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),e&&(this.containment&&(this.relativeContainer?(n=this.relativeContainer.offset(),i=[this.containment[0]+n.left,this.containment[1]+n.top,this.containment[2]+n.left,this.containment[3]+n.top]):i=this.containment,t.pageX-this.offset.click.left<i[0]&&(l=i[0]+this.offset.click.left),t.pageY-this.offset.click.top<i[1]&&(u=i[1]+this.offset.click.top),t.pageX-this.offset.click.left>i[2]&&(l=i[2]+this.offset.click.left),t.pageY-this.offset.click.top>i[3]&&(u=i[3]+this.offset.click.top)),a.grid&&(s=a.grid[1]?this.originalPageY+Math.round((u-this.originalPageY)/a.grid[1])*a.grid[1]:this.originalPageY,u=i?s-this.offset.click.top>=i[1]||s-this.offset.click.top>i[3]?s:s-this.offset.click.top>=i[1]?s-a.grid[1]:s+a.grid[1]:s,r=a.grid[0]?this.originalPageX+Math.round((l-this.originalPageX)/a.grid[0])*a.grid[0]:this.originalPageX,l=i?r-this.offset.click.left>=i[0]||r-this.offset.click.left>i[2]?r:r-this.offset.click.left>=i[0]?r-a.grid[0]:r+a.grid[0]:r),"y"===a.axis&&(l=this.originalPageX),"x"===a.axis&&(u=this.originalPageY)),{top:u-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:o?0:this.offset.scroll.top),left:l-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:o?0:this.offset.scroll.left)}},_clear:function(){this._removeClass(this.helper,"ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_trigger:function(e,i,n){return n=n||this._uiHash(),t.ui.plugin.call(this,e,[i,n,this],!0),/^(drag|start|stop)/.test(e)&&(this.positionAbs=this._convertPositionTo("absolute"),n.offset=this.positionAbs),t.Widget.prototype._trigger.call(this,e,i,n)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),t.ui.plugin.add("draggable","connectToSortable",{start:function(e,i,n){var s=t.extend({},i,{item:n.element});n.sortables=[],t(n.options.connectToSortable).each((function(){var i=t(this).sortable("instance");i&&!i.options.disabled&&(n.sortables.push(i),i.refreshPositions(),i._trigger("activate",e,s))}))},stop:function(e,i,n){var s=t.extend({},i,{item:n.element});n.cancelHelperRemoval=!1,t.each(n.sortables,(function(){this.isOver?(this.isOver=0,n.cancelHelperRemoval=!0,this.cancelHelperRemoval=!1,this._storedCSS={position:this.placeholder.css("position"),top:this.placeholder.css("top"),left:this.placeholder.css("left")},this._mouseStop(e),this.options.helper=this.options._helper):(this.cancelHelperRemoval=!0,this._trigger("deactivate",e,s))}))},drag:function(e,i,n){t.each(n.sortables,(function(){var s=!1,r=this;r.positionAbs=n.positionAbs,r.helperProportions=n.helperProportions,r.offset.click=n.offset.click,r._intersectsWith(r.containerCache)&&(s=!0,t.each(n.sortables,(function(){return this.positionAbs=n.positionAbs,this.helperProportions=n.helperProportions,this.offset.click=n.offset.click,this!==r&&this._intersectsWith(this.containerCache)&&t.contains(r.element[0],this.element[0])&&(s=!1),s}))),s?(r.isOver||(r.isOver=1,n._parent=i.helper.parent(),r.currentItem=i.helper.appendTo(r.element).data("ui-sortable-item",!0),r.options._helper=r.options.helper,r.options.helper=function(){return i.helper[0]},e.target=r.currentItem[0],r._mouseCapture(e,!0),r._mouseStart(e,!0,!0),r.offset.click.top=n.offset.click.top,r.offset.click.left=n.offset.click.left,r.offset.parent.left-=n.offset.parent.left-r.offset.parent.left,r.offset.parent.top-=n.offset.parent.top-r.offset.parent.top,n._trigger("toSortable",e),n.dropped=r.element,t.each(n.sortables,(function(){this.refreshPositions()})),n.currentItem=n.element,r.fromOutside=n),r.currentItem&&(r._mouseDrag(e),i.position=r.position)):r.isOver&&(r.isOver=0,r.cancelHelperRemoval=!0,r.options._revert=r.options.revert,r.options.revert=!1,r._trigger("out",e,r._uiHash(r)),r._mouseStop(e,!0),r.options.revert=r.options._revert,r.options.helper=r.options._helper,r.placeholder&&r.placeholder.remove(),i.helper.appendTo(n._parent),n._refreshOffsets(e),i.position=n._generatePosition(e,!0),n._trigger("fromSortable",e),n.dropped=!1,t.each(n.sortables,(function(){this.refreshPositions()})))}))}}),t.ui.plugin.add("draggable","cursor",{start:function(e,i,n){var s=t("body"),r=n.options;s.css("cursor")&&(r._cursor=s.css("cursor")),s.css("cursor",r.cursor)},stop:function(e,i,n){var s=n.options;s._cursor&&t("body").css("cursor",s._cursor)}}),t.ui.plugin.add("draggable","opacity",{start:function(e,i,n){var s=t(i.helper),r=n.options;s.css("opacity")&&(r._opacity=s.css("opacity")),s.css("opacity",r.opacity)},stop:function(e,i,n){var s=n.options;s._opacity&&t(i.helper).css("opacity",s._opacity)}}),t.ui.plugin.add("draggable","scroll",{start:function(t,e,i){i.scrollParentNotHidden||(i.scrollParentNotHidden=i.helper.scrollParent(!1)),i.scrollParentNotHidden[0]!==i.document[0]&&"HTML"!==i.scrollParentNotHidden[0].tagName&&(i.overflowOffset=i.scrollParentNotHidden.offset())},drag:function(e,i,n){var s=n.options,r=!1,a=n.scrollParentNotHidden[0],o=n.document[0];a!==o&&"HTML"!==a.tagName?(s.axis&&"x"===s.axis||(n.overflowOffset.top+a.offsetHeight-e.pageY<s.scrollSensitivity?a.scrollTop=r=a.scrollTop+s.scrollSpeed:e.pageY-n.overflowOffset.top<s.scrollSensitivity&&(a.scrollTop=r=a.scrollTop-s.scrollSpeed)),s.axis&&"y"===s.axis||(n.overflowOffset.left+a.offsetWidth-e.pageX<s.scrollSensitivity?a.scrollLeft=r=a.scrollLeft+s.scrollSpeed:e.pageX-n.overflowOffset.left<s.scrollSensitivity&&(a.scrollLeft=r=a.scrollLeft-s.scrollSpeed))):(s.axis&&"x"===s.axis||(e.pageY-t(o).scrollTop()<s.scrollSensitivity?r=t(o).scrollTop(t(o).scrollTop()-s.scrollSpeed):t(window).height()-(e.pageY-t(o).scrollTop())<s.scrollSensitivity&&(r=t(o).scrollTop(t(o).scrollTop()+s.scrollSpeed))),s.axis&&"y"===s.axis||(e.pageX-t(o).scrollLeft()<s.scrollSensitivity?r=t(o).scrollLeft(t(o).scrollLeft()-s.scrollSpeed):t(window).width()-(e.pageX-t(o).scrollLeft())<s.scrollSensitivity&&(r=t(o).scrollLeft(t(o).scrollLeft()+s.scrollSpeed)))),!1!==r&&t.ui.ddmanager&&!s.dropBehaviour&&t.ui.ddmanager.prepareOffsets(n,e)}}),t.ui.plugin.add("draggable","snap",{start:function(e,i,n){var s=n.options;n.snapElements=[],t(s.snap.constructor!==String?s.snap.items||":data(ui-draggable)":s.snap).each((function(){var e=t(this),i=e.offset();this!==n.element[0]&&n.snapElements.push({item:this,width:e.outerWidth(),height:e.outerHeight(),top:i.top,left:i.left})}))},drag:function(e,i,n){var s,r,a,o,l,u,h,c,d,p,f=n.options,g=f.snapTolerance,m=i.offset.left,v=m+n.helperProportions.width,b=i.offset.top,y=b+n.helperProportions.height;for(d=n.snapElements.length-1;d>=0;d--)u=(l=n.snapElements[d].left-n.margins.left)+n.snapElements[d].width,c=(h=n.snapElements[d].top-n.margins.top)+n.snapElements[d].height,v<l-g||m>u+g||y<h-g||b>c+g||!t.contains(n.snapElements[d].item.ownerDocument,n.snapElements[d].item)?(n.snapElements[d].snapping&&n.options.snap.release&&n.options.snap.release.call(n.element,e,t.extend(n._uiHash(),{snapItem:n.snapElements[d].item})),n.snapElements[d].snapping=!1):("inner"!==f.snapMode&&(s=Math.abs(h-y)<=g,r=Math.abs(c-b)<=g,a=Math.abs(l-v)<=g,o=Math.abs(u-m)<=g,s&&(i.position.top=n._convertPositionTo("relative",{top:h-n.helperProportions.height,left:0}).top),r&&(i.position.top=n._convertPositionTo("relative",{top:c,left:0}).top),a&&(i.position.left=n._convertPositionTo("relative",{top:0,left:l-n.helperProportions.width}).left),o&&(i.position.left=n._convertPositionTo("relative",{top:0,left:u}).left)),p=s||r||a||o,"outer"!==f.snapMode&&(s=Math.abs(h-b)<=g,r=Math.abs(c-y)<=g,a=Math.abs(l-m)<=g,o=Math.abs(u-v)<=g,s&&(i.position.top=n._convertPositionTo("relative",{top:h,left:0}).top),r&&(i.position.top=n._convertPositionTo("relative",{top:c-n.helperProportions.height,left:0}).top),a&&(i.position.left=n._convertPositionTo("relative",{top:0,left:l}).left),o&&(i.position.left=n._convertPositionTo("relative",{top:0,left:u-n.helperProportions.width}).left)),!n.snapElements[d].snapping&&(s||r||a||o||p)&&n.options.snap.snap&&n.options.snap.snap.call(n.element,e,t.extend(n._uiHash(),{snapItem:n.snapElements[d].item})),n.snapElements[d].snapping=s||r||a||o||p)}}),t.ui.plugin.add("draggable","stack",{start:function(e,i,n){var s,r=n.options,a=t.makeArray(t(r.stack)).sort((function(e,i){return(parseInt(t(e).css("zIndex"),10)||0)-(parseInt(t(i).css("zIndex"),10)||0)}));a.length&&(s=parseInt(t(a[0]).css("zIndex"),10)||0,t(a).each((function(e){t(this).css("zIndex",s+e)})),this.css("zIndex",s+a.length))}}),t.ui.plugin.add("draggable","zIndex",{start:function(e,i,n){var s=t(i.helper),r=n.options;s.css("zIndex")&&(r._zIndex=s.css("zIndex")),s.css("zIndex",r.zIndex)},stop:function(e,i,n){var s=n.options;s._zIndex&&t(i.helper).css("zIndex",s._zIndex)}}),t.ui.draggable,
/*!
 * jQuery UI Resizable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
t.widget("ui.resizable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,classes:{"ui-resizable-se":"ui-icon ui-icon-gripsmall-diagonal-se"},containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_num:function(t){return parseFloat(t)||0},_isNumber:function(t){return!isNaN(parseFloat(t))},_hasScroll:function(e,i){if("hidden"===t(e).css("overflow"))return!1;var n,s=i&&"left"===i?"scrollLeft":"scrollTop";return e[s]>0||(e[s]=1,n=e[s]>0,e[s]=0,n)},_create:function(){var e,i=this.options,n=this;this._addClass("ui-resizable"),t.extend(this,{_aspectRatio:!!i.aspectRatio,aspectRatio:i.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:i.helper||i.ghost||i.animate?i.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)&&(this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.resizable("instance")),this.elementIsWrapper=!0,e={marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom"),marginLeft:this.originalElement.css("marginLeft")},this.element.css(e),this.originalElement.css("margin",0),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css(e),this._proportionallyResize()),this._setupHandles(),i.autoHide&&t(this.element).on("mouseenter",(function(){i.disabled||(n._removeClass("ui-resizable-autohide"),n._handles.show())})).on("mouseleave",(function(){i.disabled||n.resizing||(n._addClass("ui-resizable-autohide"),n._handles.hide())})),this._mouseInit()},_destroy:function(){this._mouseDestroy();var e,i=function(e){t(e).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove()};return this.elementIsWrapper&&(i(this.element),e=this.element,this.originalElement.css({position:e.css("position"),width:e.outerWidth(),height:e.outerHeight(),top:e.css("top"),left:e.css("left")}).insertAfter(e),e.remove()),this.originalElement.css("resize",this.originalResizeStyle),i(this.originalElement),this},_setOption:function(t,e){switch(this._super(t,e),t){case"handles":this._removeHandles(),this._setupHandles()}},_setupHandles:function(){var e,i,n,s,r,a=this.options,o=this;if(this.handles=a.handles||(t(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this._handles=t(),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),n=this.handles.split(","),this.handles={},i=0;i<n.length;i++)s="ui-resizable-"+(e=t.trim(n[i])),r=t("<div>"),this._addClass(r,"ui-resizable-handle "+s),r.css({zIndex:a.zIndex}),this.handles[e]=".ui-resizable-"+e,this.element.append(r);this._renderAxis=function(e){var i,n,s,r;for(i in e=e||this.element,this.handles)this.handles[i].constructor===String?this.handles[i]=this.element.children(this.handles[i]).first().show():(this.handles[i].jquery||this.handles[i].nodeType)&&(this.handles[i]=t(this.handles[i]),this._on(this.handles[i],{mousedown:o._mouseDown})),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)&&(n=t(this.handles[i],this.element),r=/sw|ne|nw|se|n|s/.test(i)?n.outerHeight():n.outerWidth(),s=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join(""),e.css(s,r),this._proportionallyResize()),this._handles=this._handles.add(this.handles[i])},this._renderAxis(this.element),this._handles=this._handles.add(this.element.find(".ui-resizable-handle")),this._handles.disableSelection(),this._handles.on("mouseover",(function(){o.resizing||(this.className&&(r=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),o.axis=r&&r[1]?r[1]:"se")})),a.autoHide&&(this._handles.hide(),this._addClass("ui-resizable-autohide"))},_removeHandles:function(){this._handles.remove()},_mouseCapture:function(e){var i,n,s=!1;for(i in this.handles)((n=t(this.handles[i])[0])===e.target||t.contains(n,e.target))&&(s=!0);return!this.options.disabled&&s},_mouseStart:function(e){var i,n,s,r=this.options,a=this.element;return this.resizing=!0,this._renderProxy(),i=this._num(this.helper.css("left")),n=this._num(this.helper.css("top")),r.containment&&(i+=t(r.containment).scrollLeft()||0,n+=t(r.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:i,top:n},this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:a.width(),height:a.height()},this.originalSize=this._helper?{width:a.outerWidth(),height:a.outerHeight()}:{width:a.width(),height:a.height()},this.sizeDiff={width:a.outerWidth()-a.width(),height:a.outerHeight()-a.height()},this.originalPosition={left:i,top:n},this.originalMousePosition={left:e.pageX,top:e.pageY},this.aspectRatio="number"==typeof r.aspectRatio?r.aspectRatio:this.originalSize.width/this.originalSize.height||1,s=t(".ui-resizable-"+this.axis).css("cursor"),t("body").css("cursor","auto"===s?this.axis+"-resize":s),this._addClass("ui-resizable-resizing"),this._propagate("start",e),!0},_mouseDrag:function(e){var i,n,s=this.originalMousePosition,r=this.axis,a=e.pageX-s.left||0,o=e.pageY-s.top||0,l=this._change[r];return this._updatePrevProperties(),!!l&&(i=l.apply(this,[e,a,o]),this._updateVirtualBoundaries(e.shiftKey),(this._aspectRatio||e.shiftKey)&&(i=this._updateRatio(i,e)),i=this._respectSize(i,e),this._updateCache(i),this._propagate("resize",e),n=this._applyChanges(),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),t.isEmptyObject(n)||(this._updatePrevProperties(),this._trigger("resize",e,this.ui()),this._applyChanges()),!1)},_mouseStop:function(e){this.resizing=!1;var i,n,s,r,a,o,l,u=this.options;return this._helper&&(s=(n=(i=this._proportionallyResizeElements).length&&/textarea/i.test(i[0].nodeName))&&this._hasScroll(i[0],"left")?0:this.sizeDiff.height,r=n?0:this.sizeDiff.width,a={width:this.helper.width()-r,height:this.helper.height()-s},o=parseFloat(this.element.css("left"))+(this.position.left-this.originalPosition.left)||null,l=parseFloat(this.element.css("top"))+(this.position.top-this.originalPosition.top)||null,u.animate||this.element.css(t.extend(a,{top:l,left:o})),this.helper.height(this.size.height),this.helper.width(this.size.width),this._helper&&!u.animate&&this._proportionallyResize()),t("body").css("cursor","auto"),this._removeClass("ui-resizable-resizing"),this._propagate("stop",e),this._helper&&this.helper.remove(),!1},_updatePrevProperties:function(){this.prevPosition={top:this.position.top,left:this.position.left},this.prevSize={width:this.size.width,height:this.size.height}},_applyChanges:function(){var t={};return this.position.top!==this.prevPosition.top&&(t.top=this.position.top+"px"),this.position.left!==this.prevPosition.left&&(t.left=this.position.left+"px"),this.size.width!==this.prevSize.width&&(t.width=this.size.width+"px"),this.size.height!==this.prevSize.height&&(t.height=this.size.height+"px"),this.helper.css(t),t},_updateVirtualBoundaries:function(t){var e,i,n,s,r,a=this.options;r={minWidth:this._isNumber(a.minWidth)?a.minWidth:0,maxWidth:this._isNumber(a.maxWidth)?a.maxWidth:1/0,minHeight:this._isNumber(a.minHeight)?a.minHeight:0,maxHeight:this._isNumber(a.maxHeight)?a.maxHeight:1/0},(this._aspectRatio||t)&&(e=r.minHeight*this.aspectRatio,n=r.minWidth/this.aspectRatio,i=r.maxHeight*this.aspectRatio,s=r.maxWidth/this.aspectRatio,e>r.minWidth&&(r.minWidth=e),n>r.minHeight&&(r.minHeight=n),i<r.maxWidth&&(r.maxWidth=i),s<r.maxHeight&&(r.maxHeight=s)),this._vBoundaries=r},_updateCache:function(t){this.offset=this.helper.offset(),this._isNumber(t.left)&&(this.position.left=t.left),this._isNumber(t.top)&&(this.position.top=t.top),this._isNumber(t.height)&&(this.size.height=t.height),this._isNumber(t.width)&&(this.size.width=t.width)},_updateRatio:function(t){var e=this.position,i=this.size,n=this.axis;return this._isNumber(t.height)?t.width=t.height*this.aspectRatio:this._isNumber(t.width)&&(t.height=t.width/this.aspectRatio),"sw"===n&&(t.left=e.left+(i.width-t.width),t.top=null),"nw"===n&&(t.top=e.top+(i.height-t.height),t.left=e.left+(i.width-t.width)),t},_respectSize:function(t){var e=this._vBoundaries,i=this.axis,n=this._isNumber(t.width)&&e.maxWidth&&e.maxWidth<t.width,s=this._isNumber(t.height)&&e.maxHeight&&e.maxHeight<t.height,r=this._isNumber(t.width)&&e.minWidth&&e.minWidth>t.width,a=this._isNumber(t.height)&&e.minHeight&&e.minHeight>t.height,o=this.originalPosition.left+this.originalSize.width,l=this.originalPosition.top+this.originalSize.height,u=/sw|nw|w/.test(i),h=/nw|ne|n/.test(i);return r&&(t.width=e.minWidth),a&&(t.height=e.minHeight),n&&(t.width=e.maxWidth),s&&(t.height=e.maxHeight),r&&u&&(t.left=o-e.minWidth),n&&u&&(t.left=o-e.maxWidth),a&&h&&(t.top=l-e.minHeight),s&&h&&(t.top=l-e.maxHeight),t.width||t.height||t.left||!t.top?t.width||t.height||t.top||!t.left||(t.left=null):t.top=null,t},_getPaddingPlusBorderDimensions:function(t){for(var e=0,i=[],n=[t.css("borderTopWidth"),t.css("borderRightWidth"),t.css("borderBottomWidth"),t.css("borderLeftWidth")],s=[t.css("paddingTop"),t.css("paddingRight"),t.css("paddingBottom"),t.css("paddingLeft")];e<4;e++)i[e]=parseFloat(n[e])||0,i[e]+=parseFloat(s[e])||0;return{height:i[0]+i[2],width:i[1]+i[3]}},_proportionallyResize:function(){if(this._proportionallyResizeElements.length)for(var t,e=0,i=this.helper||this.element;e<this._proportionallyResizeElements.length;e++)t=this._proportionallyResizeElements[e],this.outerDimensions||(this.outerDimensions=this._getPaddingPlusBorderDimensions(t)),t.css({height:i.height()-this.outerDimensions.height||0,width:i.width()-this.outerDimensions.width||0})},_renderProxy:function(){var e=this.element,i=this.options;this.elementOffset=e.offset(),this._helper?(this.helper=this.helper||t("<div style='overflow:hidden;'></div>"),this._addClass(this.helper,this._helper),this.helper.css({width:this.element.outerWidth(),height:this.element.outerHeight(),position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(t,e){return{width:this.originalSize.width+e}},w:function(t,e){var i=this.originalSize;return{left:this.originalPosition.left+e,width:i.width-e}},n:function(t,e,i){var n=this.originalSize;return{top:this.originalPosition.top+i,height:n.height-i}},s:function(t,e,i){return{height:this.originalSize.height+i}},se:function(e,i,n){return t.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[e,i,n]))},sw:function(e,i,n){return t.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[e,i,n]))},ne:function(e,i,n){return t.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[e,i,n]))},nw:function(e,i,n){return t.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[e,i,n]))}},_propagate:function(e,i){t.ui.plugin.call(this,e,[i,this.ui()]),"resize"!==e&&this._trigger(e,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),t.ui.plugin.add("resizable","animate",{stop:function(e){var i=t(this).resizable("instance"),n=i.options,s=i._proportionallyResizeElements,r=s.length&&/textarea/i.test(s[0].nodeName),a=r&&i._hasScroll(s[0],"left")?0:i.sizeDiff.height,o=r?0:i.sizeDiff.width,l={width:i.size.width-o,height:i.size.height-a},u=parseFloat(i.element.css("left"))+(i.position.left-i.originalPosition.left)||null,h=parseFloat(i.element.css("top"))+(i.position.top-i.originalPosition.top)||null;i.element.animate(t.extend(l,h&&u?{top:h,left:u}:{}),{duration:n.animateDuration,easing:n.animateEasing,step:function(){var n={width:parseFloat(i.element.css("width")),height:parseFloat(i.element.css("height")),top:parseFloat(i.element.css("top")),left:parseFloat(i.element.css("left"))};s&&s.length&&t(s[0]).css({width:n.width,height:n.height}),i._updateCache(n),i._propagate("resize",e)}})}}),t.ui.plugin.add("resizable","containment",{start:function(){var e,i,n,s,r,a,o,l=t(this).resizable("instance"),u=l.options,h=l.element,c=u.containment,d=c instanceof t?c.get(0):/parent/.test(c)?h.parent().get(0):c;d&&(l.containerElement=t(d),/document/.test(c)||c===document?(l.containerOffset={left:0,top:0},l.containerPosition={left:0,top:0},l.parentData={element:t(document),left:0,top:0,width:t(document).width(),height:t(document).height()||document.body.parentNode.scrollHeight}):(e=t(d),i=[],t(["Top","Right","Left","Bottom"]).each((function(t,n){i[t]=l._num(e.css("padding"+n))})),l.containerOffset=e.offset(),l.containerPosition=e.position(),l.containerSize={height:e.innerHeight()-i[3],width:e.innerWidth()-i[1]},n=l.containerOffset,s=l.containerSize.height,r=l.containerSize.width,a=l._hasScroll(d,"left")?d.scrollWidth:r,o=l._hasScroll(d)?d.scrollHeight:s,l.parentData={element:d,left:n.left,top:n.top,width:a,height:o}))},resize:function(e){var i,n,s,r,a=t(this).resizable("instance"),o=a.options,l=a.containerOffset,u=a.position,h=a._aspectRatio||e.shiftKey,c={top:0,left:0},d=a.containerElement,p=!0;d[0]!==document&&/static/.test(d.css("position"))&&(c=l),u.left<(a._helper?l.left:0)&&(a.size.width=a.size.width+(a._helper?a.position.left-l.left:a.position.left-c.left),h&&(a.size.height=a.size.width/a.aspectRatio,p=!1),a.position.left=o.helper?l.left:0),u.top<(a._helper?l.top:0)&&(a.size.height=a.size.height+(a._helper?a.position.top-l.top:a.position.top),h&&(a.size.width=a.size.height*a.aspectRatio,p=!1),a.position.top=a._helper?l.top:0),s=a.containerElement.get(0)===a.element.parent().get(0),r=/relative|absolute/.test(a.containerElement.css("position")),s&&r?(a.offset.left=a.parentData.left+a.position.left,a.offset.top=a.parentData.top+a.position.top):(a.offset.left=a.element.offset().left,a.offset.top=a.element.offset().top),i=Math.abs(a.sizeDiff.width+(a._helper?a.offset.left-c.left:a.offset.left-l.left)),n=Math.abs(a.sizeDiff.height+(a._helper?a.offset.top-c.top:a.offset.top-l.top)),i+a.size.width>=a.parentData.width&&(a.size.width=a.parentData.width-i,h&&(a.size.height=a.size.width/a.aspectRatio,p=!1)),n+a.size.height>=a.parentData.height&&(a.size.height=a.parentData.height-n,h&&(a.size.width=a.size.height*a.aspectRatio,p=!1)),p||(a.position.left=a.prevPosition.left,a.position.top=a.prevPosition.top,a.size.width=a.prevSize.width,a.size.height=a.prevSize.height)},stop:function(){var e=t(this).resizable("instance"),i=e.options,n=e.containerOffset,s=e.containerPosition,r=e.containerElement,a=t(e.helper),o=a.offset(),l=a.outerWidth()-e.sizeDiff.width,u=a.outerHeight()-e.sizeDiff.height;e._helper&&!i.animate&&/relative/.test(r.css("position"))&&t(this).css({left:o.left-s.left-n.left,width:l,height:u}),e._helper&&!i.animate&&/static/.test(r.css("position"))&&t(this).css({left:o.left-s.left-n.left,width:l,height:u})}}),t.ui.plugin.add("resizable","alsoResize",{start:function(){var e=t(this).resizable("instance").options;t(e.alsoResize).each((function(){var e=t(this);e.data("ui-resizable-alsoresize",{width:parseFloat(e.width()),height:parseFloat(e.height()),left:parseFloat(e.css("left")),top:parseFloat(e.css("top"))})}))},resize:function(e,i){var n=t(this).resizable("instance"),s=n.options,r=n.originalSize,a=n.originalPosition,o={height:n.size.height-r.height||0,width:n.size.width-r.width||0,top:n.position.top-a.top||0,left:n.position.left-a.left||0};t(s.alsoResize).each((function(){var e=t(this),n=t(this).data("ui-resizable-alsoresize"),s={},r=e.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];t.each(r,(function(t,e){var i=(n[e]||0)+(o[e]||0);i&&i>=0&&(s[e]=i||null)})),e.css(s)}))},stop:function(){t(this).removeData("ui-resizable-alsoresize")}}),t.ui.plugin.add("resizable","ghost",{start:function(){var e=t(this).resizable("instance"),i=e.size;e.ghost=e.originalElement.clone(),e.ghost.css({opacity:.25,display:"block",position:"relative",height:i.height,width:i.width,margin:0,left:0,top:0}),e._addClass(e.ghost,"ui-resizable-ghost"),!1!==t.uiBackCompat&&"string"==typeof e.options.ghost&&e.ghost.addClass(this.options.ghost),e.ghost.appendTo(e.helper)},resize:function(){var e=t(this).resizable("instance");e.ghost&&e.ghost.css({position:"relative",height:e.size.height,width:e.size.width})},stop:function(){var e=t(this).resizable("instance");e.ghost&&e.helper&&e.helper.get(0).removeChild(e.ghost.get(0))}}),t.ui.plugin.add("resizable","grid",{resize:function(){var e,i=t(this).resizable("instance"),n=i.options,s=i.size,r=i.originalSize,a=i.originalPosition,o=i.axis,l="number"==typeof n.grid?[n.grid,n.grid]:n.grid,u=l[0]||1,h=l[1]||1,c=Math.round((s.width-r.width)/u)*u,d=Math.round((s.height-r.height)/h)*h,p=r.width+c,f=r.height+d,g=n.maxWidth&&n.maxWidth<p,m=n.maxHeight&&n.maxHeight<f,v=n.minWidth&&n.minWidth>p,b=n.minHeight&&n.minHeight>f;n.grid=l,v&&(p+=u),b&&(f+=h),g&&(p-=u),m&&(f-=h),/^(se|s|e)$/.test(o)?(i.size.width=p,i.size.height=f):/^(ne)$/.test(o)?(i.size.width=p,i.size.height=f,i.position.top=a.top-d):/^(sw)$/.test(o)?(i.size.width=p,i.size.height=f,i.position.left=a.left-c):((f-h<=0||p-u<=0)&&(e=i._getPaddingPlusBorderDimensions(this)),f-h>0?(i.size.height=f,i.position.top=a.top-d):(f=h-e.height,i.size.height=f,i.position.top=a.top+r.height-f),p-u>0?(i.size.width=p,i.position.left=a.left-c):(p=u-e.width,i.size.width=p,i.position.left=a.left+r.width-p))}}),t.ui.resizable,
/*!
 * jQuery UI Dialog 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
t.widget("ui.dialog",{version:"1.12.1",options:{appendTo:"body",autoOpen:!0,buttons:[],classes:{"ui-dialog":"ui-corner-all","ui-dialog-titlebar":"ui-corner-all"},closeOnEscape:!0,closeText:"Close",draggable:!0,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(e){var i=t(this).css(e).offset().top;i<0&&t(this).css("top",e.top-i)}},resizable:!0,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},sizeRelatedOptions:{buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},resizableRelatedOptions:{maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height},this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.originalTitle=this.element.attr("title"),null==this.options.title&&null!=this.originalTitle&&(this.options.title=this.originalTitle),this.options.disabled&&(this.options.disabled=!1),this._createWrapper(),this.element.show().removeAttr("title").appendTo(this.uiDialog),this._addClass("ui-dialog-content","ui-widget-content"),this._createTitlebar(),this._createButtonPane(),this.options.draggable&&t.fn.draggable&&this._makeDraggable(),this.options.resizable&&t.fn.resizable&&this._makeResizable(),this._isOpen=!1,this._trackFocus()},_init:function(){this.options.autoOpen&&this.open()},_appendTo:function(){var e=this.options.appendTo;return e&&(e.jquery||e.nodeType)?t(e):this.document.find(e||"body").eq(0)},_destroy:function(){var t,e=this.originalPosition;this._untrackInstance(),this._destroyOverlay(),this.element.removeUniqueId().css(this.originalCss).detach(),this.uiDialog.remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),(t=e.parent.children().eq(e.index)).length&&t[0]!==this.element[0]?t.before(this.element):e.parent.append(this.element)},widget:function(){return this.uiDialog},disable:t.noop,enable:t.noop,close:function(e){var i=this;this._isOpen&&!1!==this._trigger("beforeClose",e)&&(this._isOpen=!1,this._focusedElement=null,this._destroyOverlay(),this._untrackInstance(),this.opener.filter(":focusable").trigger("focus").length||t.ui.safeBlur(t.ui.safeActiveElement(this.document[0])),this._hide(this.uiDialog,this.options.hide,(function(){i._trigger("close",e)})))},isOpen:function(){return this._isOpen},moveToTop:function(){this._moveToTop()},_moveToTop:function(e,i){var n=!1,s=this.uiDialog.siblings(".ui-front:visible").map((function(){return+t(this).css("z-index")})).get(),r=Math.max.apply(null,s);return r>=+this.uiDialog.css("z-index")&&(this.uiDialog.css("z-index",r+1),n=!0),n&&!i&&this._trigger("focus",e),n},open:function(){var e=this;this._isOpen?this._moveToTop()&&this._focusTabbable():(this._isOpen=!0,this.opener=t(t.ui.safeActiveElement(this.document[0])),this._size(),this._position(),this._createOverlay(),this._moveToTop(null,!0),this.overlay&&this.overlay.css("z-index",this.uiDialog.css("z-index")-1),this._show(this.uiDialog,this.options.show,(function(){e._focusTabbable(),e._trigger("focus")})),this._makeFocusTarget(),this._trigger("open"))},_focusTabbable:function(){var t=this._focusedElement;t||(t=this.element.find("[autofocus]")),t.length||(t=this.element.find(":tabbable")),t.length||(t=this.uiDialogButtonPane.find(":tabbable")),t.length||(t=this.uiDialogTitlebarClose.filter(":tabbable")),t.length||(t=this.uiDialog),t.eq(0).trigger("focus")},_keepFocus:function(e){function i(){var e=t.ui.safeActiveElement(this.document[0]);this.uiDialog[0]===e||t.contains(this.uiDialog[0],e)||this._focusTabbable()}e.preventDefault(),i.call(this),this._delay(i)},_createWrapper:function(){this.uiDialog=t("<div>").hide().attr({tabIndex:-1,role:"dialog"}).appendTo(this._appendTo()),this._addClass(this.uiDialog,"ui-dialog","ui-widget ui-widget-content ui-front"),this._on(this.uiDialog,{keydown:function(e){if(this.options.closeOnEscape&&!e.isDefaultPrevented()&&e.keyCode&&e.keyCode===t.ui.keyCode.ESCAPE)return e.preventDefault(),void this.close(e);if(e.keyCode===t.ui.keyCode.TAB&&!e.isDefaultPrevented()){var i=this.uiDialog.find(":tabbable"),n=i.filter(":first"),s=i.filter(":last");e.target!==s[0]&&e.target!==this.uiDialog[0]||e.shiftKey?e.target!==n[0]&&e.target!==this.uiDialog[0]||!e.shiftKey||(this._delay((function(){s.trigger("focus")})),e.preventDefault()):(this._delay((function(){n.trigger("focus")})),e.preventDefault())}},mousedown:function(t){this._moveToTop(t)&&this._focusTabbable()}}),this.element.find("[aria-describedby]").length||this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")})},_createTitlebar:function(){var e;this.uiDialogTitlebar=t("<div>"),this._addClass(this.uiDialogTitlebar,"ui-dialog-titlebar","ui-widget-header ui-helper-clearfix"),this._on(this.uiDialogTitlebar,{mousedown:function(e){t(e.target).closest(".ui-dialog-titlebar-close")||this.uiDialog.trigger("focus")}}),this.uiDialogTitlebarClose=t("<button type='button'></button>").button({label:t("<a>").text(this.options.closeText).html(),icon:"ui-icon-closethick",showLabel:!1}).appendTo(this.uiDialogTitlebar),this._addClass(this.uiDialogTitlebarClose,"ui-dialog-titlebar-close"),this._on(this.uiDialogTitlebarClose,{click:function(t){t.preventDefault(),this.close(t)}}),e=t("<span>").uniqueId().prependTo(this.uiDialogTitlebar),this._addClass(e,"ui-dialog-title"),this._title(e),this.uiDialogTitlebar.prependTo(this.uiDialog),this.uiDialog.attr({"aria-labelledby":e.attr("id")})},_title:function(t){this.options.title?t.text(this.options.title):t.html("&#160;")},_createButtonPane:function(){this.uiDialogButtonPane=t("<div>"),this._addClass(this.uiDialogButtonPane,"ui-dialog-buttonpane","ui-widget-content ui-helper-clearfix"),this.uiButtonSet=t("<div>").appendTo(this.uiDialogButtonPane),this._addClass(this.uiButtonSet,"ui-dialog-buttonset"),this._createButtons()},_createButtons:function(){var e=this,i=this.options.buttons;this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),t.isEmptyObject(i)||t.isArray(i)&&!i.length?this._removeClass(this.uiDialog,"ui-dialog-buttons"):(t.each(i,(function(i,n){var s,r;n=t.isFunction(n)?{click:n,text:i}:n,n=t.extend({type:"button"},n),s=n.click,r={icon:n.icon,iconPosition:n.iconPosition,showLabel:n.showLabel,icons:n.icons,text:n.text},delete n.click,delete n.icon,delete n.iconPosition,delete n.showLabel,delete n.icons,"boolean"==typeof n.text&&delete n.text,t("<button></button>",n).button(r).appendTo(e.uiButtonSet).on("click",(function(){s.apply(e.element[0],arguments)}))})),this._addClass(this.uiDialog,"ui-dialog-buttons"),this.uiDialogButtonPane.appendTo(this.uiDialog))},_makeDraggable:function(){var e=this,i=this.options;function n(t){return{position:t.position,offset:t.offset}}this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(i,s){e._addClass(t(this),"ui-dialog-dragging"),e._blockFrames(),e._trigger("dragStart",i,n(s))},drag:function(t,i){e._trigger("drag",t,n(i))},stop:function(s,r){var a=r.offset.left-e.document.scrollLeft(),o=r.offset.top-e.document.scrollTop();i.position={my:"left top",at:"left"+(a>=0?"+":"")+a+" top"+(o>=0?"+":"")+o,of:e.window},e._removeClass(t(this),"ui-dialog-dragging"),e._unblockFrames(),e._trigger("dragStop",s,n(r))}})},_makeResizable:function(){var e=this,i=this.options,n=i.resizable,s=this.uiDialog.css("position"),r="string"==typeof n?n:"n,e,s,w,se,sw,ne,nw";function a(t){return{originalPosition:t.originalPosition,originalSize:t.originalSize,position:t.position,size:t.size}}this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:i.maxWidth,maxHeight:i.maxHeight,minWidth:i.minWidth,minHeight:this._minHeight(),handles:r,start:function(i,n){e._addClass(t(this),"ui-dialog-resizing"),e._blockFrames(),e._trigger("resizeStart",i,a(n))},resize:function(t,i){e._trigger("resize",t,a(i))},stop:function(n,s){var r=e.uiDialog.offset(),o=r.left-e.document.scrollLeft(),l=r.top-e.document.scrollTop();i.height=e.uiDialog.height(),i.width=e.uiDialog.width(),i.position={my:"left top",at:"left"+(o>=0?"+":"")+o+" top"+(l>=0?"+":"")+l,of:e.window},e._removeClass(t(this),"ui-dialog-resizing"),e._unblockFrames(),e._trigger("resizeStop",n,a(s))}}).css("position",s)},_trackFocus:function(){this._on(this.widget(),{focusin:function(e){this._makeFocusTarget(),this._focusedElement=t(e.target)}})},_makeFocusTarget:function(){this._untrackInstance(),this._trackingInstances().unshift(this)},_untrackInstance:function(){var e=this._trackingInstances(),i=t.inArray(this,e);-1!==i&&e.splice(i,1)},_trackingInstances:function(){var t=this.document.data("ui-dialog-instances");return t||(t=[],this.document.data("ui-dialog-instances",t)),t},_minHeight:function(){var t=this.options;return"auto"===t.height?t.minHeight:Math.min(t.minHeight,t.height)},_position:function(){var t=this.uiDialog.is(":visible");t||this.uiDialog.show(),this.uiDialog.position(this.options.position),t||this.uiDialog.hide()},_setOptions:function(e){var i=this,n=!1,s={};t.each(e,(function(t,e){i._setOption(t,e),t in i.sizeRelatedOptions&&(n=!0),t in i.resizableRelatedOptions&&(s[t]=e)})),n&&(this._size(),this._position()),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option",s)},_setOption:function(e,i){var n,s,r=this.uiDialog;"disabled"!==e&&(this._super(e,i),"appendTo"===e&&this.uiDialog.appendTo(this._appendTo()),"buttons"===e&&this._createButtons(),"closeText"===e&&this.uiDialogTitlebarClose.button({label:t("<a>").text(""+this.options.closeText).html()}),"draggable"===e&&((n=r.is(":data(ui-draggable)"))&&!i&&r.draggable("destroy"),!n&&i&&this._makeDraggable()),"position"===e&&this._position(),"resizable"===e&&((s=r.is(":data(ui-resizable)"))&&!i&&r.resizable("destroy"),s&&"string"==typeof i&&r.resizable("option","handles",i),s||!1===i||this._makeResizable()),"title"===e&&this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))},_size:function(){var t,e,i,n=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0}),n.minWidth>n.width&&(n.width=n.minWidth),t=this.uiDialog.css({height:"auto",width:n.width}).outerHeight(),e=Math.max(0,n.minHeight-t),i="number"==typeof n.maxHeight?Math.max(0,n.maxHeight-t):"none","auto"===n.height?this.element.css({minHeight:e,maxHeight:i,height:"auto"}):this.element.height(Math.max(0,n.height-t)),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())},_blockFrames:function(){this.iframeBlocks=this.document.find("iframe").map((function(){var e=t(this);return t("<div>").css({position:"absolute",width:e.outerWidth(),height:e.outerHeight()}).appendTo(e.parent()).offset(e.offset())[0]}))},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_allowInteraction:function(e){return!!t(e.target).closest(".ui-dialog").length||!!t(e.target).closest(".ui-datepicker").length},_createOverlay:function(){if(this.options.modal){var e=!0;this._delay((function(){e=!1})),this.document.data("ui-dialog-overlays")||this._on(this.document,{focusin:function(t){e||this._allowInteraction(t)||(t.preventDefault(),this._trackingInstances()[0]._focusTabbable())}}),this.overlay=t("<div>").appendTo(this._appendTo()),this._addClass(this.overlay,null,"ui-widget-overlay ui-front"),this._on(this.overlay,{mousedown:"_keepFocus"}),this.document.data("ui-dialog-overlays",(this.document.data("ui-dialog-overlays")||0)+1)}},_destroyOverlay:function(){if(this.options.modal&&this.overlay){var t=this.document.data("ui-dialog-overlays")-1;t?this.document.data("ui-dialog-overlays",t):(this._off(this.document,"focusin"),this.document.removeData("ui-dialog-overlays")),this.overlay.remove(),this.overlay=null}}}),!1!==t.uiBackCompat&&t.widget("ui.dialog",t.ui.dialog,{options:{dialogClass:""},_createWrapper:function(){this._super(),this.uiDialog.addClass(this.options.dialogClass)},_setOption:function(t,e){"dialogClass"===t&&this.uiDialog.removeClass(this.options.dialogClass).addClass(e),this._superApply(arguments)}}),t.ui.dialog,
/*!
 * jQuery UI Droppable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
t.widget("ui.droppable",{version:"1.12.1",widgetEventPrefix:"drop",options:{accept:"*",addClasses:!0,greedy:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var e,i=this.options,n=i.accept;this.isover=!1,this.isout=!0,this.accept=t.isFunction(n)?n:function(t){return t.is(n)},this.proportions=function(){if(!arguments.length)return e||(e={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight});e=arguments[0]},this._addToManager(i.scope),i.addClasses&&this._addClass("ui-droppable")},_addToManager:function(e){t.ui.ddmanager.droppables[e]=t.ui.ddmanager.droppables[e]||[],t.ui.ddmanager.droppables[e].push(this)},_splice:function(t){for(var e=0;e<t.length;e++)t[e]===this&&t.splice(e,1)},_destroy:function(){var e=t.ui.ddmanager.droppables[this.options.scope];this._splice(e)},_setOption:function(e,i){if("accept"===e)this.accept=t.isFunction(i)?i:function(t){return t.is(i)};else if("scope"===e){var n=t.ui.ddmanager.droppables[this.options.scope];this._splice(n),this._addToManager(i)}this._super(e,i)},_activate:function(e){var i=t.ui.ddmanager.current;this._addActiveClass(),i&&this._trigger("activate",e,this.ui(i))},_deactivate:function(e){var i=t.ui.ddmanager.current;this._removeActiveClass(),i&&this._trigger("deactivate",e,this.ui(i))},_over:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._addHoverClass(),this._trigger("over",e,this.ui(i)))},_out:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._removeHoverClass(),this._trigger("out",e,this.ui(i)))},_drop:function(e,i){var n=i||t.ui.ddmanager.current,s=!1;return!(!n||(n.currentItem||n.element)[0]===this.element[0])&&(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each((function(){var i=t(this).droppable("instance");if(i.options.greedy&&!i.options.disabled&&i.options.scope===n.options.scope&&i.accept.call(i.element[0],n.currentItem||n.element)&&v(n,t.extend(i,{offset:i.element.offset()}),i.options.tolerance,e))return s=!0,!1})),!s&&!!this.accept.call(this.element[0],n.currentItem||n.element)&&(this._removeActiveClass(),this._removeHoverClass(),this._trigger("drop",e,this.ui(n)),this.element))},ui:function(t){return{draggable:t.currentItem||t.element,helper:t.helper,position:t.position,offset:t.positionAbs}},_addHoverClass:function(){this._addClass("ui-droppable-hover")},_removeHoverClass:function(){this._removeClass("ui-droppable-hover")},_addActiveClass:function(){this._addClass("ui-droppable-active")},_removeActiveClass:function(){this._removeClass("ui-droppable-active")}});var m,v=t.ui.intersect=function(){function t(t,e,i){return t>=e&&t<e+i}return function(e,i,n,s){if(!i.offset)return!1;var r=(e.positionAbs||e.position.absolute).left+e.margins.left,a=(e.positionAbs||e.position.absolute).top+e.margins.top,o=r+e.helperProportions.width,l=a+e.helperProportions.height,u=i.offset.left,h=i.offset.top,c=u+i.proportions().width,d=h+i.proportions().height;switch(n){case"fit":return u<=r&&o<=c&&h<=a&&l<=d;case"intersect":return u<r+e.helperProportions.width/2&&o-e.helperProportions.width/2<c&&h<a+e.helperProportions.height/2&&l-e.helperProportions.height/2<d;case"pointer":return t(s.pageY,h,i.proportions().height)&&t(s.pageX,u,i.proportions().width);case"touch":return(a>=h&&a<=d||l>=h&&l<=d||a<h&&l>d)&&(r>=u&&r<=c||o>=u&&o<=c||r<u&&o>c);default:return!1}}}();
/*!
 * jQuery UI Spinner 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
function b(t){return function(){var e=this.element.val();t.apply(this,arguments),this._refresh(),e!==this.element.val()&&this._trigger("change")}}t.ui.ddmanager={current:null,droppables:{default:[]},prepareOffsets:function(e,i){var n,s,r=t.ui.ddmanager.droppables[e.options.scope]||[],a=i?i.type:null,o=(e.currentItem||e.element).find(":data(ui-droppable)").addBack();t:for(n=0;n<r.length;n++)if(!(r[n].options.disabled||e&&!r[n].accept.call(r[n].element[0],e.currentItem||e.element))){for(s=0;s<o.length;s++)if(o[s]===r[n].element[0]){r[n].proportions().height=0;continue t}r[n].visible="none"!==r[n].element.css("display"),r[n].visible&&("mousedown"===a&&r[n]._activate.call(r[n],i),r[n].offset=r[n].element.offset(),r[n].proportions({width:r[n].element[0].offsetWidth,height:r[n].element[0].offsetHeight}))}},drop:function(e,i){var n=!1;return t.each((t.ui.ddmanager.droppables[e.options.scope]||[]).slice(),(function(){this.options&&(!this.options.disabled&&this.visible&&v(e,this,this.options.tolerance,i)&&(n=this._drop.call(this,i)||n),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],e.currentItem||e.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,i)))})),n},dragStart:function(e,i){e.element.parentsUntil("body").on("scroll.droppable",(function(){e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)}))},drag:function(e,i){e.options.refreshPositions&&t.ui.ddmanager.prepareOffsets(e,i),t.each(t.ui.ddmanager.droppables[e.options.scope]||[],(function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var n,s,r,a=v(e,this,this.options.tolerance,i),o=!a&&this.isover?"isout":a&&!this.isover?"isover":null;o&&(this.options.greedy&&(s=this.options.scope,(r=this.element.parents(":data(ui-droppable)").filter((function(){return t(this).droppable("instance").options.scope===s}))).length&&((n=t(r[0]).droppable("instance")).greedyChild="isover"===o)),n&&"isover"===o&&(n.isover=!1,n.isout=!0,n._out.call(n,i)),this[o]=!0,this["isout"===o?"isover":"isout"]=!1,this["isover"===o?"_over":"_out"].call(this,i),n&&"isout"===o&&(n.isout=!1,n.isover=!0,n._over.call(n,i)))}}))},dragStop:function(e,i){e.element.parentsUntil("body").off("scroll.droppable"),e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)}},!1!==t.uiBackCompat&&t.widget("ui.droppable",t.ui.droppable,{options:{hoverClass:!1,activeClass:!1},_addActiveClass:function(){this._super(),this.options.activeClass&&this.element.addClass(this.options.activeClass)},_removeActiveClass:function(){this._super(),this.options.activeClass&&this.element.removeClass(this.options.activeClass)},_addHoverClass:function(){this._super(),this.options.hoverClass&&this.element.addClass(this.options.hoverClass)},_removeHoverClass:function(){this._super(),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass)}}),t.ui.droppable,t.widget("ui.progressbar",{version:"1.12.1",options:{classes:{"ui-progressbar":"ui-corner-all","ui-progressbar-value":"ui-corner-left","ui-progressbar-complete":"ui-corner-right"},max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue(),this.element.attr({role:"progressbar","aria-valuemin":this.min}),this._addClass("ui-progressbar","ui-widget ui-widget-content"),this.valueDiv=t("<div>").appendTo(this.element),this._addClass(this.valueDiv,"ui-progressbar-value","ui-widget-header"),this._refreshValue()},_destroy:function(){this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow"),this.valueDiv.remove()},value:function(t){if(void 0===t)return this.options.value;this.options.value=this._constrainedValue(t),this._refreshValue()},_constrainedValue:function(t){return void 0===t&&(t=this.options.value),this.indeterminate=!1===t,"number"!=typeof t&&(t=0),!this.indeterminate&&Math.min(this.options.max,Math.max(this.min,t))},_setOptions:function(t){var e=t.value;delete t.value,this._super(t),this.options.value=this._constrainedValue(e),this._refreshValue()},_setOption:function(t,e){"max"===t&&(e=Math.max(this.min,e)),this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t),this._toggleClass(null,"ui-state-disabled",!!t)},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min)},_refreshValue:function(){var e=this.options.value,i=this._percentage();this.valueDiv.toggle(this.indeterminate||e>this.min).width(i.toFixed(0)+"%"),this._toggleClass(this.valueDiv,"ui-progressbar-complete",null,e===this.options.max)._toggleClass("ui-progressbar-indeterminate",null,this.indeterminate),this.indeterminate?(this.element.removeAttr("aria-valuenow"),this.overlayDiv||(this.overlayDiv=t("<div>").appendTo(this.valueDiv),this._addClass(this.overlayDiv,"ui-progressbar-overlay"))):(this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":e}),this.overlayDiv&&(this.overlayDiv.remove(),this.overlayDiv=null)),this.oldValue!==e&&(this.oldValue=e,this._trigger("change")),e===this.options.max&&this._trigger("complete")}}),t.widget("ui.selectable",t.ui.mouse,{version:"1.12.1",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var e=this;this._addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){e.elementPos=t(e.element[0]).offset(),e.selectees=t(e.options.filter,e.element[0]),e._addClass(e.selectees,"ui-selectee"),e.selectees.each((function(){var i=t(this),n=i.offset(),s={left:n.left-e.elementPos.left,top:n.top-e.elementPos.top};t.data(this,"selectable-item",{element:this,$element:i,left:s.left,top:s.top,right:s.left+i.outerWidth(),bottom:s.top+i.outerHeight(),startselected:!1,selected:i.hasClass("ui-selected"),selecting:i.hasClass("ui-selecting"),unselecting:i.hasClass("ui-unselecting")})}))},this.refresh(),this._mouseInit(),this.helper=t("<div>"),this._addClass(this.helper,"ui-selectable-helper")},_destroy:function(){this.selectees.removeData("selectable-item"),this._mouseDestroy()},_mouseStart:function(e){var i=this,n=this.options;this.opos=[e.pageX,e.pageY],this.elementPos=t(this.element[0]).offset(),this.options.disabled||(this.selectees=t(n.filter,this.element[0]),this._trigger("start",e),t(n.appendTo).append(this.helper),this.helper.css({left:e.pageX,top:e.pageY,width:0,height:0}),n.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each((function(){var n=t.data(this,"selectable-item");n.startselected=!0,e.metaKey||e.ctrlKey||(i._removeClass(n.$element,"ui-selected"),n.selected=!1,i._addClass(n.$element,"ui-unselecting"),n.unselecting=!0,i._trigger("unselecting",e,{unselecting:n.element}))})),t(e.target).parents().addBack().each((function(){var n,s=t.data(this,"selectable-item");if(s)return n=!e.metaKey&&!e.ctrlKey||!s.$element.hasClass("ui-selected"),i._removeClass(s.$element,n?"ui-unselecting":"ui-selected")._addClass(s.$element,n?"ui-selecting":"ui-unselecting"),s.unselecting=!n,s.selecting=n,s.selected=n,n?i._trigger("selecting",e,{selecting:s.element}):i._trigger("unselecting",e,{unselecting:s.element}),!1})))},_mouseDrag:function(e){if(this.dragged=!0,!this.options.disabled){var i,n=this,s=this.options,r=this.opos[0],a=this.opos[1],o=e.pageX,l=e.pageY;return r>o&&(i=o,o=r,r=i),a>l&&(i=l,l=a,a=i),this.helper.css({left:r,top:a,width:o-r,height:l-a}),this.selectees.each((function(){var i=t.data(this,"selectable-item"),u=!1,h={};i&&i.element!==n.element[0]&&(h.left=i.left+n.elementPos.left,h.right=i.right+n.elementPos.left,h.top=i.top+n.elementPos.top,h.bottom=i.bottom+n.elementPos.top,"touch"===s.tolerance?u=!(h.left>o||h.right<r||h.top>l||h.bottom<a):"fit"===s.tolerance&&(u=h.left>r&&h.right<o&&h.top>a&&h.bottom<l),u?(i.selected&&(n._removeClass(i.$element,"ui-selected"),i.selected=!1),i.unselecting&&(n._removeClass(i.$element,"ui-unselecting"),i.unselecting=!1),i.selecting||(n._addClass(i.$element,"ui-selecting"),i.selecting=!0,n._trigger("selecting",e,{selecting:i.element}))):(i.selecting&&((e.metaKey||e.ctrlKey)&&i.startselected?(n._removeClass(i.$element,"ui-selecting"),i.selecting=!1,n._addClass(i.$element,"ui-selected"),i.selected=!0):(n._removeClass(i.$element,"ui-selecting"),i.selecting=!1,i.startselected&&(n._addClass(i.$element,"ui-unselecting"),i.unselecting=!0),n._trigger("unselecting",e,{unselecting:i.element}))),i.selected&&(e.metaKey||e.ctrlKey||i.startselected||(n._removeClass(i.$element,"ui-selected"),i.selected=!1,n._addClass(i.$element,"ui-unselecting"),i.unselecting=!0,n._trigger("unselecting",e,{unselecting:i.element})))))})),!1}},_mouseStop:function(e){var i=this;return this.dragged=!1,t(".ui-unselecting",this.element[0]).each((function(){var n=t.data(this,"selectable-item");i._removeClass(n.$element,"ui-unselecting"),n.unselecting=!1,n.startselected=!1,i._trigger("unselected",e,{unselected:n.element})})),t(".ui-selecting",this.element[0]).each((function(){var n=t.data(this,"selectable-item");i._removeClass(n.$element,"ui-selecting")._addClass(n.$element,"ui-selected"),n.selecting=!1,n.selected=!0,n.startselected=!0,i._trigger("selected",e,{selected:n.element})})),this._trigger("stop",e),this.helper.remove(),!1}}),t.widget("ui.selectmenu",[t.ui.formResetMixin,{version:"1.12.1",defaultElement:"<select>",options:{appendTo:null,classes:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"},disabled:null,icons:{button:"ui-icon-triangle-1-s"},position:{my:"left top",at:"left bottom",collision:"none"},width:!1,change:null,close:null,focus:null,open:null,select:null},_create:function(){var e=this.element.uniqueId().attr("id");this.ids={element:e,button:e+"-button",menu:e+"-menu"},this._drawButton(),this._drawMenu(),this._bindFormResetHandler(),this._rendered=!1,this.menuItems=t()},_drawButton:function(){var e,i=this,n=this._parseOption(this.element.find("option:selected"),this.element[0].selectedIndex);this.labels=this.element.labels().attr("for",this.ids.button),this._on(this.labels,{click:function(t){this.button.focus(),t.preventDefault()}}),this.element.hide(),this.button=t("<span>",{tabindex:this.options.disabled?-1:0,id:this.ids.button,role:"combobox","aria-expanded":"false","aria-autocomplete":"list","aria-owns":this.ids.menu,"aria-haspopup":"true",title:this.element.attr("title")}).insertAfter(this.element),this._addClass(this.button,"ui-selectmenu-button ui-selectmenu-button-closed","ui-button ui-widget"),e=t("<span>").appendTo(this.button),this._addClass(e,"ui-selectmenu-icon","ui-icon "+this.options.icons.button),this.buttonItem=this._renderButtonItem(n).appendTo(this.button),!1!==this.options.width&&this._resizeButton(),this._on(this.button,this._buttonEvents),this.button.one("focusin",(function(){i._rendered||i._refreshMenu()}))},_drawMenu:function(){var e=this;this.menu=t("<ul>",{"aria-hidden":"true","aria-labelledby":this.ids.button,id:this.ids.menu}),this.menuWrap=t("<div>").append(this.menu),this._addClass(this.menuWrap,"ui-selectmenu-menu","ui-front"),this.menuWrap.appendTo(this._appendTo()),this.menuInstance=this.menu.menu({classes:{"ui-menu":"ui-corner-bottom"},role:"listbox",select:function(t,i){t.preventDefault(),e._setSelection(),e._select(i.item.data("ui-selectmenu-item"),t)},focus:function(t,i){var n=i.item.data("ui-selectmenu-item");null!=e.focusIndex&&n.index!==e.focusIndex&&(e._trigger("focus",t,{item:n}),e.isOpen||e._select(n,t)),e.focusIndex=n.index,e.button.attr("aria-activedescendant",e.menuItems.eq(n.index).attr("id"))}}).menu("instance"),this.menuInstance._off(this.menu,"mouseleave"),this.menuInstance._closeOnDocumentClick=function(){return!1},this.menuInstance._isDivider=function(){return!1}},refresh:function(){this._refreshMenu(),this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item")||{})),null===this.options.width&&this._resizeButton()},_refreshMenu:function(){var t,e=this.element.find("option");this.menu.empty(),this._parseOptions(e),this._renderMenu(this.menu,this.items),this.menuInstance.refresh(),this.menuItems=this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper"),this._rendered=!0,e.length&&(t=this._getSelectedItem(),this.menuInstance.focus(null,t),this._setAria(t.data("ui-selectmenu-item")),this._setOption("disabled",this.element.prop("disabled")))},open:function(t){this.options.disabled||(this._rendered?(this._removeClass(this.menu.find(".ui-state-active"),null,"ui-state-active"),this.menuInstance.focus(null,this._getSelectedItem())):this._refreshMenu(),this.menuItems.length&&(this.isOpen=!0,this._toggleAttr(),this._resizeMenu(),this._position(),this._on(this.document,this._documentClick),this._trigger("open",t)))},_position:function(){this.menuWrap.position(t.extend({of:this.button},this.options.position))},close:function(t){this.isOpen&&(this.isOpen=!1,this._toggleAttr(),this.range=null,this._off(this.document),this._trigger("close",t))},widget:function(){return this.button},menuWidget:function(){return this.menu},_renderButtonItem:function(e){var i=t("<span>");return this._setText(i,e.label),this._addClass(i,"ui-selectmenu-text"),i},_renderMenu:function(e,i){var n=this,s="";t.each(i,(function(i,r){var a;r.optgroup!==s&&(a=t("<li>",{text:r.optgroup}),n._addClass(a,"ui-selectmenu-optgroup","ui-menu-divider"+(r.element.parent("optgroup").prop("disabled")?" ui-state-disabled":"")),a.appendTo(e),s=r.optgroup),n._renderItemData(e,r)}))},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-selectmenu-item",e)},_renderItem:function(e,i){var n=t("<li>"),s=t("<div>",{title:i.element.attr("title")});return i.disabled&&this._addClass(n,null,"ui-state-disabled"),this._setText(s,i.label),n.append(s).appendTo(e)},_setText:function(t,e){e?t.text(e):t.html("&#160;")},_move:function(t,e){var i,n,s=".ui-menu-item";this.isOpen?i=this.menuItems.eq(this.focusIndex).parent("li"):(i=this.menuItems.eq(this.element[0].selectedIndex).parent("li"),s+=":not(.ui-state-disabled)"),(n="first"===t||"last"===t?i["first"===t?"prevAll":"nextAll"](s).eq(-1):i[t+"All"](s).eq(0)).length&&this.menuInstance.focus(e,n)},_getSelectedItem:function(){return this.menuItems.eq(this.element[0].selectedIndex).parent("li")},_toggle:function(t){this[this.isOpen?"close":"open"](t)},_setSelection:function(){var t;this.range&&(window.getSelection?((t=window.getSelection()).removeAllRanges(),t.addRange(this.range)):this.range.select(),this.button.focus())},_documentClick:{mousedown:function(e){this.isOpen&&(t(e.target).closest(".ui-selectmenu-menu, #"+t.ui.escapeSelector(this.ids.button)).length||this.close(e))}},_buttonEvents:{mousedown:function(){var t;window.getSelection?(t=window.getSelection()).rangeCount&&(this.range=t.getRangeAt(0)):this.range=document.selection.createRange()},click:function(t){this._setSelection(),this._toggle(t)},keydown:function(e){var i=!0;switch(e.keyCode){case t.ui.keyCode.TAB:case t.ui.keyCode.ESCAPE:this.close(e),i=!1;break;case t.ui.keyCode.ENTER:this.isOpen&&this._selectFocusedItem(e);break;case t.ui.keyCode.UP:e.altKey?this._toggle(e):this._move("prev",e);break;case t.ui.keyCode.DOWN:e.altKey?this._toggle(e):this._move("next",e);break;case t.ui.keyCode.SPACE:this.isOpen?this._selectFocusedItem(e):this._toggle(e);break;case t.ui.keyCode.LEFT:this._move("prev",e);break;case t.ui.keyCode.RIGHT:this._move("next",e);break;case t.ui.keyCode.HOME:case t.ui.keyCode.PAGE_UP:this._move("first",e);break;case t.ui.keyCode.END:case t.ui.keyCode.PAGE_DOWN:this._move("last",e);break;default:this.menu.trigger(e),i=!1}i&&e.preventDefault()}},_selectFocusedItem:function(t){var e=this.menuItems.eq(this.focusIndex).parent("li");e.hasClass("ui-state-disabled")||this._select(e.data("ui-selectmenu-item"),t)},_select:function(t,e){var i=this.element[0].selectedIndex;this.element[0].selectedIndex=t.index,this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(t)),this._setAria(t),this._trigger("select",e,{item:t}),t.index!==i&&this._trigger("change",e,{item:t}),this.close(e)},_setAria:function(t){var e=this.menuItems.eq(t.index).attr("id");this.button.attr({"aria-labelledby":e,"aria-activedescendant":e}),this.menu.attr("aria-activedescendant",e)},_setOption:function(t,e){if("icons"===t){var i=this.button.find("span.ui-icon");this._removeClass(i,null,this.options.icons.button)._addClass(i,null,e.button)}this._super(t,e),"appendTo"===t&&this.menuWrap.appendTo(this._appendTo()),"width"===t&&this._resizeButton()},_setOptionDisabled:function(t){this._super(t),this.menuInstance.option("disabled",t),this.button.attr("aria-disabled",t),this._toggleClass(this.button,null,"ui-state-disabled",t),this.element.prop("disabled",t),t?(this.button.attr("tabindex",-1),this.close()):this.button.attr("tabindex",0)},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e&&e[0]||(e=this.element.closest(".ui-front, dialog")),e.length||(e=this.document[0].body),e},_toggleAttr:function(){this.button.attr("aria-expanded",this.isOpen),this._removeClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"closed":"open"))._addClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"open":"closed"))._toggleClass(this.menuWrap,"ui-selectmenu-open",null,this.isOpen),this.menu.attr("aria-hidden",!this.isOpen)},_resizeButton:function(){var t=this.options.width;!1!==t?(null===t&&(t=this.element.show().outerWidth(),this.element.hide()),this.button.outerWidth(t)):this.button.css("width","")},_resizeMenu:function(){this.menu.outerWidth(Math.max(this.button.outerWidth(),this.menu.width("").outerWidth()+1))},_getCreateOptions:function(){var t=this._super();return t.disabled=this.element.prop("disabled"),t},_parseOptions:function(e){var i=this,n=[];e.each((function(e,s){n.push(i._parseOption(t(s),e))})),this.items=n},_parseOption:function(t,e){var i=t.parent("optgroup");return{element:t,index:e,value:t.val(),label:t.text(),optgroup:i.attr("label")||"",disabled:i.prop("disabled")||t.prop("disabled")}},_destroy:function(){this._unbindFormResetHandler(),this.menuWrap.remove(),this.button.remove(),this.element.show(),this.element.removeUniqueId(),this.labels.attr("for",this.ids.element)}}]),t.widget("ui.slider",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"slide",options:{animate:!1,classes:{"ui-slider":"ui-corner-all","ui-slider-handle":"ui-corner-all","ui-slider-range":"ui-corner-all ui-widget-header"},distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},numPages:5,_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this._calculateNewMax(),this._addClass("ui-slider ui-slider-"+this.orientation,"ui-widget ui-widget-content"),this._refresh(),this._animateOff=!1},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var e,i,n=this.options,s=this.element.find(".ui-slider-handle"),r=[];for(i=n.values&&n.values.length||1,s.length>i&&(s.slice(i).remove(),s=s.slice(0,i)),e=s.length;e<i;e++)r.push("<span tabindex='0'></span>");this.handles=s.add(t(r.join("")).appendTo(this.element)),this._addClass(this.handles,"ui-slider-handle","ui-state-default"),this.handle=this.handles.eq(0),this.handles.each((function(e){t(this).data("ui-slider-handle-index",e).attr("tabIndex",0)}))},_createRange:function(){var e=this.options;e.range?(!0===e.range&&(e.values?e.values.length&&2!==e.values.length?e.values=[e.values[0],e.values[0]]:t.isArray(e.values)&&(e.values=e.values.slice(0)):e.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?(this._removeClass(this.range,"ui-slider-range-min ui-slider-range-max"),this.range.css({left:"",bottom:""})):(this.range=t("<div>").appendTo(this.element),this._addClass(this.range,"ui-slider-range")),"min"!==e.range&&"max"!==e.range||this._addClass(this.range,"ui-slider-range-"+e.range)):(this.range&&this.range.remove(),this.range=null)},_setupEvents:function(){this._off(this.handles),this._on(this.handles,this._handleEvents),this._hoverable(this.handles),this._focusable(this.handles)},_destroy:function(){this.handles.remove(),this.range&&this.range.remove(),this._mouseDestroy()},_mouseCapture:function(e){var i,n,s,r,a,o,l,u=this,h=this.options;return!h.disabled&&(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),i={x:e.pageX,y:e.pageY},n=this._normValueFromMouse(i),s=this._valueMax()-this._valueMin()+1,this.handles.each((function(e){var i=Math.abs(n-u.values(e));(s>i||s===i&&(e===u._lastChangedValue||u.values(e)===h.min))&&(s=i,r=t(this),a=e)})),!1!==this._start(e,a)&&(this._mouseSliding=!0,this._handleIndex=a,this._addClass(r,null,"ui-state-active"),r.trigger("focus"),o=r.offset(),l=!t(e.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=l?{left:0,top:0}:{left:e.pageX-o.left-r.width()/2,top:e.pageY-o.top-r.height()/2-(parseInt(r.css("borderTopWidth"),10)||0)-(parseInt(r.css("borderBottomWidth"),10)||0)+(parseInt(r.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(e,a,n),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(t){var e={x:t.pageX,y:t.pageY},i=this._normValueFromMouse(e);return this._slide(t,this._handleIndex,i),!1},_mouseStop:function(t){return this._removeClass(this.handles,null,"ui-state-active"),this._mouseSliding=!1,this._stop(t,this._handleIndex),this._change(t,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(t){var e,i,n,s,r;return"horizontal"===this.orientation?(e=this.elementSize.width,i=t.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(e=this.elementSize.height,i=t.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),(n=i/e)>1&&(n=1),n<0&&(n=0),"vertical"===this.orientation&&(n=1-n),s=this._valueMax()-this._valueMin(),r=this._valueMin()+n*s,this._trimAlignValue(r)},_uiHash:function(t,e,i){var n={handle:this.handles[t],handleIndex:t,value:void 0!==e?e:this.value()};return this._hasMultipleValues()&&(n.value=void 0!==e?e:this.values(t),n.values=i||this.values()),n},_hasMultipleValues:function(){return this.options.values&&this.options.values.length},_start:function(t,e){return this._trigger("start",t,this._uiHash(e))},_slide:function(t,e,i){var n,s=this.value(),r=this.values();this._hasMultipleValues()&&(n=this.values(e?0:1),s=this.values(e),2===this.options.values.length&&!0===this.options.range&&(i=0===e?Math.min(n,i):Math.max(n,i)),r[e]=i),i!==s&&!1!==this._trigger("slide",t,this._uiHash(e,i,r))&&(this._hasMultipleValues()?this.values(e,i):this.value(i))},_stop:function(t,e){this._trigger("stop",t,this._uiHash(e))},_change:function(t,e){this._keySliding||this._mouseSliding||(this._lastChangedValue=e,this._trigger("change",t,this._uiHash(e)))},value:function(t){return arguments.length?(this.options.value=this._trimAlignValue(t),this._refreshValue(),void this._change(null,0)):this._value()},values:function(e,i){var n,s,r;if(arguments.length>1)return this.options.values[e]=this._trimAlignValue(i),this._refreshValue(),void this._change(null,e);if(!arguments.length)return this._values();if(!t.isArray(arguments[0]))return this._hasMultipleValues()?this._values(e):this.value();for(n=this.options.values,s=arguments[0],r=0;r<n.length;r+=1)n[r]=this._trimAlignValue(s[r]),this._change(null,r);this._refreshValue()},_setOption:function(e,i){var n,s=0;switch("range"===e&&!0===this.options.range&&("min"===i?(this.options.value=this._values(0),this.options.values=null):"max"===i&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),t.isArray(this.options.values)&&(s=this.options.values.length),this._super(e,i),e){case"orientation":this._detectOrientation(),this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-"+this.orientation),this._refreshValue(),this.options.range&&this._refreshRange(i),this.handles.css("horizontal"===i?"bottom":"left","");break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),n=s-1;n>=0;n--)this._change(null,n);this._animateOff=!1;break;case"step":case"min":case"max":this._animateOff=!0,this._calculateNewMax(),this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_setOptionDisabled:function(t){this._super(t),this._toggleClass(null,"ui-state-disabled",!!t)},_value:function(){var t=this.options.value;return t=this._trimAlignValue(t)},_values:function(t){var e,i,n;if(arguments.length)return e=this.options.values[t],e=this._trimAlignValue(e);if(this._hasMultipleValues()){for(i=this.options.values.slice(),n=0;n<i.length;n+=1)i[n]=this._trimAlignValue(i[n]);return i}return[]},_trimAlignValue:function(t){if(t<=this._valueMin())return this._valueMin();if(t>=this._valueMax())return this._valueMax();var e=this.options.step>0?this.options.step:1,i=(t-this._valueMin())%e,n=t-i;return 2*Math.abs(i)>=e&&(n+=i>0?e:-e),parseFloat(n.toFixed(5))},_calculateNewMax:function(){var t=this.options.max,e=this._valueMin(),i=this.options.step;(t=Math.round((t-e)/i)*i+e)>this.options.max&&(t-=i),this.max=parseFloat(t.toFixed(this._precision()))},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=t.toString(),i=e.indexOf(".");return-1===i?0:e.length-i-1},_valueMin:function(){return this.options.min},_valueMax:function(){return this.max},_refreshRange:function(t){"vertical"===t&&this.range.css({width:"",left:""}),"horizontal"===t&&this.range.css({height:"",bottom:""})},_refreshValue:function(){var e,i,n,s,r,a=this.options.range,o=this.options,l=this,u=!this._animateOff&&o.animate,h={};this._hasMultipleValues()?this.handles.each((function(n){i=(l.values(n)-l._valueMin())/(l._valueMax()-l._valueMin())*100,h["horizontal"===l.orientation?"left":"bottom"]=i+"%",t(this).stop(1,1)[u?"animate":"css"](h,o.animate),!0===l.options.range&&("horizontal"===l.orientation?(0===n&&l.range.stop(1,1)[u?"animate":"css"]({left:i+"%"},o.animate),1===n&&l.range[u?"animate":"css"]({width:i-e+"%"},{queue:!1,duration:o.animate})):(0===n&&l.range.stop(1,1)[u?"animate":"css"]({bottom:i+"%"},o.animate),1===n&&l.range[u?"animate":"css"]({height:i-e+"%"},{queue:!1,duration:o.animate}))),e=i})):(n=this.value(),s=this._valueMin(),r=this._valueMax(),i=r!==s?(n-s)/(r-s)*100:0,h["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[u?"animate":"css"](h,o.animate),"min"===a&&"horizontal"===this.orientation&&this.range.stop(1,1)[u?"animate":"css"]({width:i+"%"},o.animate),"max"===a&&"horizontal"===this.orientation&&this.range.stop(1,1)[u?"animate":"css"]({width:100-i+"%"},o.animate),"min"===a&&"vertical"===this.orientation&&this.range.stop(1,1)[u?"animate":"css"]({height:i+"%"},o.animate),"max"===a&&"vertical"===this.orientation&&this.range.stop(1,1)[u?"animate":"css"]({height:100-i+"%"},o.animate))},_handleEvents:{keydown:function(e){var i,n,s,r=t(e.target).data("ui-slider-handle-index");switch(e.keyCode){case t.ui.keyCode.HOME:case t.ui.keyCode.END:case t.ui.keyCode.PAGE_UP:case t.ui.keyCode.PAGE_DOWN:case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(e.preventDefault(),!this._keySliding&&(this._keySliding=!0,this._addClass(t(e.target),null,"ui-state-active"),!1===this._start(e,r)))return}switch(s=this.options.step,i=n=this._hasMultipleValues()?this.values(r):this.value(),e.keyCode){case t.ui.keyCode.HOME:n=this._valueMin();break;case t.ui.keyCode.END:n=this._valueMax();break;case t.ui.keyCode.PAGE_UP:n=this._trimAlignValue(i+(this._valueMax()-this._valueMin())/this.numPages);break;case t.ui.keyCode.PAGE_DOWN:n=this._trimAlignValue(i-(this._valueMax()-this._valueMin())/this.numPages);break;case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:if(i===this._valueMax())return;n=this._trimAlignValue(i+s);break;case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(i===this._valueMin())return;n=this._trimAlignValue(i-s)}this._slide(e,r,n)},keyup:function(e){var i=t(e.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(e,i),this._change(e,i),this._removeClass(t(e.target),null,"ui-state-active"))}}}),t.widget("ui.sortable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(t,e,i){return t>=e&&t<e+i},_isFloating:function(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))},_create:function(){this.containerCache={},this._addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(t,e){this._super(t,e),"handle"===t&&this._setHandleClassName()},_setHandleClassName:function(){var e=this;this._removeClass(this.element.find(".ui-sortable-handle"),"ui-sortable-handle"),t.each(this.items,(function(){e._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,"ui-sortable-handle")}))},_destroy:function(){this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(e,i){var n=null,s=!1,r=this;return!(this.reverting||this.options.disabled||"static"===this.options.type||(this._refreshItems(e),t(e.target).parents().each((function(){if(t.data(this,r.widgetName+"-item")===r)return n=t(this),!1})),t.data(e.target,r.widgetName+"-item")===r&&(n=t(e.target)),!n||this.options.handle&&!i&&(t(this.options.handle,n).find("*").addBack().each((function(){this===e.target&&(s=!0)})),!s)||(this.currentItem=n,this._removeCurrentsFromItems(),0)))},_mouseStart:function(e,i,n){var s,r,a=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,a.cursorAt&&this._adjustOffsetFromHelper(a.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),a.containment&&this._setContainment(),a.cursor&&"auto"!==a.cursor&&(r=this.document.find("body"),this.storedCursor=r.css("cursor"),r.css("cursor",a.cursor),this.storedStylesheet=t("<style>*{ cursor: "+a.cursor+" !important; }</style>").appendTo(r)),a.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",a.opacity)),a.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",a.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!n)for(s=this.containers.length-1;s>=0;s--)this.containers[s]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this._addClass(this.helper,"ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,n,s,r,a=this.options,o=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<a.scrollSensitivity?this.scrollParent[0].scrollTop=o=this.scrollParent[0].scrollTop+a.scrollSpeed:e.pageY-this.overflowOffset.top<a.scrollSensitivity&&(this.scrollParent[0].scrollTop=o=this.scrollParent[0].scrollTop-a.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<a.scrollSensitivity?this.scrollParent[0].scrollLeft=o=this.scrollParent[0].scrollLeft+a.scrollSpeed:e.pageX-this.overflowOffset.left<a.scrollSensitivity&&(this.scrollParent[0].scrollLeft=o=this.scrollParent[0].scrollLeft-a.scrollSpeed)):(e.pageY-this.document.scrollTop()<a.scrollSensitivity?o=this.document.scrollTop(this.document.scrollTop()-a.scrollSpeed):this.window.height()-(e.pageY-this.document.scrollTop())<a.scrollSensitivity&&(o=this.document.scrollTop(this.document.scrollTop()+a.scrollSpeed)),e.pageX-this.document.scrollLeft()<a.scrollSensitivity?o=this.document.scrollLeft(this.document.scrollLeft()-a.scrollSpeed):this.window.width()-(e.pageX-this.document.scrollLeft())<a.scrollSensitivity&&(o=this.document.scrollLeft(this.document.scrollLeft()+a.scrollSpeed))),!1!==o&&t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=(n=this.items[i]).item[0],(r=this._intersectsWithPointer(n))&&n.instance===this.currentContainer&&!(s===this.currentItem[0]||this.placeholder[1===r?"next":"prev"]()[0]===s||t.contains(this.placeholder[0],s)||"semi-dynamic"===this.options.type&&t.contains(this.element[0],s))){if(this.direction=1===r?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(n))break;this._rearrange(e,n),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if(e){if(t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var n=this,s=this.placeholder.offset(),r=this.options.axis,a={};r&&"x"!==r||(a.left=s.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),r&&"y"!==r||(a.top=s.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(a,parseInt(this.options.revert,10)||500,(function(){n._clear(e)}))}else this._clear(e,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp(new t.Event("mouseup",{target:null})),"original"===this.options.helper?(this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),n=[];return e=e||{},t(i).each((function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&n.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))})),!n.length&&e.key&&n.push(e.key+"="),n.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),n=[];return e=e||{},i.each((function(){n.push(t(e.item||this).attr(e.attribute||"id")||"")})),n},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,n=this.positionAbs.top,s=n+this.helperProportions.height,r=t.left,a=r+t.width,o=t.top,l=o+t.height,u=this.offset.click.top,h=this.offset.click.left,c="x"===this.options.axis||n+u>o&&n+u<l,d="y"===this.options.axis||e+h>r&&e+h<a,p=c&&d;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?p:r<e+this.helperProportions.width/2&&i-this.helperProportions.width/2<a&&o<n+this.helperProportions.height/2&&s-this.helperProportions.height/2<l},_intersectsWithPointer:function(t){var e,i,n="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top,t.height),s="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left,t.width);return!(!n||!s)&&(e=this._getDragVerticalDirection(),i=this._getDragHorizontalDirection(),this.floating?"right"===i||"down"===e?2:1:e&&("down"===e?2:1))},_intersectsWithSides:function(t){var e=this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),n=this._getDragVerticalDirection(),s=this._getDragHorizontalDirection();return this.floating&&s?"right"===s&&i||"left"===s&&!i:n&&("down"===n&&e||"up"===n&&!e)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){var i,n,s,r,a=[],o=[],l=this._connectWith();if(l&&e)for(i=l.length-1;i>=0;i--)for(n=(s=t(l[i],this.document[0])).length-1;n>=0;n--)(r=t.data(s[n],this.widgetFullName))&&r!==this&&!r.options.disabled&&o.push([t.isFunction(r.options.items)?r.options.items.call(r.element):t(r.options.items,r.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),r]);function u(){a.push(this)}for(o.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),i=o.length-1;i>=0;i--)o[i][0].each(u);return t(a)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,(function(t){for(var i=0;i<e.length;i++)if(e[i]===t.item[0])return!1;return!0}))},_refreshItems:function(e){this.items=[],this.containers=[this];var i,n,s,r,a,o,l,u,h=this.items,c=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],d=this._connectWith();if(d&&this.ready)for(i=d.length-1;i>=0;i--)for(n=(s=t(d[i],this.document[0])).length-1;n>=0;n--)(r=t.data(s[n],this.widgetFullName))&&r!==this&&!r.options.disabled&&(c.push([t.isFunction(r.options.items)?r.options.items.call(r.element[0],e,{item:this.currentItem}):t(r.options.items,r.element),r]),this.containers.push(r));for(i=c.length-1;i>=0;i--)for(a=c[i][1],n=0,u=(o=c[i][0]).length;n<u;n++)(l=t(o[n])).data(this.widgetName+"-item",a),h.push({item:l,instance:a,width:0,height:0,left:0,top:0})},refreshPositions:function(e){var i,n,s,r;for(this.floating=!!this.items.length&&("x"===this.options.axis||this._isFloating(this.items[0].item)),this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset()),i=this.items.length-1;i>=0;i--)(n=this.items[i]).instance!==this.currentContainer&&this.currentContainer&&n.item[0]!==this.currentItem[0]||(s=this.options.toleranceElement?t(this.options.toleranceElement,n.item):n.item,e||(n.width=s.outerWidth(),n.height=s.outerHeight()),r=s.offset(),n.left=r.left,n.top=r.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)r=this.containers[i].element.offset(),this.containers[i].containerCache.left=r.left,this.containers[i].containerCache.top=r.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){var i,n=(e=e||this).options;n.placeholder&&n.placeholder.constructor!==String||(i=n.placeholder,n.placeholder={element:function(){var n=e.currentItem[0].nodeName.toLowerCase(),s=t("<"+n+">",e.document[0]);return e._addClass(s,"ui-sortable-placeholder",i||e.currentItem[0].className)._removeClass(s,"ui-sortable-helper"),"tbody"===n?e._createTrPlaceholder(e.currentItem.find("tr").eq(0),t("<tr>",e.document[0]).appendTo(s)):"tr"===n?e._createTrPlaceholder(e.currentItem,s):"img"===n&&s.attr("src",e.currentItem.attr("src")),i||s.css("visibility","hidden"),s},update:function(t,s){i&&!n.forcePlaceholderSize||(s.height()||s.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),s.width()||s.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(n.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),n.placeholder.update(e,e.placeholder)},_createTrPlaceholder:function(e,i){var n=this;e.children().each((function(){t("<td>&#160;</td>",n.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(i)}))},_contactContainers:function(e){var i,n,s,r,a,o,l,u,h,c,d=null,p=null;for(i=this.containers.length-1;i>=0;i--)if(!t.contains(this.currentItem[0],this.containers[i].element[0]))if(this._intersectsWith(this.containers[i].containerCache)){if(d&&t.contains(this.containers[i].element[0],d.element[0]))continue;d=this.containers[i],p=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",e,this._uiHash(this)),this.containers[i].containerCache.over=0);if(d)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(s=1e4,r=null,a=(h=d.floating||this._isFloating(this.currentItem))?"left":"top",o=h?"width":"height",c=h?"pageX":"pageY",n=this.items.length-1;n>=0;n--)t.contains(this.containers[p].element[0],this.items[n].item[0])&&this.items[n].item[0]!==this.currentItem[0]&&(l=this.items[n].item.offset()[a],u=!1,e[c]-l>this.items[n][o]/2&&(u=!0),Math.abs(e[c]-l)<s&&(s=Math.abs(e[c]-l),r=this.items[n],this.direction=u?"up":"down"));if(!r&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return void(this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash()),this.currentContainer.containerCache.over=1));r?this._rearrange(e,r,null,!0):this._rearrange(e,null,this.containers[p].element,!0),this._trigger("change",e,this._uiHash()),this.containers[p]._trigger("change",e,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(e){var i=this.options,n=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return n.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(n[0]),n[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),n[0].style.width&&!i.forceHelperSize||n.width(this.currentItem.width()),n[0].style.height&&!i.forceHelperSize||n.height(this.currentItem.height()),n},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,n,s=this.options;"parent"===s.containment&&(s.containment=this.helper[0].parentNode),"document"!==s.containment&&"window"!==s.containment||(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===s.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===s.containment?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(s.containment)||(e=t(s.containment)[0],i=t(s.containment).offset(),n="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(n?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(n?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,i){i||(i=this.position);var n="absolute"===e?1:-1,s="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,r=/(html|body)/i.test(s[0].tagName);return{top:i.top+this.offset.relative.top*n+this.offset.parent.top*n-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():r?0:s.scrollTop())*n,left:i.left+this.offset.relative.left*n+this.offset.parent.left*n-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():r?0:s.scrollLeft())*n}},_generatePosition:function(e){var i,n,s=this.options,r=e.pageX,a=e.pageY,o="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=/(html|body)/i.test(o[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(r=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(a=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(r=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(a=this.containment[3]+this.offset.click.top)),s.grid&&(i=this.originalPageY+Math.round((a-this.originalPageY)/s.grid[1])*s.grid[1],a=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-s.grid[1]:i+s.grid[1]:i,n=this.originalPageX+Math.round((r-this.originalPageX)/s.grid[0])*s.grid[0],r=this.containment?n-this.offset.click.left>=this.containment[0]&&n-this.offset.click.left<=this.containment[2]?n:n-this.offset.click.left>=this.containment[0]?n-s.grid[0]:n+s.grid[0]:n)),{top:a-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():l?0:o.scrollTop()),left:r-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():l?0:o.scrollLeft())}},_rearrange:function(t,e,i,n){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var s=this.counter;this._delay((function(){s===this.counter&&this.refreshPositions(!n)}))},_clear:function(t,e){this.reverting=!1;var i,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(i in this._storedCSS)"auto"!==this._storedCSS[i]&&"static"!==this._storedCSS[i]||(this._storedCSS[i]="");this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")}else this.currentItem.show();function s(t,e,i){return function(n){i._trigger(t,n,e._uiHash(e))}}for(this.fromOutside&&!e&&n.push((function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))})),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||n.push((function(t){this._trigger("update",t,this._uiHash())})),this!==this.currentContainer&&(e||(n.push((function(t){this._trigger("remove",t,this._uiHash())})),n.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),i=this.containers.length-1;i>=0;i--)e||n.push(s("deactivate",this,this.containers[i])),this.containers[i].containerCache.over&&(n.push(s("out",this,this.containers[i])),this.containers[i].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!e){for(i=0;i<n.length;i++)n[i].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){!1===t.Widget.prototype._trigger.apply(this,arguments)&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}}),t.widget("ui.spinner",{version:"1.12.1",defaultElement:"<input>",widgetEventPrefix:"spin",options:{classes:{"ui-spinner":"ui-corner-all","ui-spinner-down":"ui-corner-br","ui-spinner-up":"ui-corner-tr"},culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),""!==this.value()&&this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var e=this._super(),i=this.element;return t.each(["min","max","step"],(function(t,n){var s=i.attr(n);null!=s&&s.length&&(e[n]=s)})),e},_events:{keydown:function(t){this._start(t)&&this._keydown(t)&&t.preventDefault()},keyup:"_stop",focus:function(){this.previous=this.element.val()},blur:function(t){this.cancelBlur?delete this.cancelBlur:(this._stop(),this._refresh(),this.previous!==this.element.val()&&this._trigger("change",t))},mousewheel:function(t,e){if(e){if(!this.spinning&&!this._start(t))return!1;this._spin((e>0?1:-1)*this.options.step,t),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay((function(){this.spinning&&this._stop(t)}),100),t.preventDefault()}},"mousedown .ui-spinner-button":function(e){var i;function n(){this.element[0]===t.ui.safeActiveElement(this.document[0])||(this.element.trigger("focus"),this.previous=i,this._delay((function(){this.previous=i})))}i=this.element[0]===t.ui.safeActiveElement(this.document[0])?this.previous:this.element.val(),e.preventDefault(),n.call(this),this.cancelBlur=!0,this._delay((function(){delete this.cancelBlur,n.call(this)})),!1!==this._start(e)&&this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(e){if(t(e.currentTarget).hasClass("ui-state-active"))return!1!==this._start(e)&&void this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e)},"mouseleave .ui-spinner-button":"_stop"},_enhance:function(){this.uiSpinner=this.element.attr("autocomplete","off").wrap("<span>").parent().append("<a></a><a></a>")},_draw:function(){this._enhance(),this._addClass(this.uiSpinner,"ui-spinner","ui-widget ui-widget-content"),this._addClass("ui-spinner-input"),this.element.attr("role","spinbutton"),this.buttons=this.uiSpinner.children("a").attr("tabIndex",-1).attr("aria-hidden",!0).button({classes:{"ui-button":""}}),this._removeClass(this.buttons,"ui-corner-all"),this._addClass(this.buttons.first(),"ui-spinner-button ui-spinner-up"),this._addClass(this.buttons.last(),"ui-spinner-button ui-spinner-down"),this.buttons.first().button({icon:this.options.icons.up,showLabel:!1}),this.buttons.last().button({icon:this.options.icons.down,showLabel:!1}),this.buttons.height()>Math.ceil(.5*this.uiSpinner.height())&&this.uiSpinner.height()>0&&this.uiSpinner.height(this.uiSpinner.height())},_keydown:function(e){var i=this.options,n=t.ui.keyCode;switch(e.keyCode){case n.UP:return this._repeat(null,1,e),!0;case n.DOWN:return this._repeat(null,-1,e),!0;case n.PAGE_UP:return this._repeat(null,i.page,e),!0;case n.PAGE_DOWN:return this._repeat(null,-i.page,e),!0}return!1},_start:function(t){return!(!this.spinning&&!1===this._trigger("start",t)||(this.counter||(this.counter=1),this.spinning=!0,0))},_repeat:function(t,e,i){t=t||500,clearTimeout(this.timer),this.timer=this._delay((function(){this._repeat(40,e,i)}),t),this._spin(e*this.options.step,i)},_spin:function(t,e){var i=this.value()||0;this.counter||(this.counter=1),i=this._adjustValue(i+t*this._increment(this.counter)),this.spinning&&!1===this._trigger("spin",e,{value:i})||(this._value(i),this.counter++)},_increment:function(e){var i=this.options.incremental;return i?t.isFunction(i)?i(e):Math.floor(e*e*e/5e4-e*e/500+17*e/200+1):1},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=t.toString(),i=e.indexOf(".");return-1===i?0:e.length-i-1},_adjustValue:function(t){var e,i,n=this.options;return i=t-(e=null!==n.min?n.min:0),t=e+(i=Math.round(i/n.step)*n.step),t=parseFloat(t.toFixed(this._precision())),null!==n.max&&t>n.max?n.max:null!==n.min&&t<n.min?n.min:t},_stop:function(t){this.spinning&&(clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",t))},_setOption:function(t,e){var i,n,s;if("culture"===t||"numberFormat"===t)return i=this._parse(this.element.val()),this.options[t]=e,void this.element.val(this._format(i));"max"!==t&&"min"!==t&&"step"!==t||"string"==typeof e&&(e=this._parse(e)),"icons"===t&&(n=this.buttons.first().find(".ui-icon"),this._removeClass(n,null,this.options.icons.up),this._addClass(n,null,e.up),s=this.buttons.last().find(".ui-icon"),this._removeClass(s,null,this.options.icons.down),this._addClass(s,null,e.down)),this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this._toggleClass(this.uiSpinner,null,"ui-state-disabled",!!t),this.element.prop("disabled",!!t),this.buttons.button(t?"disable":"enable")},_setOptions:b((function(t){this._super(t)})),_parse:function(t){return"string"==typeof t&&""!==t&&(t=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(t,10,this.options.culture):+t),""===t||isNaN(t)?null:t},_format:function(t){return""===t?"":window.Globalize&&this.options.numberFormat?Globalize.format(t,this.options.numberFormat,this.options.culture):t},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},isValid:function(){var t=this.value();return null!==t&&t===this._adjustValue(t)},_value:function(t,e){var i;""!==t&&null!==(i=this._parse(t))&&(e||(i=this._adjustValue(i)),t=this._format(i)),this.element.val(t),this._refresh()},_destroy:function(){this.element.prop("disabled",!1).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:b((function(t){this._stepUp(t)})),_stepUp:function(t){this._start()&&(this._spin((t||1)*this.options.step),this._stop())},stepDown:b((function(t){this._stepDown(t)})),_stepDown:function(t){this._start()&&(this._spin((t||1)*-this.options.step),this._stop())},pageUp:b((function(t){this._stepUp((t||1)*this.options.page)})),pageDown:b((function(t){this._stepDown((t||1)*this.options.page)})),value:function(t){if(!arguments.length)return this._parse(this.element.val());b(this._value).call(this,t)},widget:function(){return this.uiSpinner}}),!1!==t.uiBackCompat&&t.widget("ui.spinner",t.ui.spinner,{_enhance:function(){this.uiSpinner=this.element.attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml())},_uiSpinnerHtml:function(){return"<span>"},_buttonHtml:function(){return"<a></a><a></a>"}}),t.ui.spinner,
/*!
 * jQuery UI Tabs 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
t.widget("ui.tabs",{version:"1.12.1",delay:300,options:{active:null,classes:{"ui-tabs":"ui-corner-all","ui-tabs-nav":"ui-corner-all","ui-tabs-panel":"ui-corner-bottom","ui-tabs-tab":"ui-corner-top"},collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_isLocal:(m=/#.*$/,function(t){var e,i;e=t.href.replace(m,""),i=location.href.replace(m,"");try{e=decodeURIComponent(e)}catch(t){}try{i=decodeURIComponent(i)}catch(t){}return t.hash.length>1&&e===i}),_create:function(){var e=this,i=this.options;this.running=!1,this._addClass("ui-tabs","ui-widget ui-widget-content"),this._toggleClass("ui-tabs-collapsible",null,i.collapsible),this._processTabs(),i.active=this._initialActive(),t.isArray(i.disabled)&&(i.disabled=t.unique(i.disabled.concat(t.map(this.tabs.filter(".ui-state-disabled"),(function(t){return e.tabs.index(t)})))).sort()),!1!==this.options.active&&this.anchors.length?this.active=this._findActive(i.active):this.active=t(),this._refresh(),this.active.length&&this.load(i.active)},_initialActive:function(){var e=this.options.active,i=this.options.collapsible,n=location.hash.substring(1);return null===e&&(n&&this.tabs.each((function(i,s){if(t(s).attr("aria-controls")===n)return e=i,!1})),null===e&&(e=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),null!==e&&-1!==e||(e=!!this.tabs.length&&0)),!1!==e&&-1===(e=this.tabs.index(this.tabs.eq(e)))&&(e=!i&&0),!i&&!1===e&&this.anchors.length&&(e=0),e},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):t()}},_tabKeydown:function(e){var i=t(t.ui.safeActiveElement(this.document[0])).closest("li"),n=this.tabs.index(i),s=!0;if(!this._handlePageNav(e)){switch(e.keyCode){case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:n++;break;case t.ui.keyCode.UP:case t.ui.keyCode.LEFT:s=!1,n--;break;case t.ui.keyCode.END:n=this.anchors.length-1;break;case t.ui.keyCode.HOME:n=0;break;case t.ui.keyCode.SPACE:return e.preventDefault(),clearTimeout(this.activating),void this._activate(n);case t.ui.keyCode.ENTER:return e.preventDefault(),clearTimeout(this.activating),void this._activate(n!==this.options.active&&n);default:return}e.preventDefault(),clearTimeout(this.activating),n=this._focusNextTab(n,s),e.ctrlKey||e.metaKey||(i.attr("aria-selected","false"),this.tabs.eq(n).attr("aria-selected","true"),this.activating=this._delay((function(){this.option("active",n)}),this.delay))}},_panelKeydown:function(e){this._handlePageNav(e)||e.ctrlKey&&e.keyCode===t.ui.keyCode.UP&&(e.preventDefault(),this.active.trigger("focus"))},_handlePageNav:function(e){return e.altKey&&e.keyCode===t.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):e.altKey&&e.keyCode===t.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):void 0},_findNextTab:function(e,i){for(var n=this.tabs.length-1;-1!==t.inArray((e>n&&(e=0),e<0&&(e=n),e),this.options.disabled);)e=i?e+1:e-1;return e},_focusNextTab:function(t,e){return t=this._findNextTab(t,e),this.tabs.eq(t).trigger("focus"),t},_setOption:function(t,e){"active"!==t?(this._super(t,e),"collapsible"===t&&(this._toggleClass("ui-tabs-collapsible",null,e),e||!1!==this.options.active||this._activate(0)),"event"===t&&this._setupEvents(e),"heightStyle"===t&&this._setupHeightStyle(e)):this._activate(e)},_sanitizeSelector:function(t){return t?t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var e=this.options,i=this.tablist.children(":has(a[href])");e.disabled=t.map(i.filter(".ui-state-disabled"),(function(t){return i.index(t)})),this._processTabs(),!1!==e.active&&this.anchors.length?this.active.length&&!t.contains(this.tablist[0],this.active[0])?this.tabs.length===e.disabled.length?(e.active=!1,this.active=t()):this._activate(this._findNextTab(Math.max(0,e.active-1),!1)):e.active=this.tabs.index(this.active):(e.active=!1,this.active=t()),this._refresh()},_refresh:function(){this._setOptionDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-hidden":"true"}),this.active.length?(this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}),this._addClass(this.active,"ui-tabs-active","ui-state-active"),this._getPanelForTab(this.active).show().attr({"aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var e=this,i=this.tabs,n=this.anchors,s=this.panels;this.tablist=this._getList().attr("role","tablist"),this._addClass(this.tablist,"ui-tabs-nav","ui-helper-reset ui-helper-clearfix ui-widget-header"),this.tablist.on("mousedown"+this.eventNamespace,"> li",(function(e){t(this).is(".ui-state-disabled")&&e.preventDefault()})).on("focus"+this.eventNamespace,".ui-tabs-anchor",(function(){t(this).closest("li").is(".ui-state-disabled")&&this.blur()})),this.tabs=this.tablist.find("> li:has(a[href])").attr({role:"tab",tabIndex:-1}),this._addClass(this.tabs,"ui-tabs-tab","ui-state-default"),this.anchors=this.tabs.map((function(){return t("a",this)[0]})).attr({role:"presentation",tabIndex:-1}),this._addClass(this.anchors,"ui-tabs-anchor"),this.panels=t(),this.anchors.each((function(i,n){var s,r,a,o=t(n).uniqueId().attr("id"),l=t(n).closest("li"),u=l.attr("aria-controls");e._isLocal(n)?(a=(s=n.hash).substring(1),r=e.element.find(e._sanitizeSelector(s))):(s="#"+(a=l.attr("aria-controls")||t({}).uniqueId()[0].id),(r=e.element.find(s)).length||(r=e._createPanel(a)).insertAfter(e.panels[i-1]||e.tablist),r.attr("aria-live","polite")),r.length&&(e.panels=e.panels.add(r)),u&&l.data("ui-tabs-aria-controls",u),l.attr({"aria-controls":a,"aria-labelledby":o}),r.attr("aria-labelledby",o)})),this.panels.attr("role","tabpanel"),this._addClass(this.panels,"ui-tabs-panel","ui-widget-content"),i&&(this._off(i.not(this.tabs)),this._off(n.not(this.anchors)),this._off(s.not(this.panels)))},_getList:function(){return this.tablist||this.element.find("ol, ul").eq(0)},_createPanel:function(e){return t("<div>").attr("id",e).data("ui-tabs-destroy",!0)},_setOptionDisabled:function(e){var i,n,s;for(t.isArray(e)&&(e.length?e.length===this.anchors.length&&(e=!0):e=!1),s=0;n=this.tabs[s];s++)i=t(n),!0===e||-1!==t.inArray(s,e)?(i.attr("aria-disabled","true"),this._addClass(i,null,"ui-state-disabled")):(i.removeAttr("aria-disabled"),this._removeClass(i,null,"ui-state-disabled"));this.options.disabled=e,this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!0===e)},_setupEvents:function(e){var i={};e&&t.each(e.split(" "),(function(t,e){i[e]="_eventHandler"})),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(!0,this.anchors,{click:function(t){t.preventDefault()}}),this._on(this.anchors,i),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(e){var i,n=this.element.parent();"fill"===e?(i=n.height(),i-=this.element.outerHeight()-this.element.height(),this.element.siblings(":visible").each((function(){var e=t(this),n=e.css("position");"absolute"!==n&&"fixed"!==n&&(i-=e.outerHeight(!0))})),this.element.children().not(this.panels).each((function(){i-=t(this).outerHeight(!0)})),this.panels.each((function(){t(this).height(Math.max(0,i-t(this).innerHeight()+t(this).height()))})).css("overflow","auto")):"auto"===e&&(i=0,this.panels.each((function(){i=Math.max(i,t(this).height("").height())})).height(i))},_eventHandler:function(e){var i=this.options,n=this.active,s=t(e.currentTarget).closest("li"),r=s[0]===n[0],a=r&&i.collapsible,o=a?t():this._getPanelForTab(s),l=n.length?this._getPanelForTab(n):t(),u={oldTab:n,oldPanel:l,newTab:a?t():s,newPanel:o};e.preventDefault(),s.hasClass("ui-state-disabled")||s.hasClass("ui-tabs-loading")||this.running||r&&!i.collapsible||!1===this._trigger("beforeActivate",e,u)||(i.active=!a&&this.tabs.index(s),this.active=r?t():s,this.xhr&&this.xhr.abort(),l.length||o.length||t.error("jQuery UI Tabs: Mismatching fragment identifier."),o.length&&this.load(this.tabs.index(s),e),this._toggle(e,u))},_toggle:function(e,i){var n=this,s=i.newPanel,r=i.oldPanel;function a(){n.running=!1,n._trigger("activate",e,i)}function o(){n._addClass(i.newTab.closest("li"),"ui-tabs-active","ui-state-active"),s.length&&n.options.show?n._show(s,n.options.show,a):(s.show(),a())}this.running=!0,r.length&&this.options.hide?this._hide(r,this.options.hide,(function(){n._removeClass(i.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),o()})):(this._removeClass(i.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),r.hide(),o()),r.attr("aria-hidden","true"),i.oldTab.attr({"aria-selected":"false","aria-expanded":"false"}),s.length&&r.length?i.oldTab.attr("tabIndex",-1):s.length&&this.tabs.filter((function(){return 0===t(this).attr("tabIndex")})).attr("tabIndex",-1),s.attr("aria-hidden","false"),i.newTab.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_activate:function(e){var i,n=this._findActive(e);n[0]!==this.active[0]&&(n.length||(n=this.active),i=n.find(".ui-tabs-anchor")[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return!1===e?t():this.tabs.eq(e)},_getIndex:function(e){return"string"==typeof e&&(e=this.anchors.index(this.anchors.filter("[href$='"+t.ui.escapeSelector(e)+"']"))),e},_destroy:function(){this.xhr&&this.xhr.abort(),this.tablist.removeAttr("role").off(this.eventNamespace),this.anchors.removeAttr("role tabIndex").removeUniqueId(),this.tabs.add(this.panels).each((function(){t.data(this,"ui-tabs-destroy")?t(this).remove():t(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded")})),this.tabs.each((function(){var e=t(this),i=e.data("ui-tabs-aria-controls");i?e.attr("aria-controls",i).removeData("ui-tabs-aria-controls"):e.removeAttr("aria-controls")})),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(e){var i=this.options.disabled;!1!==i&&(void 0===e?i=!1:(e=this._getIndex(e),i=t.isArray(i)?t.map(i,(function(t){return t!==e?t:null})):t.map(this.tabs,(function(t,i){return i!==e?i:null}))),this._setOptionDisabled(i))},disable:function(e){var i=this.options.disabled;if(!0!==i){if(void 0===e)i=!0;else{if(e=this._getIndex(e),-1!==t.inArray(e,i))return;i=t.isArray(i)?t.merge([e],i).sort():[e]}this._setOptionDisabled(i)}},load:function(e,i){e=this._getIndex(e);var n=this,s=this.tabs.eq(e),r=s.find(".ui-tabs-anchor"),a=this._getPanelForTab(s),o={tab:s,panel:a},l=function(t,e){"abort"===e&&n.panels.stop(!1,!0),n._removeClass(s,"ui-tabs-loading"),a.removeAttr("aria-busy"),t===n.xhr&&delete n.xhr};this._isLocal(r[0])||(this.xhr=t.ajax(this._ajaxSettings(r,i,o)),this.xhr&&"canceled"!==this.xhr.statusText&&(this._addClass(s,"ui-tabs-loading"),a.attr("aria-busy","true"),this.xhr.done((function(t,e,s){setTimeout((function(){a.html(t),n._trigger("load",i,o),l(s,e)}),1)})).fail((function(t,e){setTimeout((function(){l(t,e)}),1)}))))},_ajaxSettings:function(e,i,n){var s=this;return{url:e.attr("href").replace(/#.*$/,""),beforeSend:function(e,r){return s._trigger("beforeLoad",i,t.extend({jqXHR:e,ajaxSettings:r},n))}}},_getPanelForTab:function(e){var i=t(e).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+i))}}),!1!==t.uiBackCompat&&t.widget("ui.tabs",t.ui.tabs,{_processTabs:function(){this._superApply(arguments),this._addClass(this.tabs,"ui-tab")}}),t.ui.tabs,
/*!
 * jQuery UI Tooltip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
t.widget("ui.tooltip",{version:"1.12.1",options:{classes:{"ui-tooltip":"ui-corner-all ui-widget-shadow"},content:function(){var e=t(this).attr("title")||"";return t("<a>").text(e).html()},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,track:!1,close:null,open:null},_addDescribedBy:function(e,i){var n=(e.attr("aria-describedby")||"").split(/\s+/);n.push(i),e.data("ui-tooltip-id",i).attr("aria-describedby",t.trim(n.join(" ")))},_removeDescribedBy:function(e){var i=e.data("ui-tooltip-id"),n=(e.attr("aria-describedby")||"").split(/\s+/),s=t.inArray(i,n);-1!==s&&n.splice(s,1),e.removeData("ui-tooltip-id"),(n=t.trim(n.join(" ")))?e.attr("aria-describedby",n):e.removeAttr("aria-describedby")},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.liveRegion=t("<div>").attr({role:"log","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this.disabledTitles=t([])},_setOption:function(e,i){var n=this;this._super(e,i),"content"===e&&t.each(this.tooltips,(function(t,e){n._updateContent(e.element)}))},_setOptionDisabled:function(t){this[t?"_disable":"_enable"]()},_disable:function(){var e=this;t.each(this.tooltips,(function(i,n){var s=t.Event("blur");s.target=s.currentTarget=n.element[0],e.close(s,!0)})),this.disabledTitles=this.disabledTitles.add(this.element.find(this.options.items).addBack().filter((function(){var e=t(this);if(e.is("[title]"))return e.data("ui-tooltip-title",e.attr("title")).removeAttr("title")})))},_enable:function(){this.disabledTitles.each((function(){var e=t(this);e.data("ui-tooltip-title")&&e.attr("title",e.data("ui-tooltip-title"))})),this.disabledTitles=t([])},open:function(e){var i=this,n=t(e?e.target:this.element).closest(this.options.items);n.length&&!n.data("ui-tooltip-id")&&(n.attr("title")&&n.data("ui-tooltip-title",n.attr("title")),n.data("ui-tooltip-open",!0),e&&"mouseover"===e.type&&n.parents().each((function(){var e,n=t(this);n.data("ui-tooltip-open")&&((e=t.Event("blur")).target=e.currentTarget=this,i.close(e,!0)),n.attr("title")&&(n.uniqueId(),i.parents[this.id]={element:this,title:n.attr("title")},n.attr("title",""))})),this._registerCloseHandlers(e,n),this._updateContent(n,e))},_updateContent:function(t,e){var i,n=this.options.content,s=this,r=e?e.type:null;if("string"==typeof n||n.nodeType||n.jquery)return this._open(e,t,n);(i=n.call(t[0],(function(i){s._delay((function(){t.data("ui-tooltip-open")&&(e&&(e.type=r),this._open(e,t,i))}))})))&&this._open(e,t,i)},_open:function(e,i,n){var s,r,a,o,l=t.extend({},this.options.position);function u(t){l.of=t,r.is(":hidden")||r.position(l)}n&&((s=this._find(i))?s.tooltip.find(".ui-tooltip-content").html(n):(i.is("[title]")&&(e&&"mouseover"===e.type?i.attr("title",""):i.removeAttr("title")),s=this._tooltip(i),r=s.tooltip,this._addDescribedBy(i,r.attr("id")),r.find(".ui-tooltip-content").html(n),this.liveRegion.children().hide(),(o=t("<div>").html(r.find(".ui-tooltip-content").html())).removeAttr("name").find("[name]").removeAttr("name"),o.removeAttr("id").find("[id]").removeAttr("id"),o.appendTo(this.liveRegion),this.options.track&&e&&/^mouse/.test(e.type)?(this._on(this.document,{mousemove:u}),u(e)):r.position(t.extend({of:i},this.options.position)),r.hide(),this._show(r,this.options.show),this.options.track&&this.options.show&&this.options.show.delay&&(a=this.delayedShow=setInterval((function(){r.is(":visible")&&(u(l.of),clearInterval(a))}),t.fx.interval)),this._trigger("open",e,{tooltip:r})))},_registerCloseHandlers:function(e,i){var n={keyup:function(e){if(e.keyCode===t.ui.keyCode.ESCAPE){var n=t.Event(e);n.currentTarget=i[0],this.close(n,!0)}}};i[0]!==this.element[0]&&(n.remove=function(){this._removeTooltip(this._find(i).tooltip)}),e&&"mouseover"!==e.type||(n.mouseleave="close"),e&&"focusin"!==e.type||(n.focusout="close"),this._on(!0,i,n)},close:function(e){var i,n=this,s=t(e?e.currentTarget:this.element),r=this._find(s);r?(i=r.tooltip,r.closing||(clearInterval(this.delayedShow),s.data("ui-tooltip-title")&&!s.attr("title")&&s.attr("title",s.data("ui-tooltip-title")),this._removeDescribedBy(s),r.hiding=!0,i.stop(!0),this._hide(i,this.options.hide,(function(){n._removeTooltip(t(this))})),s.removeData("ui-tooltip-open"),this._off(s,"mouseleave focusout keyup"),s[0]!==this.element[0]&&this._off(s,"remove"),this._off(this.document,"mousemove"),e&&"mouseleave"===e.type&&t.each(this.parents,(function(e,i){t(i.element).attr("title",i.title),delete n.parents[e]})),r.closing=!0,this._trigger("close",e,{tooltip:i}),r.hiding||(r.closing=!1))):s.removeData("ui-tooltip-open")},_tooltip:function(e){var i=t("<div>").attr("role","tooltip"),n=t("<div>").appendTo(i),s=i.uniqueId().attr("id");return this._addClass(n,"ui-tooltip-content"),this._addClass(i,"ui-tooltip","ui-widget ui-widget-content"),i.appendTo(this._appendTo(e)),this.tooltips[s]={element:e,tooltip:i}},_find:function(t){var e=t.data("ui-tooltip-id");return e?this.tooltips[e]:null},_removeTooltip:function(t){t.remove(),delete this.tooltips[t.attr("id")]},_appendTo:function(t){var e=t.closest(".ui-front, dialog");return e.length||(e=this.document[0].body),e},_destroy:function(){var e=this;t.each(this.tooltips,(function(i,n){var s=t.Event("blur"),r=n.element;s.target=s.currentTarget=r[0],e.close(s,!0),t("#"+i).remove(),r.data("ui-tooltip-title")&&(r.attr("title")||r.attr("title",r.data("ui-tooltip-title")),r.removeData("ui-tooltip-title"))})),this.liveRegion.remove()}}),!1!==t.uiBackCompat&&t.widget("ui.tooltip",t.ui.tooltip,{options:{tooltipClass:null},_tooltip:function(){var t=this._superApply(arguments);return this.options.tooltipClass&&t.tooltip.addClass(this.options.tooltipClass),t}}),t.ui.tooltip})?n.apply(e,s):n)||(t.exports=r)},25:function(t,e,i){"use strict";i.r(e),i.d(e,"data",(function(){return Su})),i.d(e,"vizComponents",(function(){return Cu})),i.d(e,"dataUrls",(function(){return ku})),i.d(e,"init",(function(){return Tu})),i.d(e,"_createSvg",(function(){return Iu}));var n={},s={};function r(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function a(t){var e=Object.create(null),i=[];return t.forEach((function(t){for(var n in t)n in e||i.push(e[n]=n)})),i}function o(t,e){var i=t+"",n=i.length;return n<e?new Array(e-n+1).join(0)+i:i}function l(t){var e,i=t.getUTCHours(),n=t.getUTCMinutes(),s=t.getUTCSeconds(),r=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+o(-e,6):e>9999?"+"+o(e,6):o(e,4))+"-"+o(t.getUTCMonth()+1,2)+"-"+o(t.getUTCDate(),2)+(r?"T"+o(i,2)+":"+o(n,2)+":"+o(s,2)+"."+o(r,3)+"Z":s?"T"+o(i,2)+":"+o(n,2)+":"+o(s,2)+"Z":n||i?"T"+o(i,2)+":"+o(n,2)+"Z":"")}var u=function(t){var e=new RegExp('["'+t+"\n\r]"),i=t.charCodeAt(0);function o(t,e){var r,a=[],o=t.length,l=0,u=0,h=o<=0,c=!1;function d(){if(h)return s;if(c)return c=!1,n;var e,r,a=l;if(34===t.charCodeAt(a)){for(;l++<o&&34!==t.charCodeAt(l)||34===t.charCodeAt(++l););return(e=l)>=o?h=!0:10===(r=t.charCodeAt(l++))?c=!0:13===r&&(c=!0,10===t.charCodeAt(l)&&++l),t.slice(a+1,e-1).replace(/""/g,'"')}for(;l<o;){if(10===(r=t.charCodeAt(e=l++)))c=!0;else if(13===r)c=!0,10===t.charCodeAt(l)&&++l;else if(r!==i)continue;return t.slice(a,e)}return h=!0,t.slice(a,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=d())!==s;){for(var p=[];r!==n&&r!==s;)p.push(r),r=d();e&&null==(p=e(p,u++))||a.push(p)}return a}function u(e,i){return e.map((function(e){return i.map((function(t){return c(e[t])})).join(t)}))}function h(e){return e.map(c).join(t)}function c(t){return null==t?"":t instanceof Date?l(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var i,n,s=o(t,(function(t,s){if(i)return i(t,s-1);n=t,i=e?function(t,e){var i=r(t);return function(n,s){return e(i(n),s,t)}}(t,e):r(t)}));return s.columns=n||[],s},parseRows:o,format:function(e,i){return null==i&&(i=a(e)),[i.map(c).join(t)].concat(u(e,i)).join("\n")},formatBody:function(t,e){return null==e&&(e=a(t)),u(t,e).join("\n")},formatRows:function(t){return t.map(h).join("\n")},formatRow:h,formatValue:c}},h=u(","),c=h.parse,d=(h.parseRows,h.format,h.formatBody,h.formatRows,h.formatRow,h.formatValue,u("\t")),p=d.parse;d.parseRows,d.format,d.formatBody,d.formatRows,d.formatRow,d.formatValue;function f(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var g=function(t,e){return fetch(t,e).then(f)};function m(t){return function(e,i,n){return 2===arguments.length&&"function"==typeof i&&(n=i,i=void 0),g(e,i).then((function(e){return t(e,n)}))}}m(c),m(p);function v(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var b=function(t,e){return fetch(t,e).then(v)};function y(t){return function(e,i){return g(e,i).then((function(e){return(new DOMParser).parseFromString(e,t)}))}}y("application/xml"),y("text/html"),y("image/svg+xml");function _(){}var x=function(t){return null==t?_:function(){return this.querySelector(t)}};function w(){return[]}var S=function(t){return null==t?w:function(){return this.querySelectorAll(t)}},C=function(t){return function(){return this.matches(t)}},k=function(t){return new Array(t.length)};function D(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}D.prototype={constructor:D,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function T(t,e,i,n,s,r){for(var a,o=0,l=e.length,u=r.length;o<u;++o)(a=e[o])?(a.__data__=r[o],n[o]=a):i[o]=new D(t,r[o]);for(;o<l;++o)(a=e[o])&&(s[o]=a)}function A(t,e,i,n,s,r,a){var o,l,u,h={},c=e.length,d=r.length,p=new Array(c);for(o=0;o<c;++o)(l=e[o])&&(p[o]=u="$"+a.call(l,l.__data__,o,e),u in h?s[o]=l:h[u]=l);for(o=0;o<d;++o)(l=h[u="$"+a.call(t,r[o],o,r)])?(n[o]=l,l.__data__=r[o],h[u]=null):i[o]=new D(t,r[o]);for(o=0;o<c;++o)(l=e[o])&&h[p[o]]===l&&(s[o]=l)}function M(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var I="http://www.w3.org/1999/xhtml",E={svg:"http://www.w3.org/2000/svg",xhtml:I,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},P=function(t){var e=t+="",i=e.indexOf(":");return i>=0&&"xmlns"!==(e=t.slice(0,i))&&(t=t.slice(i+1)),E.hasOwnProperty(e)?{space:E[e],local:t}:t};function N(t){return function(){this.removeAttribute(t)}}function H(t){return function(){this.removeAttributeNS(t.space,t.local)}}function z(t,e){return function(){this.setAttribute(t,e)}}function L(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function O(t,e){return function(){var i=e.apply(this,arguments);null==i?this.removeAttribute(t):this.setAttribute(t,i)}}function q(t,e){return function(){var i=e.apply(this,arguments);null==i?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,i)}}var G=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function R(t){return function(){this.style.removeProperty(t)}}function F(t,e,i){return function(){this.style.setProperty(t,e,i)}}function B(t,e,i){return function(){var n=e.apply(this,arguments);null==n?this.style.removeProperty(t):this.style.setProperty(t,n,i)}}function W(t,e){return t.style.getPropertyValue(e)||G(t).getComputedStyle(t,null).getPropertyValue(e)}function j(t){return function(){delete this[t]}}function $(t,e){return function(){this[t]=e}}function U(t,e){return function(){var i=e.apply(this,arguments);null==i?delete this[t]:this[t]=i}}function V(t){return t.trim().split(/^|\s+/)}function Y(t){return t.classList||new X(t)}function X(t){this._node=t,this._names=V(t.getAttribute("class")||"")}function K(t,e){for(var i=Y(t),n=-1,s=e.length;++n<s;)i.add(e[n])}function Q(t,e){for(var i=Y(t),n=-1,s=e.length;++n<s;)i.remove(e[n])}function J(t){return function(){K(this,t)}}function Z(t){return function(){Q(this,t)}}function tt(t,e){return function(){(e.apply(this,arguments)?K:Q)(this,t)}}X.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function et(){this.textContent=""}function it(t){return function(){this.textContent=t}}function nt(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function st(){this.innerHTML=""}function rt(t){return function(){this.innerHTML=t}}function at(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function ot(){this.nextSibling&&this.parentNode.appendChild(this)}function lt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ut(t){return function(){var e=this.ownerDocument,i=this.namespaceURI;return i===I&&e.documentElement.namespaceURI===I?e.createElement(t):e.createElementNS(i,t)}}function ht(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var ct=function(t){var e=P(t);return(e.local?ht:ut)(e)};function dt(){return null}function pt(){var t=this.parentNode;t&&t.removeChild(this)}function ft(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function gt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}var mt={},vt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(mt={mouseenter:"mouseover",mouseleave:"mouseout"}));function bt(t,e,i){return t=yt(t,e,i),function(e){var i=e.relatedTarget;i&&(i===this||8&i.compareDocumentPosition(this))||t.call(this,e)}}function yt(t,e,i){return function(n){var s=vt;vt=n;try{t.call(this,this.__data__,e,i)}finally{vt=s}}}function _t(t){return t.trim().split(/^|\s+/).map((function(t){var e="",i=t.indexOf(".");return i>=0&&(e=t.slice(i+1),t=t.slice(0,i)),{type:t,name:e}}))}function xt(t){return function(){var e=this.__on;if(e){for(var i,n=0,s=-1,r=e.length;n<r;++n)i=e[n],t.type&&i.type!==t.type||i.name!==t.name?e[++s]=i:this.removeEventListener(i.type,i.listener,i.capture);++s?e.length=s:delete this.__on}}}function wt(t,e,i){var n=mt.hasOwnProperty(t.type)?bt:yt;return function(s,r,a){var o,l=this.__on,u=n(e,r,a);if(l)for(var h=0,c=l.length;h<c;++h)if((o=l[h]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=u,o.capture=i),void(o.value=e);this.addEventListener(t.type,u,i),o={type:t.type,name:t.name,value:e,listener:u,capture:i},l?l.push(o):this.__on=[o]}}function St(t,e,i,n){var s=vt;t.sourceEvent=vt,vt=t;try{return e.apply(i,n)}finally{vt=s}}function Ct(t,e,i){var n=G(t),s=n.CustomEvent;"function"==typeof s?s=new s(e,i):(s=n.document.createEvent("Event"),i?(s.initEvent(e,i.bubbles,i.cancelable),s.detail=i.detail):s.initEvent(e,!1,!1)),t.dispatchEvent(s)}function kt(t,e){return function(){return Ct(this,t,e)}}function Dt(t,e){return function(){return Ct(this,t,e.apply(this,arguments))}}var Tt=[null];function At(t,e){this._groups=t,this._parents=e}function Mt(){return new At([[document.documentElement]],Tt)}At.prototype=Mt.prototype={constructor:At,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,i=e.length,n=new Array(i),s=0;s<i;++s)for(var r,a,o=e[s],l=o.length,u=n[s]=new Array(l),h=0;h<l;++h)(r=o[h])&&(a=t.call(r,r.__data__,h,o))&&("__data__"in r&&(a.__data__=r.__data__),u[h]=a);return new At(n,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=S(t));for(var e=this._groups,i=e.length,n=[],s=[],r=0;r<i;++r)for(var a,o=e[r],l=o.length,u=0;u<l;++u)(a=o[u])&&(n.push(t.call(a,a.__data__,u,o)),s.push(a));return new At(n,s)},filter:function(t){"function"!=typeof t&&(t=C(t));for(var e=this._groups,i=e.length,n=new Array(i),s=0;s<i;++s)for(var r,a=e[s],o=a.length,l=n[s]=[],u=0;u<o;++u)(r=a[u])&&t.call(r,r.__data__,u,a)&&l.push(r);return new At(n,this._parents)},data:function(t,e){if(!t)return f=new Array(this.size()),h=-1,this.each((function(t){f[++h]=t})),f;var i,n=e?A:T,s=this._parents,r=this._groups;"function"!=typeof t&&(i=t,t=function(){return i});for(var a=r.length,o=new Array(a),l=new Array(a),u=new Array(a),h=0;h<a;++h){var c=s[h],d=r[h],p=d.length,f=t.call(c,c&&c.__data__,h,s),g=f.length,m=l[h]=new Array(g),v=o[h]=new Array(g);n(c,d,m,v,u[h]=new Array(p),f,e);for(var b,y,_=0,x=0;_<g;++_)if(b=m[_]){for(_>=x&&(x=_+1);!(y=v[x])&&++x<g;);b._next=y||null}}return(o=new At(o,s))._enter=l,o._exit=u,o},enter:function(){return new At(this._enter||this._groups.map(k),this._parents)},exit:function(){return new At(this._exit||this._groups.map(k),this._parents)},join:function(t,e,i){var n=this.enter(),s=this,r=this.exit();return n="function"==typeof t?t(n):n.append(t+""),null!=e&&(s=e(s)),null==i?r.remove():i(r),n&&s?n.merge(s).order():s},merge:function(t){for(var e=this._groups,i=t._groups,n=e.length,s=i.length,r=Math.min(n,s),a=new Array(n),o=0;o<r;++o)for(var l,u=e[o],h=i[o],c=u.length,d=a[o]=new Array(c),p=0;p<c;++p)(l=u[p]||h[p])&&(d[p]=l);for(;o<n;++o)a[o]=e[o];return new At(a,this._parents)},order:function(){for(var t=this._groups,e=-1,i=t.length;++e<i;)for(var n,s=t[e],r=s.length-1,a=s[r];--r>=0;)(n=s[r])&&(a&&4^n.compareDocumentPosition(a)&&a.parentNode.insertBefore(n,a),a=n);return this},sort:function(t){function e(e,i){return e&&i?t(e.__data__,i.__data__):!e-!i}t||(t=M);for(var i=this._groups,n=i.length,s=new Array(n),r=0;r<n;++r){for(var a,o=i[r],l=o.length,u=s[r]=new Array(l),h=0;h<l;++h)(a=o[h])&&(u[h]=a);u.sort(e)}return new At(s,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,i=t.length;e<i;++e)for(var n=t[e],s=0,r=n.length;s<r;++s){var a=n[s];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,i=0,n=e.length;i<n;++i)for(var s,r=e[i],a=0,o=r.length;a<o;++a)(s=r[a])&&t.call(s,s.__data__,a,r);return this},attr:function(t,e){var i=P(t);if(arguments.length<2){var n=this.node();return i.local?n.getAttributeNS(i.space,i.local):n.getAttribute(i)}return this.each((null==e?i.local?H:N:"function"==typeof e?i.local?q:O:i.local?L:z)(i,e))},style:function(t,e,i){return arguments.length>1?this.each((null==e?R:"function"==typeof e?B:F)(t,e,null==i?"":i)):W(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?j:"function"==typeof e?U:$)(t,e)):this.node()[t]},classed:function(t,e){var i=V(t+"");if(arguments.length<2){for(var n=Y(this.node()),s=-1,r=i.length;++s<r;)if(!n.contains(i[s]))return!1;return!0}return this.each(("function"==typeof e?tt:e?J:Z)(i,e))},text:function(t){return arguments.length?this.each(null==t?et:("function"==typeof t?nt:it)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?st:("function"==typeof t?at:rt)(t)):this.node().innerHTML},raise:function(){return this.each(ot)},lower:function(){return this.each(lt)},append:function(t){var e="function"==typeof t?t:ct(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var i="function"==typeof t?t:ct(t),n=null==e?dt:"function"==typeof e?e:x(e);return this.select((function(){return this.insertBefore(i.apply(this,arguments),n.apply(this,arguments)||null)}))},remove:function(){return this.each(pt)},clone:function(t){return this.select(t?gt:ft)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,i){var n,s,r=_t(t+""),a=r.length;if(!(arguments.length<2)){for(o=e?wt:xt,null==i&&(i=!1),n=0;n<a;++n)this.each(o(r[n],e,i));return this}var o=this.node().__on;if(o)for(var l,u=0,h=o.length;u<h;++u)for(n=0,l=o[u];n<a;++n)if((s=r[n]).type===l.type&&s.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?Dt:kt)(t,e))}};var It=Mt,Et=function(t){return"string"==typeof t?new At([[document.querySelector(t)]],[document.documentElement]):new At([[t]],Tt)},Pt=function(t){return"string"==typeof t?new At([document.querySelectorAll(t)],[document.documentElement]):new At([null==t?[]:t],Tt)},Nt=Array.prototype.slice,Ht=function(t){return t};function zt(t){return"translate("+(t+.5)+",0)"}function Lt(t){return"translate(0,"+(t+.5)+")"}function Ot(t){return function(e){return+t(e)}}function qt(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(i){return+t(i)+e}}function Gt(){return!this.__axis}function Rt(t,e){var i=[],n=null,s=null,r=6,a=6,o=3,l=1===t||4===t?-1:1,u=4===t||2===t?"x":"y",h=1===t||3===t?zt:Lt;function c(c){var d=null==n?e.ticks?e.ticks.apply(e,i):e.domain():n,p=null==s?e.tickFormat?e.tickFormat.apply(e,i):Ht:s,f=Math.max(r,0)+o,g=e.range(),m=+g[0]+.5,v=+g[g.length-1]+.5,b=(e.bandwidth?qt:Ot)(e.copy()),y=c.selection?c.selection():c,_=y.selectAll(".domain").data([null]),x=y.selectAll(".tick").data(d,e).order(),w=x.exit(),S=x.enter().append("g").attr("class","tick"),C=x.select("line"),k=x.select("text");_=_.merge(_.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(S),C=C.merge(S.append("line").attr("stroke","currentColor").attr(u+"2",l*r)),k=k.merge(S.append("text").attr("fill","currentColor").attr(u,l*f).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),c!==y&&(_=_.transition(c),x=x.transition(c),C=C.transition(c),k=k.transition(c),w=w.transition(c).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=b(t))?h(t):this.getAttribute("transform")})),S.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return h(e&&isFinite(e=e(t))?e:b(t))}))),w.remove(),_.attr("d",4===t||2==t?a?"M"+l*a+","+m+"H0.5V"+v+"H"+l*a:"M0.5,"+m+"V"+v:a?"M"+m+","+l*a+"V0.5H"+v+"V"+l*a:"M"+m+",0.5H"+v),x.attr("opacity",1).attr("transform",(function(t){return h(b(t))})),C.attr(u+"2",l*r),k.attr(u,l*f).text(p),y.filter(Gt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),y.each((function(){this.__axis=b}))}return c.scale=function(t){return arguments.length?(e=t,c):e},c.ticks=function(){return i=Nt.call(arguments),c},c.tickArguments=function(t){return arguments.length?(i=null==t?[]:Nt.call(t),c):i.slice()},c.tickValues=function(t){return arguments.length?(n=null==t?null:Nt.call(t),c):n&&n.slice()},c.tickFormat=function(t){return arguments.length?(s=t,c):s},c.tickSize=function(t){return arguments.length?(r=a=+t,c):r},c.tickSizeInner=function(t){return arguments.length?(r=+t,c):r},c.tickSizeOuter=function(t){return arguments.length?(a=+t,c):a},c.tickPadding=function(t){return arguments.length?(o=+t,c):o},c}function Ft(t){return Rt(1,t)}function Bt(t){return Rt(2,t)}function Wt(t){return Rt(3,t)}function jt(t){return Rt(4,t)}var $t=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},Ut=function(t){var e;return 1===t.length&&(e=t,t=function(t,i){return $t(e(t),i)}),{left:function(e,i,n,s){for(null==n&&(n=0),null==s&&(s=e.length);n<s;){var r=n+s>>>1;t(e[r],i)<0?n=r+1:s=r}return n},right:function(e,i,n,s){for(null==n&&(n=0),null==s&&(s=e.length);n<s;){var r=n+s>>>1;t(e[r],i)>0?s=r:n=r+1}return n}}};var Vt=Ut($t),Yt=Vt.right,Xt=(Vt.left,Yt);var Kt=function(t){return null===t?NaN:+t},Qt=function(t,e){var i=function(t,e){var i,n,s=t.length,r=0,a=-1,o=0,l=0;if(null==e)for(;++a<s;)isNaN(i=Kt(t[a]))||(l+=(n=i-o)*(i-(o+=n/++r)));else for(;++a<s;)isNaN(i=Kt(e(t[a],a,t)))||(l+=(n=i-o)*(i-(o+=n/++r)));if(r>1)return l/(r-1)}(t,e);return i?Math.sqrt(i):i},Jt=function(t,e){var i,n,s,r=t.length,a=-1;if(null==e){for(;++a<r;)if(null!=(i=t[a])&&i>=i)for(n=s=i;++a<r;)null!=(i=t[a])&&(n>i&&(n=i),s<i&&(s=i))}else for(;++a<r;)if(null!=(i=e(t[a],a,t))&&i>=i)for(n=s=i;++a<r;)null!=(i=e(t[a],a,t))&&(n>i&&(n=i),s<i&&(s=i));return[n,s]},Zt=Array.prototype,te=(Zt.slice,Zt.map,function(t,e,i){t=+t,e=+e,i=(s=arguments.length)<2?(e=t,t=0,1):s<3?1:+i;for(var n=-1,s=0|Math.max(0,Math.ceil((e-t)/i)),r=new Array(s);++n<s;)r[n]=t+n*i;return r}),ee=Math.sqrt(50),ie=Math.sqrt(10),ne=Math.sqrt(2),se=function(t,e,i){var n,s,r,a,o=-1;if(i=+i,(t=+t)===(e=+e)&&i>0)return[t];if((n=e<t)&&(s=t,t=e,e=s),0===(a=re(t,e,i))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),r=new Array(s=Math.ceil(e-t+1));++o<s;)r[o]=(t+o)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),r=new Array(s=Math.ceil(t-e+1));++o<s;)r[o]=(t-o)/a;return n&&r.reverse(),r};function re(t,e,i){var n=(e-t)/Math.max(0,i),s=Math.floor(Math.log(n)/Math.LN10),r=n/Math.pow(10,s);return s>=0?(r>=ee?10:r>=ie?5:r>=ne?2:1)*Math.pow(10,s):-Math.pow(10,-s)/(r>=ee?10:r>=ie?5:r>=ne?2:1)}function ae(t,e,i){var n=Math.abs(e-t)/Math.max(0,i),s=Math.pow(10,Math.floor(Math.log(n)/Math.LN10)),r=n/s;return r>=ee?s*=10:r>=ie?s*=5:r>=ne&&(s*=2),e<t?-s:s}var oe=function(t,e,i){if(null==i&&(i=Kt),n=t.length){if((e=+e)<=0||n<2)return+i(t[0],0,t);if(e>=1)return+i(t[n-1],n-1,t);var n,s=(n-1)*e,r=Math.floor(s),a=+i(t[r],r,t);return a+(+i(t[r+1],r+1,t)-a)*(s-r)}},le=function(t,e){var i,n,s=t.length,r=-1;if(null==e){for(;++r<s;)if(null!=(i=t[r])&&i>=i)for(n=i;++r<s;)null!=(i=t[r])&&i>n&&(n=i)}else for(;++r<s;)if(null!=(i=e(t[r],r,t))&&i>=i)for(n=i;++r<s;)null!=(i=e(t[r],r,t))&&i>n&&(n=i);return n},ue=function(t,e){var i,n=t.length,s=n,r=-1,a=0;if(null==e)for(;++r<n;)isNaN(i=Kt(t[r]))?--s:a+=i;else for(;++r<n;)isNaN(i=Kt(e(t[r],r,t)))?--s:a+=i;if(s)return a/s},he=function(t,e){var i,n=t.length,s=-1,r=[];if(null==e)for(;++s<n;)isNaN(i=Kt(t[s]))||r.push(i);else for(;++s<n;)isNaN(i=Kt(e(t[s],s,t)))||r.push(i);return oe(r.sort($t),.5)},ce=function(t,e){var i,n,s=t.length,r=-1;if(null==e){for(;++r<s;)if(null!=(i=t[r])&&i>=i)for(n=i;++r<s;)null!=(i=t[r])&&n>i&&(n=i)}else for(;++r<s;)if(null!=(i=e(t[r],r,t))&&i>=i)for(n=i;++r<s;)null!=(i=e(t[r],r,t))&&n>i&&(n=i);return n};function de(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function pe(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}function fe(){}function ge(t,e){var i=new fe;if(t instanceof fe)t.each((function(t,e){i.set(e,t)}));else if(Array.isArray(t)){var n,s=-1,r=t.length;if(null==e)for(;++s<r;)i.set(s,t[s]);else for(;++s<r;)i.set(e(n=t[s],s,t),n)}else if(t)for(var a in t)i.set(a,t[a]);return i}fe.prototype=ge.prototype={constructor:fe,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var me=ge,ve=function(){var t,e,i,n=[],s=[];function r(i,s,a,o){if(s>=n.length)return null!=t&&i.sort(t),null!=e?e(i):i;for(var l,u,h,c=-1,d=i.length,p=n[s++],f=me(),g=a();++c<d;)(h=f.get(l=p(u=i[c])+""))?h.push(u):f.set(l,[u]);return f.each((function(t,e){o(g,e,r(t,s,a,o))})),g}return i={object:function(t){return r(t,0,be,ye)},map:function(t){return r(t,0,_e,xe)},entries:function(t){return function t(i,r){if(++r>n.length)return i;var a,o=s[r-1];return null!=e&&r>=n.length?a=i.entries():(a=[],i.each((function(e,i){a.push({key:i,values:t(e,r)})}))),null!=o?a.sort((function(t,e){return o(t.key,e.key)})):a}(r(t,0,_e,xe),0)},key:function(t){return n.push(t),i},sortKeys:function(t){return s[n.length-1]=t,i},sortValues:function(e){return t=e,i},rollup:function(t){return e=t,i}}};function be(){return{}}function ye(t,e,i){t[e]=i}function _e(){return me()}function xe(t,e,i){t.set(e,i)}function we(){}var Se=me.prototype;function Ce(t,e){var i=new we;if(t instanceof we)t.each((function(t){i.add(t)}));else if(t){var n=-1,s=t.length;if(null==e)for(;++n<s;)i.add(t[n]);else for(;++n<s;)i.add(e(t[n],n,t))}return i}we.prototype=Ce.prototype={constructor:we,has:Se.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Se.remove,clear:Se.clear,values:Se.keys,size:Se.size,empty:Se.empty,each:Se.each};var ke=Array.prototype,De=ke.map,Te=ke.slice,Ae={name:"implicit"};function Me(){var t=me(),e=[],i=[],n=Ae;function s(s){var r=s+"",a=t.get(r);if(!a){if(n!==Ae)return n;t.set(r,a=e.push(s))}return i[(a-1)%i.length]}return s.domain=function(i){if(!arguments.length)return e.slice();e=[],t=me();for(var n,r,a=-1,o=i.length;++a<o;)t.has(r=(n=i[a])+"")||t.set(r,e.push(n));return s},s.range=function(t){return arguments.length?(i=Te.call(t),s):i.slice()},s.unknown=function(t){return arguments.length?(n=t,s):n},s.copy=function(){return Me(e,i).unknown(n)},de.apply(s,arguments),s}function Ie(){var t,e,i=Me().unknown(void 0),n=i.domain,s=i.range,r=[0,1],a=!1,o=0,l=0,u=.5;function h(){var i=n().length,h=r[1]<r[0],c=r[h-0],d=r[1-h];t=(d-c)/Math.max(1,i-o+2*l),a&&(t=Math.floor(t)),c+=(d-c-t*(i-o))*u,e=t*(1-o),a&&(c=Math.round(c),e=Math.round(e));var p=te(i).map((function(e){return c+t*e}));return s(h?p.reverse():p)}return delete i.unknown,i.domain=function(t){return arguments.length?(n(t),h()):n()},i.range=function(t){return arguments.length?(r=[+t[0],+t[1]],h()):r.slice()},i.rangeRound=function(t){return r=[+t[0],+t[1]],a=!0,h()},i.bandwidth=function(){return e},i.step=function(){return t},i.round=function(t){return arguments.length?(a=!!t,h()):a},i.padding=function(t){return arguments.length?(o=Math.min(1,l=+t),h()):o},i.paddingInner=function(t){return arguments.length?(o=Math.min(1,t),h()):o},i.paddingOuter=function(t){return arguments.length?(l=+t,h()):l},i.align=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),h()):u},i.copy=function(){return Ie(n(),r).round(a).paddingInner(o).paddingOuter(l).align(u)},de.apply(h(),arguments)}var Ee=function(t,e,i){t.prototype=e.prototype=i,i.constructor=t};function Pe(t,e){var i=Object.create(t.prototype);for(var n in e)i[n]=e[n];return i}function Ne(){}var He="\\s*([+-]?\\d+)\\s*",ze="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Le="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Oe=/^#([0-9a-f]{3,8})$/,qe=new RegExp("^rgb\\("+[He,He,He]+"\\)$"),Ge=new RegExp("^rgb\\("+[Le,Le,Le]+"\\)$"),Re=new RegExp("^rgba\\("+[He,He,He,ze]+"\\)$"),Fe=new RegExp("^rgba\\("+[Le,Le,Le,ze]+"\\)$"),Be=new RegExp("^hsl\\("+[ze,Le,Le]+"\\)$"),We=new RegExp("^hsla\\("+[ze,Le,Le,ze]+"\\)$"),je={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function $e(){return this.rgb().formatHex()}function Ue(){return this.rgb().formatRgb()}function Ve(t){var e,i;return t=(t+"").trim().toLowerCase(),(e=Oe.exec(t))?(i=e[1].length,e=parseInt(e[1],16),6===i?Ye(e):3===i?new Je(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===i?new Je(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===i?new Je(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=qe.exec(t))?new Je(e[1],e[2],e[3],1):(e=Ge.exec(t))?new Je(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Re.exec(t))?Xe(e[1],e[2],e[3],e[4]):(e=Fe.exec(t))?Xe(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Be.exec(t))?ii(e[1],e[2]/100,e[3]/100,1):(e=We.exec(t))?ii(e[1],e[2]/100,e[3]/100,e[4]):je.hasOwnProperty(t)?Ye(je[t]):"transparent"===t?new Je(NaN,NaN,NaN,0):null}function Ye(t){return new Je(t>>16&255,t>>8&255,255&t,1)}function Xe(t,e,i,n){return n<=0&&(t=e=i=NaN),new Je(t,e,i,n)}function Ke(t){return t instanceof Ne||(t=Ve(t)),t?new Je((t=t.rgb()).r,t.g,t.b,t.opacity):new Je}function Qe(t,e,i,n){return 1===arguments.length?Ke(t):new Je(t,e,i,null==n?1:n)}function Je(t,e,i,n){this.r=+t,this.g=+e,this.b=+i,this.opacity=+n}function Ze(){return"#"+ei(this.r)+ei(this.g)+ei(this.b)}function ti(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function ei(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function ii(t,e,i,n){return n<=0?t=e=i=NaN:i<=0||i>=1?t=e=NaN:e<=0&&(t=NaN),new si(t,e,i,n)}function ni(t){if(t instanceof si)return new si(t.h,t.s,t.l,t.opacity);if(t instanceof Ne||(t=Ve(t)),!t)return new si;if(t instanceof si)return t;var e=(t=t.rgb()).r/255,i=t.g/255,n=t.b/255,s=Math.min(e,i,n),r=Math.max(e,i,n),a=NaN,o=r-s,l=(r+s)/2;return o?(a=e===r?(i-n)/o+6*(i<n):i===r?(n-e)/o+2:(e-i)/o+4,o/=l<.5?r+s:2-r-s,a*=60):o=l>0&&l<1?0:a,new si(a,o,l,t.opacity)}function si(t,e,i,n){this.h=+t,this.s=+e,this.l=+i,this.opacity=+n}function ri(t,e,i){return 255*(t<60?e+(i-e)*t/60:t<180?i:t<240?e+(i-e)*(240-t)/60:e)}function ai(t,e,i,n,s){var r=t*t,a=r*t;return((1-3*t+3*r-a)*e+(4-6*r+3*a)*i+(1+3*t+3*r-3*a)*n+a*s)/6}Ee(Ne,Ve,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:$e,formatHex:$e,formatHsl:function(){return ni(this).formatHsl()},formatRgb:Ue,toString:Ue}),Ee(Je,Qe,Pe(Ne,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Je(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Je(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Ze,formatHex:Ze,formatRgb:ti,toString:ti})),Ee(si,(function(t,e,i,n){return 1===arguments.length?ni(t):new si(t,e,i,null==n?1:n)}),Pe(Ne,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new si(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new si(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,i=this.l,n=i+(i<.5?i:1-i)*e,s=2*i-n;return new Je(ri(t>=240?t-240:t+120,s,n),ri(t,s,n),ri(t<120?t+240:t-120,s,n),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var oi=function(t){return function(){return t}};function li(t,e){return function(i){return t+i*e}}function ui(t){return 1==(t=+t)?hi:function(e,i){return i-e?function(t,e,i){return t=Math.pow(t,i),e=Math.pow(e,i)-t,i=1/i,function(n){return Math.pow(t+n*e,i)}}(e,i,t):oi(isNaN(e)?i:e)}}function hi(t,e){var i=e-t;return i?li(t,i):oi(isNaN(t)?e:t)}var ci=function t(e){var i=ui(e);function n(t,e){var n=i((t=Qe(t)).r,(e=Qe(e)).r),s=i(t.g,e.g),r=i(t.b,e.b),a=hi(t.opacity,e.opacity);return function(e){return t.r=n(e),t.g=s(e),t.b=r(e),t.opacity=a(e),t+""}}return n.gamma=t,n}(1);function di(t){return function(e){var i,n,s=e.length,r=new Array(s),a=new Array(s),o=new Array(s);for(i=0;i<s;++i)n=Qe(e[i]),r[i]=n.r||0,a[i]=n.g||0,o[i]=n.b||0;return r=t(r),a=t(a),o=t(o),n.opacity=1,function(t){return n.r=r(t),n.g=a(t),n.b=o(t),n+""}}}var pi=di((function(t){var e=t.length-1;return function(i){var n=i<=0?i=0:i>=1?(i=1,e-1):Math.floor(i*e),s=t[n],r=t[n+1],a=n>0?t[n-1]:2*s-r,o=n<e-1?t[n+2]:2*r-s;return ai((i-n/e)*e,a,s,r,o)}})),fi=(di((function(t){var e=t.length;return function(i){var n=Math.floor(((i%=1)<0?++i:i)*e),s=t[(n+e-1)%e],r=t[n%e],a=t[(n+1)%e],o=t[(n+2)%e];return ai((i-n/e)*e,s,r,a,o)}})),function(t,e){e||(e=[]);var i,n=t?Math.min(e.length,t.length):0,s=e.slice();return function(r){for(i=0;i<n;++i)s[i]=t[i]*(1-r)+e[i]*r;return s}});function gi(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function mi(t,e){var i,n=e?e.length:0,s=t?Math.min(n,t.length):0,r=new Array(s),a=new Array(n);for(i=0;i<s;++i)r[i]=Si(t[i],e[i]);for(;i<n;++i)a[i]=e[i];return function(t){for(i=0;i<s;++i)a[i]=r[i](t);return a}}var vi=function(t,e){var i=new Date;return t=+t,e=+e,function(n){return i.setTime(t*(1-n)+e*n),i}},bi=function(t,e){return t=+t,e=+e,function(i){return t*(1-i)+e*i}},yi=function(t,e){var i,n={},s={};for(i in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)i in t?n[i]=Si(t[i],e[i]):s[i]=e[i];return function(t){for(i in n)s[i]=n[i](t);return s}},_i=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,xi=new RegExp(_i.source,"g");var wi=function(t,e){var i,n,s,r=_i.lastIndex=xi.lastIndex=0,a=-1,o=[],l=[];for(t+="",e+="";(i=_i.exec(t))&&(n=xi.exec(e));)(s=n.index)>r&&(s=e.slice(r,s),o[a]?o[a]+=s:o[++a]=s),(i=i[0])===(n=n[0])?o[a]?o[a]+=n:o[++a]=n:(o[++a]=null,l.push({i:a,x:bi(i,n)})),r=xi.lastIndex;return r<e.length&&(s=e.slice(r),o[a]?o[a]+=s:o[++a]=s),o.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var i,n=0;n<e;++n)o[(i=l[n]).i]=i.x(t);return o.join("")})},Si=function(t,e){var i,n=typeof e;return null==e||"boolean"===n?oi(e):("number"===n?bi:"string"===n?(i=Ve(e))?(e=i,ci):wi:e instanceof Ve?ci:e instanceof Date?vi:gi(e)?fi:Array.isArray(e)?mi:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?yi:bi)(t,e)},Ci=function(t,e){return t=+t,e=+e,function(i){return Math.round(t*(1-i)+e*i)}},ki=function(t){return+t},Di=[0,1];function Ti(t){return t}function Ai(t,e){return(e-=t=+t)?function(i){return(i-t)/e}:(i=isNaN(e)?NaN:.5,function(){return i});var i}function Mi(t){var e,i=t[0],n=t[t.length-1];return i>n&&(e=i,i=n,n=e),function(t){return Math.max(i,Math.min(n,t))}}function Ii(t,e,i){var n=t[0],s=t[1],r=e[0],a=e[1];return s<n?(n=Ai(s,n),r=i(a,r)):(n=Ai(n,s),r=i(r,a)),function(t){return r(n(t))}}function Ei(t,e,i){var n=Math.min(t.length,e.length)-1,s=new Array(n),r=new Array(n),a=-1;for(t[n]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<n;)s[a]=Ai(t[a],t[a+1]),r[a]=i(e[a],e[a+1]);return function(e){var i=Xt(t,e,1,n)-1;return r[i](s[i](e))}}function Pi(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Ni(){var t,e,i,n,s,r,a=Di,o=Di,l=Si,u=Ti;function h(){return n=Math.min(a.length,o.length)>2?Ei:Ii,s=r=null,c}function c(e){return isNaN(e=+e)?i:(s||(s=n(a.map(t),o,l)))(t(u(e)))}return c.invert=function(i){return u(e((r||(r=n(o,a.map(t),bi)))(i)))},c.domain=function(t){return arguments.length?(a=De.call(t,ki),u===Ti||(u=Mi(a)),h()):a.slice()},c.range=function(t){return arguments.length?(o=Te.call(t),h()):o.slice()},c.rangeRound=function(t){return o=Te.call(t),l=Ci,h()},c.clamp=function(t){return arguments.length?(u=t?Mi(a):Ti,c):u!==Ti},c.interpolate=function(t){return arguments.length?(l=t,h()):l},c.unknown=function(t){return arguments.length?(i=t,c):i},function(i,n){return t=i,e=n,h()}}function Hi(t,e){return Ni()(t,e)}var zi=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Li(t){if(!(e=zi.exec(t)))throw new Error("invalid format: "+t);var e;return new Oi({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Oi(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Li.prototype=Oi.prototype,Oi.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var qi,Gi,Ri,Fi,Bi=function(t,e){if((i=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var i,n=t.slice(0,i);return[n.length>1?n[0]+n.slice(2):n,+t.slice(i+1)]},Wi=function(t){return(t=Bi(Math.abs(t)))?t[1]:NaN},ji=function(t,e){var i=Bi(t,e);if(!i)return t+"";var n=i[0],s=i[1];return s<0?"0."+new Array(-s).join("0")+n:n.length>s+1?n.slice(0,s+1)+"."+n.slice(s+1):n+new Array(s-n.length+2).join("0")},$i={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return ji(100*t,e)},r:ji,s:function(t,e){var i=Bi(t,e);if(!i)return t+"";var n=i[0],s=i[1],r=s-(qi=3*Math.max(-8,Math.min(8,Math.floor(s/3))))+1,a=n.length;return r===a?n:r>a?n+new Array(r-a+1).join("0"):r>0?n.slice(0,r)+"."+n.slice(r):"0."+new Array(1-r).join("0")+Bi(t,Math.max(0,e+r-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Ui=function(t){return t},Vi=Array.prototype.map,Yi=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];Gi=function(t){var e,i,n=void 0===t.grouping||void 0===t.thousands?Ui:(e=Vi.call(t.grouping,Number),i=t.thousands+"",function(t,n){for(var s=t.length,r=[],a=0,o=e[0],l=0;s>0&&o>0&&(l+o+1>n&&(o=Math.max(1,n-l)),r.push(t.substring(s-=o,s+o)),!((l+=o+1)>n));)o=e[a=(a+1)%e.length];return r.reverse().join(i)}),s=void 0===t.currency?"":t.currency[0]+"",r=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",o=void 0===t.numerals?Ui:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Vi.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",u=void 0===t.minus?"-":t.minus+"",h=void 0===t.nan?"NaN":t.nan+"";function c(t){var e=(t=Li(t)).fill,i=t.align,c=t.sign,d=t.symbol,p=t.zero,f=t.width,g=t.comma,m=t.precision,v=t.trim,b=t.type;"n"===b?(g=!0,b="g"):$i[b]||(void 0===m&&(m=12),v=!0,b="g"),(p||"0"===e&&"="===i)&&(p=!0,e="0",i="=");var y="$"===d?s:"#"===d&&/[boxX]/.test(b)?"0"+b.toLowerCase():"",_="$"===d?r:/[%p]/.test(b)?l:"",x=$i[b],w=/[defgprs%]/.test(b);function S(t){var s,r,l,d=y,S=_;if("c"===b)S=x(t)+S,t="";else{var C=(t=+t)<0;if(t=isNaN(t)?h:x(Math.abs(t),m),v&&(t=function(t){t:for(var e,i=t.length,n=1,s=-1;n<i;++n)switch(t[n]){case".":s=e=n;break;case"0":0===s&&(s=n),e=n;break;default:if(!+t[n])break t;s>0&&(s=0)}return s>0?t.slice(0,s)+t.slice(e+1):t}(t)),C&&0==+t&&(C=!1),d=(C?"("===c?c:u:"-"===c||"("===c?"":c)+d,S=("s"===b?Yi[8+qi/3]:"")+S+(C&&"("===c?")":""),w)for(s=-1,r=t.length;++s<r;)if(48>(l=t.charCodeAt(s))||l>57){S=(46===l?a+t.slice(s+1):t.slice(s))+S,t=t.slice(0,s);break}}g&&!p&&(t=n(t,1/0));var k=d.length+t.length+S.length,D=k<f?new Array(f-k+1).join(e):"";switch(g&&p&&(t=n(D+t,D.length?f-S.length:1/0),D=""),i){case"<":t=d+t+S+D;break;case"=":t=d+D+t+S;break;case"^":t=D.slice(0,k=D.length>>1)+d+t+S+D.slice(k);break;default:t=D+d+t+S}return o(t)}return m=void 0===m?6:/[gprs]/.test(b)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),S.toString=function(){return t+""},S}return{format:c,formatPrefix:function(t,e){var i=c(((t=Li(t)).type="f",t)),n=3*Math.max(-8,Math.min(8,Math.floor(Wi(e)/3))),s=Math.pow(10,-n),r=Yi[8+n/3];return function(t){return i(s*t)+r}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Ri=Gi.format,Fi=Gi.formatPrefix;var Xi=function(t,e,i,n){var s,r=ae(t,e,i);switch((n=Li(null==n?",f":n)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=n.precision||isNaN(s=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Wi(e)/3)))-Wi(Math.abs(t)))}(r,a))||(n.precision=s),Fi(n,a);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(s=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Wi(e)-Wi(t))+1}(r,Math.max(Math.abs(t),Math.abs(e))))||(n.precision=s-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(s=function(t){return Math.max(0,-Wi(Math.abs(t)))}(r))||(n.precision=s-2*("%"===n.type))}return Ri(n)};function Ki(t){var e=t.domain;return t.ticks=function(t){var i=e();return se(i[0],i[i.length-1],null==t?10:t)},t.tickFormat=function(t,i){var n=e();return Xi(n[0],n[n.length-1],null==t?10:t,i)},t.nice=function(i){null==i&&(i=10);var n,s=e(),r=0,a=s.length-1,o=s[r],l=s[a];return l<o&&(n=o,o=l,l=n,n=r,r=a,a=n),(n=re(o,l,i))>0?n=re(o=Math.floor(o/n)*n,l=Math.ceil(l/n)*n,i):n<0&&(n=re(o=Math.ceil(o*n)/n,l=Math.floor(l*n)/n,i)),n>0?(s[r]=Math.floor(o/n)*n,s[a]=Math.ceil(l/n)*n,e(s)):n<0&&(s[r]=Math.ceil(o*n)/n,s[a]=Math.floor(l*n)/n,e(s)),t},t}function Qi(){var t=Hi(Ti,Ti);return t.copy=function(){return Pi(t,Qi())},de.apply(t,arguments),Ki(t)}function Ji(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function Zi(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function tn(t){return t<0?-t*t:t*t}function en(t){var e=t(Ti,Ti),i=1;function n(){return 1===i?t(Ti,Ti):.5===i?t(Zi,tn):t(Ji(i),Ji(1/i))}return e.exponent=function(t){return arguments.length?(i=+t,n()):i},Ki(e)}function nn(){var t=en(Ni());return t.copy=function(){return Pi(t,nn()).exponent(t.exponent())},de.apply(t,arguments),t}function sn(){return nn.apply(null,arguments).exponent(.5)}var rn=new Date,an=new Date;function on(t,e,i,n){function s(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return s.floor=function(e){return t(e=new Date(+e)),e},s.ceil=function(i){return t(i=new Date(i-1)),e(i,1),t(i),i},s.round=function(t){var e=s(t),i=s.ceil(t);return t-e<i-t?e:i},s.offset=function(t,i){return e(t=new Date(+t),null==i?1:Math.floor(i)),t},s.range=function(i,n,r){var a,o=[];if(i=s.ceil(i),r=null==r?1:Math.floor(r),!(i<n&&r>0))return o;do{o.push(a=new Date(+i)),e(i,r),t(i)}while(a<i&&i<n);return o},s.filter=function(i){return on((function(e){if(e>=e)for(;t(e),!i(e);)e.setTime(e-1)}),(function(t,n){if(t>=t)if(n<0)for(;++n<=0;)for(;e(t,-1),!i(t););else for(;--n>=0;)for(;e(t,1),!i(t););}))},i&&(s.count=function(e,n){return rn.setTime(+e),an.setTime(+n),t(rn),t(an),Math.floor(i(rn,an))},s.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?s.filter(n?function(e){return n(e)%t==0}:function(e){return s.count(0,e)%t==0}):s:null}),s}var ln=on((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));ln.every=function(t){return isFinite(t=Math.floor(t))&&t>0?on((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,i){e.setFullYear(e.getFullYear()+i*t)})):null};var un=ln,hn=(ln.range,on((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));hn.range;function cn(t){return on((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var dn=cn(0),pn=cn(1),fn=cn(2),gn=cn(3),mn=cn(4),vn=cn(5),bn=cn(6),yn=(dn.range,pn.range,fn.range,gn.range,mn.range,vn.range,bn.range,on((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),_n=yn,xn=(yn.range,on((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),wn=(xn.range,on((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()}))),Sn=(wn.range,on((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Cn=(Sn.range,on((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));Cn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?on((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,i){e.setTime(+e+i*t)}),(function(e,i){return(i-e)/t})):Cn:null};Cn.range;function kn(t){return on((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var Dn=kn(0),Tn=kn(1),An=kn(2),Mn=kn(3),In=kn(4),En=kn(5),Pn=kn(6),Nn=(Dn.range,Tn.range,An.range,Mn.range,In.range,En.range,Pn.range,on((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Hn=Nn,zn=(Nn.range,on((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));zn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?on((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,i){e.setUTCFullYear(e.getUTCFullYear()+i*t)})):null};var Ln=zn;zn.range;function On(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function qn(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Gn(t,e,i){return{y:t,m:e,d:i,H:0,M:0,S:0,L:0}}var Rn,Fn={"-":"",_:" ",0:"0"},Bn=/^\s*\d+/,Wn=/^%/,jn=/[\\^$*+?|[\]().{}]/g;function $n(t,e,i){var n=t<0?"-":"",s=(n?-t:t)+"",r=s.length;return n+(r<i?new Array(i-r+1).join(e)+s:s)}function Un(t){return t.replace(jn,"\\$&")}function Vn(t){return new RegExp("^(?:"+t.map(Un).join("|")+")","i")}function Yn(t){for(var e={},i=-1,n=t.length;++i<n;)e[t[i].toLowerCase()]=i;return e}function Xn(t,e,i){var n=Bn.exec(e.slice(i,i+1));return n?(t.w=+n[0],i+n[0].length):-1}function Kn(t,e,i){var n=Bn.exec(e.slice(i,i+1));return n?(t.u=+n[0],i+n[0].length):-1}function Qn(t,e,i){var n=Bn.exec(e.slice(i,i+2));return n?(t.U=+n[0],i+n[0].length):-1}function Jn(t,e,i){var n=Bn.exec(e.slice(i,i+2));return n?(t.V=+n[0],i+n[0].length):-1}function Zn(t,e,i){var n=Bn.exec(e.slice(i,i+2));return n?(t.W=+n[0],i+n[0].length):-1}function ts(t,e,i){var n=Bn.exec(e.slice(i,i+4));return n?(t.y=+n[0],i+n[0].length):-1}function es(t,e,i){var n=Bn.exec(e.slice(i,i+2));return n?(t.y=+n[0]+(+n[0]>68?1900:2e3),i+n[0].length):-1}function is(t,e,i){var n=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(i,i+6));return n?(t.Z=n[1]?0:-(n[2]+(n[3]||"00")),i+n[0].length):-1}function ns(t,e,i){var n=Bn.exec(e.slice(i,i+1));return n?(t.q=3*n[0]-3,i+n[0].length):-1}function ss(t,e,i){var n=Bn.exec(e.slice(i,i+2));return n?(t.m=n[0]-1,i+n[0].length):-1}function rs(t,e,i){var n=Bn.exec(e.slice(i,i+2));return n?(t.d=+n[0],i+n[0].length):-1}function as(t,e,i){var n=Bn.exec(e.slice(i,i+3));return n?(t.m=0,t.d=+n[0],i+n[0].length):-1}function os(t,e,i){var n=Bn.exec(e.slice(i,i+2));return n?(t.H=+n[0],i+n[0].length):-1}function ls(t,e,i){var n=Bn.exec(e.slice(i,i+2));return n?(t.M=+n[0],i+n[0].length):-1}function us(t,e,i){var n=Bn.exec(e.slice(i,i+2));return n?(t.S=+n[0],i+n[0].length):-1}function hs(t,e,i){var n=Bn.exec(e.slice(i,i+3));return n?(t.L=+n[0],i+n[0].length):-1}function cs(t,e,i){var n=Bn.exec(e.slice(i,i+6));return n?(t.L=Math.floor(n[0]/1e3),i+n[0].length):-1}function ds(t,e,i){var n=Wn.exec(e.slice(i,i+1));return n?i+n[0].length:-1}function ps(t,e,i){var n=Bn.exec(e.slice(i));return n?(t.Q=+n[0],i+n[0].length):-1}function fs(t,e,i){var n=Bn.exec(e.slice(i));return n?(t.s=+n[0],i+n[0].length):-1}function gs(t,e){return $n(t.getDate(),e,2)}function ms(t,e){return $n(t.getHours(),e,2)}function vs(t,e){return $n(t.getHours()%12||12,e,2)}function bs(t,e){return $n(1+_n.count(un(t),t),e,3)}function ys(t,e){return $n(t.getMilliseconds(),e,3)}function _s(t,e){return ys(t,e)+"000"}function xs(t,e){return $n(t.getMonth()+1,e,2)}function ws(t,e){return $n(t.getMinutes(),e,2)}function Ss(t,e){return $n(t.getSeconds(),e,2)}function Cs(t){var e=t.getDay();return 0===e?7:e}function ks(t,e){return $n(dn.count(un(t)-1,t),e,2)}function Ds(t,e){var i=t.getDay();return t=i>=4||0===i?mn(t):mn.ceil(t),$n(mn.count(un(t),t)+(4===un(t).getDay()),e,2)}function Ts(t){return t.getDay()}function As(t,e){return $n(pn.count(un(t)-1,t),e,2)}function Ms(t,e){return $n(t.getFullYear()%100,e,2)}function Is(t,e){return $n(t.getFullYear()%1e4,e,4)}function Es(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+$n(e/60|0,"0",2)+$n(e%60,"0",2)}function Ps(t,e){return $n(t.getUTCDate(),e,2)}function Ns(t,e){return $n(t.getUTCHours(),e,2)}function Hs(t,e){return $n(t.getUTCHours()%12||12,e,2)}function zs(t,e){return $n(1+Hn.count(Ln(t),t),e,3)}function Ls(t,e){return $n(t.getUTCMilliseconds(),e,3)}function Os(t,e){return Ls(t,e)+"000"}function qs(t,e){return $n(t.getUTCMonth()+1,e,2)}function Gs(t,e){return $n(t.getUTCMinutes(),e,2)}function Rs(t,e){return $n(t.getUTCSeconds(),e,2)}function Fs(t){var e=t.getUTCDay();return 0===e?7:e}function Bs(t,e){return $n(Dn.count(Ln(t)-1,t),e,2)}function Ws(t,e){var i=t.getUTCDay();return t=i>=4||0===i?In(t):In.ceil(t),$n(In.count(Ln(t),t)+(4===Ln(t).getUTCDay()),e,2)}function js(t){return t.getUTCDay()}function $s(t,e){return $n(Tn.count(Ln(t)-1,t),e,2)}function Us(t,e){return $n(t.getUTCFullYear()%100,e,2)}function Vs(t,e){return $n(t.getUTCFullYear()%1e4,e,4)}function Ys(){return"+0000"}function Xs(){return"%"}function Ks(t){return+t}function Qs(t){return Math.floor(+t/1e3)}!function(t){Rn=function(t){var e=t.dateTime,i=t.date,n=t.time,s=t.periods,r=t.days,a=t.shortDays,o=t.months,l=t.shortMonths,u=Vn(s),h=Yn(s),c=Vn(r),d=Yn(r),p=Vn(a),f=Yn(a),g=Vn(o),m=Yn(o),v=Vn(l),b=Yn(l),y={a:function(t){return a[t.getDay()]},A:function(t){return r[t.getDay()]},b:function(t){return l[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:gs,e:gs,f:_s,H:ms,I:vs,j:bs,L:ys,m:xs,M:ws,p:function(t){return s[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ks,s:Qs,S:Ss,u:Cs,U:ks,V:Ds,w:Ts,W:As,x:null,X:null,y:Ms,Y:Is,Z:Es,"%":Xs},_={a:function(t){return a[t.getUTCDay()]},A:function(t){return r[t.getUTCDay()]},b:function(t){return l[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:Ps,e:Ps,f:Os,H:Ns,I:Hs,j:zs,L:Ls,m:qs,M:Gs,p:function(t){return s[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ks,s:Qs,S:Rs,u:Fs,U:Bs,V:Ws,w:js,W:$s,x:null,X:null,y:Us,Y:Vs,Z:Ys,"%":Xs},x={a:function(t,e,i){var n=p.exec(e.slice(i));return n?(t.w=f[n[0].toLowerCase()],i+n[0].length):-1},A:function(t,e,i){var n=c.exec(e.slice(i));return n?(t.w=d[n[0].toLowerCase()],i+n[0].length):-1},b:function(t,e,i){var n=v.exec(e.slice(i));return n?(t.m=b[n[0].toLowerCase()],i+n[0].length):-1},B:function(t,e,i){var n=g.exec(e.slice(i));return n?(t.m=m[n[0].toLowerCase()],i+n[0].length):-1},c:function(t,i,n){return C(t,e,i,n)},d:rs,e:rs,f:cs,H:os,I:os,j:as,L:hs,m:ss,M:ls,p:function(t,e,i){var n=u.exec(e.slice(i));return n?(t.p=h[n[0].toLowerCase()],i+n[0].length):-1},q:ns,Q:ps,s:fs,S:us,u:Kn,U:Qn,V:Jn,w:Xn,W:Zn,x:function(t,e,n){return C(t,i,e,n)},X:function(t,e,i){return C(t,n,e,i)},y:es,Y:ts,Z:is,"%":ds};function w(t,e){return function(i){var n,s,r,a=[],o=-1,l=0,u=t.length;for(i instanceof Date||(i=new Date(+i));++o<u;)37===t.charCodeAt(o)&&(a.push(t.slice(l,o)),null!=(s=Fn[n=t.charAt(++o)])?n=t.charAt(++o):s="e"===n?" ":"0",(r=e[n])&&(n=r(i,s)),a.push(n),l=o+1);return a.push(t.slice(l,o)),a.join("")}}function S(t,e){return function(i){var n,s,r=Gn(1900,void 0,1);if(C(r,t,i+="",0)!=i.length)return null;if("Q"in r)return new Date(r.Q);if("s"in r)return new Date(1e3*r.s+("L"in r?r.L:0));if(e&&!("Z"in r)&&(r.Z=0),"p"in r&&(r.H=r.H%12+12*r.p),void 0===r.m&&(r.m="q"in r?r.q:0),"V"in r){if(r.V<1||r.V>53)return null;"w"in r||(r.w=1),"Z"in r?(s=(n=qn(Gn(r.y,0,1))).getUTCDay(),n=s>4||0===s?Tn.ceil(n):Tn(n),n=Hn.offset(n,7*(r.V-1)),r.y=n.getUTCFullYear(),r.m=n.getUTCMonth(),r.d=n.getUTCDate()+(r.w+6)%7):(s=(n=On(Gn(r.y,0,1))).getDay(),n=s>4||0===s?pn.ceil(n):pn(n),n=_n.offset(n,7*(r.V-1)),r.y=n.getFullYear(),r.m=n.getMonth(),r.d=n.getDate()+(r.w+6)%7)}else("W"in r||"U"in r)&&("w"in r||(r.w="u"in r?r.u%7:"W"in r?1:0),s="Z"in r?qn(Gn(r.y,0,1)).getUTCDay():On(Gn(r.y,0,1)).getDay(),r.m=0,r.d="W"in r?(r.w+6)%7+7*r.W-(s+5)%7:r.w+7*r.U-(s+6)%7);return"Z"in r?(r.H+=r.Z/100|0,r.M+=r.Z%100,qn(r)):On(r)}}function C(t,e,i,n){for(var s,r,a=0,o=e.length,l=i.length;a<o;){if(n>=l)return-1;if(37===(s=e.charCodeAt(a++))){if(s=e.charAt(a++),!(r=x[s in Fn?e.charAt(a++):s])||(n=r(t,i,n))<0)return-1}else if(s!=i.charCodeAt(n++))return-1}return n}return y.x=w(i,y),y.X=w(n,y),y.c=w(e,y),_.x=w(i,_),_.X=w(n,_),_.c=w(e,_),{format:function(t){var e=w(t+="",y);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",_);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t+="",!0);return e.toString=function(){return t},e}}}(t),Rn.format,Rn.parse,Rn.utcFormat,Rn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Js=on((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Zs=(Js.range,on((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),tr=(Zs.range,on((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})));tr.range;function er(){var t,e,i,n,s,r=0,a=1,o=Ti,l=!1;function u(e){return isNaN(e=+e)?s:o(0===i?.5:(e=(n(e)-t)*i,l?Math.max(0,Math.min(1,e)):e))}return u.domain=function(s){return arguments.length?(t=n(r=+s[0]),e=n(a=+s[1]),i=t===e?0:1/(e-t),u):[r,a]},u.clamp=function(t){return arguments.length?(l=!!t,u):l},u.interpolator=function(t){return arguments.length?(o=t,u):o},u.unknown=function(t){return arguments.length?(s=t,u):s},function(s){return n=s,t=s(r),e=s(a),i=t===e?0:1/(e-t),u}}function ir(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}var nr={value:function(){}};function sr(){for(var t,e=0,i=arguments.length,n={};e<i;++e){if(!(t=arguments[e]+"")||t in n||/[\s.]/.test(t))throw new Error("illegal type: "+t);n[t]=[]}return new rr(n)}function rr(t){this._=t}function ar(t,e){return t.trim().split(/^|\s+/).map((function(t){var i="",n=t.indexOf(".");if(n>=0&&(i=t.slice(n+1),t=t.slice(0,n)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:i}}))}function or(t,e){for(var i,n=0,s=t.length;n<s;++n)if((i=t[n]).name===e)return i.value}function lr(t,e,i){for(var n=0,s=t.length;n<s;++n)if(t[n].name===e){t[n]=nr,t=t.slice(0,n).concat(t.slice(n+1));break}return null!=i&&t.push({name:e,value:i}),t}rr.prototype=sr.prototype={constructor:rr,on:function(t,e){var i,n=this._,s=ar(t+"",n),r=-1,a=s.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++r<a;)if(i=(t=s[r]).type)n[i]=lr(n[i],t.name,e);else if(null==e)for(i in n)n[i]=lr(n[i],t.name,null);return this}for(;++r<a;)if((i=(t=s[r]).type)&&(i=or(n[i],t.name)))return i},copy:function(){var t={},e=this._;for(var i in e)t[i]=e[i].slice();return new rr(t)},call:function(t,e){if((i=arguments.length-2)>0)for(var i,n,s=new Array(i),r=0;r<i;++r)s[r]=arguments[r+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(r=0,i=(n=this._[t]).length;r<i;++r)n[r].value.apply(e,s)},apply:function(t,e,i){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var n=this._[t],s=0,r=n.length;s<r;++s)n[s].value.apply(e,i)}};var ur=sr;var hr=function(){vt.preventDefault(),vt.stopImmediatePropagation()},cr=function(t){var e=t.document.documentElement,i=Et(t).on("dragstart.drag",hr,!0);"onselectstart"in e?i.on("selectstart.drag",hr,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};function dr(t,e){var i=t.document.documentElement,n=Et(t).on("dragstart.drag",null);e&&(n.on("click.drag",hr,!0),setTimeout((function(){n.on("click.drag",null)}),0)),"onselectstart"in i?n.on("selectstart.drag",null):(i.style.MozUserSelect=i.__noselect,delete i.__noselect)}var pr,fr,gr=function(){for(var t,e=vt;t=e.sourceEvent;)e=t;return e},mr=function(t,e){var i=t.ownerSVGElement||t;if(i.createSVGPoint){var n=i.createSVGPoint();return n.x=e.clientX,n.y=e.clientY,[(n=n.matrixTransform(t.getScreenCTM().inverse())).x,n.y]}var s=t.getBoundingClientRect();return[e.clientX-s.left-t.clientLeft,e.clientY-s.top-t.clientTop]},vr=function(t,e,i){arguments.length<3&&(i=e,e=gr().changedTouches);for(var n,s=0,r=e?e.length:0;s<r;++s)if((n=e[s]).identifier===i)return mr(t,n);return null},br=function(t){var e=gr();return e.changedTouches&&(e=e.changedTouches[0]),mr(t,e)},yr=0,_r=0,xr=0,wr=0,Sr=0,Cr=0,kr="object"==typeof performance&&performance.now?performance:Date,Dr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Tr(){return Sr||(Dr(Ar),Sr=kr.now()+Cr)}function Ar(){Sr=0}function Mr(){this._call=this._time=this._next=null}function Ir(t,e,i){var n=new Mr;return n.restart(t,e,i),n}function Er(){Sr=(wr=kr.now())+Cr,yr=_r=0;try{!function(){Tr(),++yr;for(var t,e=pr;e;)(t=Sr-e._time)>=0&&e._call.call(null,t),e=e._next;--yr}()}finally{yr=0,function(){var t,e,i=pr,n=1/0;for(;i;)i._call?(n>i._time&&(n=i._time),t=i,i=i._next):(e=i._next,i._next=null,i=t?t._next=e:pr=e);fr=t,Nr(n)}(),Sr=0}}function Pr(){var t=kr.now(),e=t-wr;e>1e3&&(Cr-=e,wr=t)}function Nr(t){yr||(_r&&(_r=clearTimeout(_r)),t-Sr>24?(t<1/0&&(_r=setTimeout(Er,t-kr.now()-Cr)),xr&&(xr=clearInterval(xr))):(xr||(wr=kr.now(),xr=setInterval(Pr,1e3)),yr=1,Dr(Er)))}Mr.prototype=Ir.prototype={constructor:Mr,restart:function(t,e,i){if("function"!=typeof t)throw new TypeError("callback is not a function");i=(null==i?Tr():+i)+(null==e?0:+e),this._next||fr===this||(fr?fr._next=this:pr=this,fr=this),this._call=t,this._time=i,Nr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Nr())}};var Hr=function(t,e,i){var n=new Mr;return e=null==e?0:+e,n.restart((function(i){n.stop(),t(i+e)}),e,i),n},zr=ur("start","end","cancel","interrupt"),Lr=[],Or=function(t,e,i,n,s,r){var a=t.__transition;if(a){if(i in a)return}else t.__transition={};!function(t,e,i){var n,s=t.__transition;function r(l){var u,h,c,d;if(1!==i.state)return o();for(u in s)if((d=s[u]).name===i.name){if(3===d.state)return Hr(r);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete s[u]):+u<e&&(d.state=6,d.timer.stop(),d.on.call("cancel",t,t.__data__,d.index,d.group),delete s[u])}if(Hr((function(){3===i.state&&(i.state=4,i.timer.restart(a,i.delay,i.time),a(l))})),i.state=2,i.on.call("start",t,t.__data__,i.index,i.group),2===i.state){for(i.state=3,n=new Array(c=i.tween.length),u=0,h=-1;u<c;++u)(d=i.tween[u].value.call(t,t.__data__,i.index,i.group))&&(n[++h]=d);n.length=h+1}}function a(e){for(var s=e<i.duration?i.ease.call(null,e/i.duration):(i.timer.restart(o),i.state=5,1),r=-1,a=n.length;++r<a;)n[r].call(t,s);5===i.state&&(i.on.call("end",t,t.__data__,i.index,i.group),o())}function o(){for(var n in i.state=6,i.timer.stop(),delete s[e],s)return;delete t.__transition}s[e]=i,i.timer=Ir((function(t){i.state=1,i.timer.restart(r,i.delay,i.time),i.delay<=t&&r(t-i.delay)}),0,i.time)}(t,i,{name:e,index:n,group:s,on:zr,tween:Lr,time:r.time,delay:r.delay,duration:r.duration,ease:r.ease,timer:null,state:0})};function qr(t,e){var i=Rr(t,e);if(i.state>0)throw new Error("too late; already scheduled");return i}function Gr(t,e){var i=Rr(t,e);if(i.state>3)throw new Error("too late; already running");return i}function Rr(t,e){var i=t.__transition;if(!i||!(i=i[e]))throw new Error("transition not found");return i}var Fr,Br,Wr,jr,$r=function(t,e){var i,n,s,r=t.__transition,a=!0;if(r){for(s in e=null==e?null:e+"",r)(i=r[s]).name===e?(n=i.state>2&&i.state<5,i.state=6,i.timer.stop(),i.on.call(n?"interrupt":"cancel",t,t.__data__,i.index,i.group),delete r[s]):a=!1;a&&delete t.__transition}},Ur=180/Math.PI,Vr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Yr=function(t,e,i,n,s,r){var a,o,l;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(l=t*i+e*n)&&(i-=t*l,n-=e*l),(o=Math.sqrt(i*i+n*n))&&(i/=o,n/=o,l/=o),t*n<e*i&&(t=-t,e=-e,l=-l,a=-a),{translateX:s,translateY:r,rotate:Math.atan2(e,t)*Ur,skewX:Math.atan(l)*Ur,scaleX:a,scaleY:o}};function Xr(t,e,i,n){function s(t){return t.length?t.pop()+" ":""}return function(r,a){var o=[],l=[];return r=t(r),a=t(a),function(t,n,s,r,a,o){if(t!==s||n!==r){var l=a.push("translate(",null,e,null,i);o.push({i:l-4,x:bi(t,s)},{i:l-2,x:bi(n,r)})}else(s||r)&&a.push("translate("+s+e+r+i)}(r.translateX,r.translateY,a.translateX,a.translateY,o,l),function(t,e,i,r){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),r.push({i:i.push(s(i)+"rotate(",null,n)-2,x:bi(t,e)})):e&&i.push(s(i)+"rotate("+e+n)}(r.rotate,a.rotate,o,l),function(t,e,i,r){t!==e?r.push({i:i.push(s(i)+"skewX(",null,n)-2,x:bi(t,e)}):e&&i.push(s(i)+"skewX("+e+n)}(r.skewX,a.skewX,o,l),function(t,e,i,n,r,a){if(t!==i||e!==n){var o=r.push(s(r)+"scale(",null,",",null,")");a.push({i:o-4,x:bi(t,i)},{i:o-2,x:bi(e,n)})}else 1===i&&1===n||r.push(s(r)+"scale("+i+","+n+")")}(r.scaleX,r.scaleY,a.scaleX,a.scaleY,o,l),r=a=null,function(t){for(var e,i=-1,n=l.length;++i<n;)o[(e=l[i]).i]=e.x(t);return o.join("")}}}var Kr=Xr((function(t){return"none"===t?Vr:(Fr||(Fr=document.createElement("DIV"),Br=document.documentElement,Wr=document.defaultView),Fr.style.transform=t,t=Wr.getComputedStyle(Br.appendChild(Fr),null).getPropertyValue("transform"),Br.removeChild(Fr),t=t.slice(7,-1).split(","),Yr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Qr=Xr((function(t){return null==t?Vr:(jr||(jr=document.createElementNS("http://www.w3.org/2000/svg","g")),jr.setAttribute("transform",t),(t=jr.transform.baseVal.consolidate())?(t=t.matrix,Yr(t.a,t.b,t.c,t.d,t.e,t.f)):Vr)}),", ",")",")");function Jr(t,e){var i,n;return function(){var s=Gr(this,t),r=s.tween;if(r!==i)for(var a=0,o=(n=i=r).length;a<o;++a)if(n[a].name===e){(n=n.slice()).splice(a,1);break}s.tween=n}}function Zr(t,e,i){var n,s;if("function"!=typeof i)throw new Error;return function(){var r=Gr(this,t),a=r.tween;if(a!==n){s=(n=a).slice();for(var o={name:e,value:i},l=0,u=s.length;l<u;++l)if(s[l].name===e){s[l]=o;break}l===u&&s.push(o)}r.tween=s}}function ta(t,e,i){var n=t._id;return t.each((function(){var t=Gr(this,n);(t.value||(t.value={}))[e]=i.apply(this,arguments)})),function(t){return Rr(t,n).value[e]}}var ea=function(t,e){var i;return("number"==typeof e?bi:e instanceof Ve?ci:(i=Ve(e))?(e=i,ci):wi)(t,e)};function ia(t){return function(){this.removeAttribute(t)}}function na(t){return function(){this.removeAttributeNS(t.space,t.local)}}function sa(t,e,i){var n,s,r=i+"";return function(){var a=this.getAttribute(t);return a===r?null:a===n?s:s=e(n=a,i)}}function ra(t,e,i){var n,s,r=i+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===r?null:a===n?s:s=e(n=a,i)}}function aa(t,e,i){var n,s,r;return function(){var a,o,l=i(this);if(null!=l)return(a=this.getAttribute(t))===(o=l+"")?null:a===n&&o===s?r:(s=o,r=e(n=a,l));this.removeAttribute(t)}}function oa(t,e,i){var n,s,r;return function(){var a,o,l=i(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(o=l+"")?null:a===n&&o===s?r:(s=o,r=e(n=a,l));this.removeAttributeNS(t.space,t.local)}}function la(t,e){return function(i){this.setAttribute(t,e.call(this,i))}}function ua(t,e){return function(i){this.setAttributeNS(t.space,t.local,e.call(this,i))}}function ha(t,e){var i,n;function s(){var s=e.apply(this,arguments);return s!==n&&(i=(n=s)&&ua(t,s)),i}return s._value=e,s}function ca(t,e){var i,n;function s(){var s=e.apply(this,arguments);return s!==n&&(i=(n=s)&&la(t,s)),i}return s._value=e,s}function da(t,e){return function(){qr(this,t).delay=+e.apply(this,arguments)}}function pa(t,e){return e=+e,function(){qr(this,t).delay=e}}function fa(t,e){return function(){Gr(this,t).duration=+e.apply(this,arguments)}}function ga(t,e){return e=+e,function(){Gr(this,t).duration=e}}function ma(t,e){if("function"!=typeof e)throw new Error;return function(){Gr(this,t).ease=e}}function va(t,e,i){var n,s,r=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?qr:Gr;return function(){var a=r(this,t),o=a.on;o!==n&&(s=(n=o).copy()).on(e,i),a.on=s}}var ba=It.prototype.constructor;function ya(t){return function(){this.style.removeProperty(t)}}function _a(t,e,i){return function(n){this.style.setProperty(t,e.call(this,n),i)}}function xa(t,e,i){var n,s;function r(){var r=e.apply(this,arguments);return r!==s&&(n=(s=r)&&_a(t,r,i)),n}return r._value=e,r}function wa(t){return function(e){this.textContent=t.call(this,e)}}function Sa(t){var e,i;function n(){var n=t.apply(this,arguments);return n!==i&&(e=(i=n)&&wa(n)),e}return n._value=t,n}var Ca=0;function ka(t,e,i,n){this._groups=t,this._parents=e,this._name=i,this._id=n}function Da(){return++Ca}var Ta=It.prototype;ka.prototype=function(t){return It().transition(t)}.prototype={constructor:ka,select:function(t){var e=this._name,i=this._id;"function"!=typeof t&&(t=x(t));for(var n=this._groups,s=n.length,r=new Array(s),a=0;a<s;++a)for(var o,l,u=n[a],h=u.length,c=r[a]=new Array(h),d=0;d<h;++d)(o=u[d])&&(l=t.call(o,o.__data__,d,u))&&("__data__"in o&&(l.__data__=o.__data__),c[d]=l,Or(c[d],e,i,d,c,Rr(o,i)));return new ka(r,this._parents,e,i)},selectAll:function(t){var e=this._name,i=this._id;"function"!=typeof t&&(t=S(t));for(var n=this._groups,s=n.length,r=[],a=[],o=0;o<s;++o)for(var l,u=n[o],h=u.length,c=0;c<h;++c)if(l=u[c]){for(var d,p=t.call(l,l.__data__,c,u),f=Rr(l,i),g=0,m=p.length;g<m;++g)(d=p[g])&&Or(d,e,i,g,p,f);r.push(p),a.push(l)}return new ka(r,a,e,i)},filter:function(t){"function"!=typeof t&&(t=C(t));for(var e=this._groups,i=e.length,n=new Array(i),s=0;s<i;++s)for(var r,a=e[s],o=a.length,l=n[s]=[],u=0;u<o;++u)(r=a[u])&&t.call(r,r.__data__,u,a)&&l.push(r);return new ka(n,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,i=t._groups,n=e.length,s=i.length,r=Math.min(n,s),a=new Array(n),o=0;o<r;++o)for(var l,u=e[o],h=i[o],c=u.length,d=a[o]=new Array(c),p=0;p<c;++p)(l=u[p]||h[p])&&(d[p]=l);for(;o<n;++o)a[o]=e[o];return new ka(a,this._parents,this._name,this._id)},selection:function(){return new ba(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,i=Da(),n=this._groups,s=n.length,r=0;r<s;++r)for(var a,o=n[r],l=o.length,u=0;u<l;++u)if(a=o[u]){var h=Rr(a,e);Or(a,t,i,u,o,{time:h.time+h.delay+h.duration,delay:0,duration:h.duration,ease:h.ease})}return new ka(n,this._parents,t,i)},call:Ta.call,nodes:Ta.nodes,node:Ta.node,size:Ta.size,empty:Ta.empty,each:Ta.each,on:function(t,e){var i=this._id;return arguments.length<2?Rr(this.node(),i).on.on(t):this.each(va(i,t,e))},attr:function(t,e){var i=P(t),n="transform"===i?Qr:ea;return this.attrTween(t,"function"==typeof e?(i.local?oa:aa)(i,n,ta(this,"attr."+t,e)):null==e?(i.local?na:ia)(i):(i.local?ra:sa)(i,n,e))},attrTween:function(t,e){var i="attr."+t;if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==e)return this.tween(i,null);if("function"!=typeof e)throw new Error;var n=P(t);return this.tween(i,(n.local?ha:ca)(n,e))},style:function(t,e,i){var n="transform"==(t+="")?Kr:ea;return null==e?this.styleTween(t,function(t,e){var i,n,s;return function(){var r=W(this,t),a=(this.style.removeProperty(t),W(this,t));return r===a?null:r===i&&a===n?s:s=e(i=r,n=a)}}(t,n)).on("end.style."+t,ya(t)):"function"==typeof e?this.styleTween(t,function(t,e,i){var n,s,r;return function(){var a=W(this,t),o=i(this),l=o+"";return null==o&&(this.style.removeProperty(t),l=o=W(this,t)),a===l?null:a===n&&l===s?r:(s=l,r=e(n=a,o))}}(t,n,ta(this,"style."+t,e))).each(function(t,e){var i,n,s,r,a="style."+e,o="end."+a;return function(){var l=Gr(this,t),u=l.on,h=null==l.value[a]?r||(r=ya(e)):void 0;u===i&&s===h||(n=(i=u).copy()).on(o,s=h),l.on=n}}(this._id,t)):this.styleTween(t,function(t,e,i){var n,s,r=i+"";return function(){var a=W(this,t);return a===r?null:a===n?s:s=e(n=a,i)}}(t,n,e),i).on("end.style."+t,null)},styleTween:function(t,e,i){var n="style."+(t+="");if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;return this.tween(n,xa(t,e,null==i?"":i))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(ta(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Sa(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var i in this.__transition)if(+i!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var i=this._id;if(t+="",arguments.length<2){for(var n,s=Rr(this.node(),i).tween,r=0,a=s.length;r<a;++r)if((n=s[r]).name===t)return n.value;return null}return this.each((null==e?Jr:Zr)(i,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?da:pa)(e,t)):Rr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?fa:ga)(e,t)):Rr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(ma(e,t)):Rr(this.node(),e).ease},end:function(){var t,e,i=this,n=i._id,s=i.size();return new Promise((function(r,a){var o={value:a},l={value:function(){0==--s&&r()}};i.each((function(){var i=Gr(this,n),s=i.on;s!==t&&((e=(t=s).copy())._.cancel.push(o),e._.interrupt.push(o),e._.end.push(l)),i.on=e}))}))}};var Aa={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ma(t,e){for(var i;!(i=t.__transition)||!(i=i[e]);)if(!(t=t.parentNode))return Aa.time=Tr(),Aa;return i}It.prototype.interrupt=function(t){return this.each((function(){$r(this,t)}))},It.prototype.transition=function(t){var e,i;t instanceof ka?(e=t._id,t=t._name):(e=Da(),(i=Aa).time=Tr(),t=null==t?null:t+"");for(var n=this._groups,s=n.length,r=0;r<s;++r)for(var a,o=n[r],l=o.length,u=0;u<l;++u)(a=o[u])&&Or(a,t,e,u,o,i||Ma(a,e));return new ka(n,this._parents,t,e)};var Ia=function(t){return function(){return t}},Ea=function(t,e,i){this.target=t,this.type=e,this.selection=i};function Pa(){vt.stopImmediatePropagation()}var Na=function(){vt.preventDefault(),vt.stopImmediatePropagation()},Ha={name:"drag"},za={name:"space"},La={name:"handle"},Oa={name:"center"};function qa(t){return[+t[0],+t[1]]}function Ga(t){return[qa(t[0]),qa(t[1])]}function Ra(t){return function(e){return vr(e,vt.touches,t)}}var Fa={name:"x",handles:["w","e"].map(Xa),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Ba={name:"y",handles:["n","s"].map(Xa),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Wa={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Xa),input:function(t){return null==t?null:Ga(t)},output:function(t){return t}},ja={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},$a={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Ua={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Va={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Ya={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Xa(t){return{type:t}}function Ka(){return!vt.ctrlKey&&!vt.button}function Qa(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Ja(){return navigator.maxTouchPoints||"ontouchstart"in this}function Za(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function to(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function eo(){return io(Fa)}function io(t){var e,i=Qa,n=Ka,s=Ja,r=!0,a=ur("start","brush","end"),o=6;function l(e){var i=e.property("__brush",g).selectAll(".overlay").data([Xa("overlay")]);i.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",ja.overlay).merge(i).each((function(){var t=Za(this).extent;Et(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([Xa("selection")]).enter().append("rect").attr("class","selection").attr("cursor",ja.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var n=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));n.exit().remove(),n.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return ja[t.type]})),e.each(u).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",d).filter(s).on("touchstart.brush",d).on("touchmove.brush",p).on("touchend.brush touchcancel.brush",f).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function u(){var t=Et(this),e=Za(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-o/2:e[0][0]-o/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-o/2:e[0][1]-o/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+o:o})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+o:o}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function h(t,e,i){return!i&&t.__brush.emitter||new c(t,e)}function c(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function d(){if((!e||vt.touches)&&n.apply(this,arguments)){var i,s,a,o,l,c,d,p,f,g,m,v=this,b=vt.target.__data__.type,y="selection"===(r&&vt.metaKey?b="overlay":b)?Ha:r&&vt.altKey?Oa:La,_=t===Ba?null:Va[b],x=t===Fa?null:Ya[b],w=Za(v),S=w.extent,C=w.selection,k=S[0][0],D=S[0][1],T=S[1][0],A=S[1][1],M=0,I=0,E=_&&x&&r&&vt.shiftKey,P=vt.touches?Ra(vt.changedTouches[0].identifier):br,N=P(v),H=N,z=h(v,arguments,!0).beforestart();"overlay"===b?(C&&(f=!0),w.selection=C=[[i=t===Ba?k:N[0],a=t===Fa?D:N[1]],[l=t===Ba?T:i,d=t===Fa?A:a]]):(i=C[0][0],a=C[0][1],l=C[1][0],d=C[1][1]),s=i,o=a,c=l,p=d;var L=Et(v).attr("pointer-events","none"),O=L.selectAll(".overlay").attr("cursor",ja[b]);if(vt.touches)z.moved=G,z.ended=F;else{var q=Et(vt.view).on("mousemove.brush",G,!0).on("mouseup.brush",F,!0);r&&q.on("keydown.brush",B,!0).on("keyup.brush",W,!0),cr(vt.view)}Pa(),$r(v),u.call(v),z.start()}function G(){var t=P(v);!E||g||m||(Math.abs(t[0]-H[0])>Math.abs(t[1]-H[1])?m=!0:g=!0),H=t,f=!0,Na(),R()}function R(){var t;switch(M=H[0]-N[0],I=H[1]-N[1],y){case za:case Ha:_&&(M=Math.max(k-i,Math.min(T-l,M)),s=i+M,c=l+M),x&&(I=Math.max(D-a,Math.min(A-d,I)),o=a+I,p=d+I);break;case La:_<0?(M=Math.max(k-i,Math.min(T-i,M)),s=i+M,c=l):_>0&&(M=Math.max(k-l,Math.min(T-l,M)),s=i,c=l+M),x<0?(I=Math.max(D-a,Math.min(A-a,I)),o=a+I,p=d):x>0&&(I=Math.max(D-d,Math.min(A-d,I)),o=a,p=d+I);break;case Oa:_&&(s=Math.max(k,Math.min(T,i-M*_)),c=Math.max(k,Math.min(T,l+M*_))),x&&(o=Math.max(D,Math.min(A,a-I*x)),p=Math.max(D,Math.min(A,d+I*x)))}c<s&&(_*=-1,t=i,i=l,l=t,t=s,s=c,c=t,b in $a&&O.attr("cursor",ja[b=$a[b]])),p<o&&(x*=-1,t=a,a=d,d=t,t=o,o=p,p=t,b in Ua&&O.attr("cursor",ja[b=Ua[b]])),w.selection&&(C=w.selection),g&&(s=C[0][0],c=C[1][0]),m&&(o=C[0][1],p=C[1][1]),C[0][0]===s&&C[0][1]===o&&C[1][0]===c&&C[1][1]===p||(w.selection=[[s,o],[c,p]],u.call(v),z.brush())}function F(){if(Pa(),vt.touches){if(vt.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else dr(vt.view,f),q.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);L.attr("pointer-events","all"),O.attr("cursor",ja.overlay),w.selection&&(C=w.selection),to(C)&&(w.selection=null,u.call(v)),z.end()}function B(){switch(vt.keyCode){case 16:E=_&&x;break;case 18:y===La&&(_&&(l=c-M*_,i=s+M*_),x&&(d=p-I*x,a=o+I*x),y=Oa,R());break;case 32:y!==La&&y!==Oa||(_<0?l=c-M:_>0&&(i=s-M),x<0?d=p-I:x>0&&(a=o-I),y=za,O.attr("cursor",ja.selection),R());break;default:return}Na()}function W(){switch(vt.keyCode){case 16:E&&(g=m=E=!1,R());break;case 18:y===Oa&&(_<0?l=c:_>0&&(i=s),x<0?d=p:x>0&&(a=o),y=La,R());break;case 32:y===za&&(vt.altKey?(_&&(l=c-M*_,i=s+M*_),x&&(d=p-I*x,a=o+I*x),y=Oa):(_<0?l=c:_>0&&(i=s),x<0?d=p:x>0&&(a=o),y=La),O.attr("cursor",ja[b]),R());break;default:return}Na()}}function p(){h(this,arguments).moved()}function f(){h(this,arguments).ended()}function g(){var e=this.__brush||{selection:null};return e.extent=Ga(i.apply(this,arguments)),e.dim=t,e}return l.move=function(e,i){e.selection?e.on("start.brush",(function(){h(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){h(this,arguments).end()})).tween("brush",(function(){var e=this,n=e.__brush,s=h(e,arguments),r=n.selection,a=t.input("function"==typeof i?i.apply(this,arguments):i,n.extent),o=Si(r,a);function l(t){n.selection=1===t&&null===a?null:o(t),u.call(e),s.brush()}return null!==r&&null!==a?l:l(1)})):e.each((function(){var e=this,n=arguments,s=e.__brush,r=t.input("function"==typeof i?i.apply(e,n):i,s.extent),a=h(e,n).beforestart();$r(e),s.selection=null===r?null:r,u.call(e),a.start().brush().end()}))},l.clear=function(t){l.move(t,null)},c.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){St(new Ea(l,e,t.output(this.state.selection)),a.apply,a,[e,this.that,this.args])}},l.extent=function(t){return arguments.length?(i="function"==typeof t?t:Ia(Ga(t)),l):i},l.filter=function(t){return arguments.length?(n="function"==typeof t?t:Ia(!!t),l):n},l.touchable=function(t){return arguments.length?(s="function"==typeof t?t:Ia(!!t),l):s},l.handleSize=function(t){return arguments.length?(o=+t,l):o},l.keyModifiers=function(t){return arguments.length?(r=!!t,l):r},l.on=function(){var t=a.on.apply(a,arguments);return t===a?l:t},l}var no=Math.PI,so=2*no,ro=so-1e-6;function ao(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function oo(){return new ao}ao.prototype=oo.prototype={constructor:ao,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,i,n){this._+="Q"+ +t+","+ +e+","+(this._x1=+i)+","+(this._y1=+n)},bezierCurveTo:function(t,e,i,n,s,r){this._+="C"+ +t+","+ +e+","+ +i+","+ +n+","+(this._x1=+s)+","+(this._y1=+r)},arcTo:function(t,e,i,n,s){t=+t,e=+e,i=+i,n=+n,s=+s;var r=this._x1,a=this._y1,o=i-t,l=n-e,u=r-t,h=a-e,c=u*u+h*h;if(s<0)throw new Error("negative radius: "+s);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(c>1e-6)if(Math.abs(h*o-l*u)>1e-6&&s){var d=i-r,p=n-a,f=o*o+l*l,g=d*d+p*p,m=Math.sqrt(f),v=Math.sqrt(c),b=s*Math.tan((no-Math.acos((f+c-g)/(2*m*v)))/2),y=b/v,_=b/m;Math.abs(y-1)>1e-6&&(this._+="L"+(t+y*u)+","+(e+y*h)),this._+="A"+s+","+s+",0,0,"+ +(h*d>u*p)+","+(this._x1=t+_*o)+","+(this._y1=e+_*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,i,n,s,r){t=+t,e=+e,r=!!r;var a=(i=+i)*Math.cos(n),o=i*Math.sin(n),l=t+a,u=e+o,h=1^r,c=r?n-s:s-n;if(i<0)throw new Error("negative radius: "+i);null===this._x1?this._+="M"+l+","+u:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+l+","+u),i&&(c<0&&(c=c%so+so),c>ro?this._+="A"+i+","+i+",0,1,"+h+","+(t-a)+","+(e-o)+"A"+i+","+i+",0,1,"+h+","+(this._x1=l)+","+(this._y1=u):c>1e-6&&(this._+="A"+i+","+i+",0,"+ +(c>=no)+","+h+","+(this._x1=t+i*Math.cos(s))+","+(this._y1=e+i*Math.sin(s))))},rect:function(t,e,i,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +i+"v"+ +n+"h"+-i+"Z"},toString:function(){return this._}};var lo=oo,uo=(Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt,Math.PI),ho=2*uo;var co={draw:function(t,e){var i=Math.sqrt(e/uo);t.moveTo(i,0),t.arc(0,0,i,0,ho)}},po=Math.sqrt(1/3),fo=2*po,go={draw:function(t,e){var i=Math.sqrt(e/fo),n=i*po;t.moveTo(0,-i),t.lineTo(n,0),t.lineTo(0,i),t.lineTo(-n,0),t.closePath()}},mo=Math.sin(uo/10)/Math.sin(7*uo/10),vo=(Math.sin(ho/10),Math.cos(ho/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(t){return function(){return t}}),bo=function(){var t=vo(co),e=vo(64),i=null;function n(){var n;if(i||(i=n=lo()),t.apply(this,arguments).draw(i,+e.apply(this,arguments)),n)return i=null,n+""||null}return n.type=function(e){return arguments.length?(t="function"==typeof e?e:vo(e),n):t},n.size=function(t){return arguments.length?(e="function"==typeof t?t:vo(+t),n):e},n.context=function(t){return arguments.length?(i=null==t?null:t,n):i},n},yo=i(0),_o=i.n(yo),xo=function(t){for(var e=t.length/6|0,i=new Array(e),n=0;n<e;)i[n]="#"+t.slice(6*n,6*++n);return i},wo=function(t){return pi(t[t.length-1])},So=wo(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(xo)),Co=wo(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(xo)),ko=wo(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(xo)),Do=wo(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(xo)),To=wo(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(xo)),Ao=wo(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(xo)),Mo=wo(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(xo)),Io=wo(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(xo)),Eo=wo(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(xo)),Po=wo(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(xo)),No=wo(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(xo)),Ho=wo(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(xo)),zo=wo(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(xo)),Lo=wo(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(xo)),Oo=wo(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(xo));function qo(t,e="YlGnBu",i,n,s=!1){t=t.filter(t=>isFinite(t)),n=void 0===n?le(t):n,i=void 0===i?ce(t):i;const r=function t(){var e=Ki(er()(Ti));return e.copy=function(){return ir(e,t())},pe.apply(e,arguments)}(function(t){const e={BuGn:So,OrRd:Co,PuBu:ko,YlGnBu:Do,Blues:To,Oranges:Ao,Greens:Mo,Purples:Io,Reds:Eo,Greys:Po,Grays:Po,RdBu:No,RdGy:Ho,PiYG:zo,PuOr:Lo,RdYlBu:Oo};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return s?r.domain([n,i]):r.domain([i,n]),r}function Go(t,e,i,n,s,r=10,a=10,o={h:10,w:40},l="h",u=!1){let h=[];if(u){let t=[...Array(r+1).keys()],e=i.domain()[1]/r;h=t.map(t=>t*e),h=h.concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(r+1).keys()],e=i.domain()[1]/r;h=t.map(t=>t*e)}const c=e.append("g").attr("transform",`translate(${n.x}, ${n.y})`).selectAll(".legend").data(h).enter().append("g").classed("legend",!0);"h"==l?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",o.h).attr("transform",`translate(${n.x}, ${n.y})`),c.append("rect").attr("x",(t,e)=>o.w*e).attr("y",5).attr("width",o.w).attr("height",o.h).style("fill",i),c.append("text").attr("class","color-legend").text(t=>s?(Math.pow(a,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>o.w*e).attr("y",0).style("font-size",10)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${n.x}, ${n.y+o.h*h.length})rotate(90)`),c.append("rect").attr("x",0).attr("y",(t,e)=>o.h*e).attr("width",o.w).attr("height",o.h).style("fill",i),c.append("text").attr("class","color-legend").text(t=>s?(Math.pow(a,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>o.h*e+o.h/2))}class Ro{constructor(t,e,i=1e6){this.data=t,this.center=e,this.window=i,this.scale=void 0,this.tooltip=void 0}setScale(t){let e=[0,Math.ceil(t)],i=[this.center-this.window,this.center+this.window];this.scale=Qi().range(e).domain(i)}render(t,e=1500,i=200,n=!1,s="Track",r="#ffffff",a="#ababab",o=!1,l){if(this.dom=t,this.setScale(e),o){this.colorScale=qo(this.data.map(t=>t.colorValue),"Greys",0,l);const t=void 0===l?this.data.map(t=>t.colorValue):l;this.maxColor=this.colorScale(t)}let u=this.dom.append("g");u.append("rect").attr("x",0).attr("y",i/2).attr("rx",4).attr("width",e).attr("height",10).style("fill",r).style("stroke","#ababab").style("stroke-width",1),u.append("g").selectAll(".minibrowser-feature").data(this.data.filter(t=>this.scale(t.pos)>0&&this.scale(t.pos)<e)).enter().append("rect").attr("class","minibrowser-feature").attr("x",t=>n?this.scale(t.start):this.scale(t.pos)).attr("y",i/2).attr("width",t=>{if(n){return Math.abs(this.scale(t.start)-this.scale(t.end)+1)||1}return 1}).attr("height",10).style("fill",t=>t.pos==this.center?"red":o?isFinite(t.colorValue)?this.colorScale(t.colorValue):this.maxColor:a),u.append("text").attr("x",-10).attr("y",i/2+5).style("font-size","9px").style("text-anchor","end").text(s)}static renderAxis(t,e,i,n=!0,s=null,r={w:50,h:20},a=0,o="bottom"){let l="bottom"==o?Wt(e):Ft(e);const u=(e.domain()[1]-e.domain()[0])/10;let h=[0,1,2,3,4,5,6,7,8,9,10].map(t=>e.domain()[0]+u*t);l.tickValues(h);const c=t.append("g");if(c.attr("id","miniBrowserAxis").attr("transform",`translate(0,${i})`).call(l).selectAll("text"),n){const t=()=>{let t=vt.selection,i=t[0],n=t[1],r=Math.round(e.invert(t[0])),a=Math.round(e.invert(t[1]));null!==s&&s(i,n,r,a)};let i=eo().extent([[0,-r.h],[e.range()[1],0]]).on("start brush end",t);return c.append("g").attr("id","miniBrowserBrush").attr("class","brush").call(i).call(i.move,[e(a)-r.w,e(a)+r.w]),i}}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;Array.prototype.slice;function Fo(t,e,i,n){if(isNaN(e)||isNaN(i))return t;var s,r,a,o,l,u,h,c,d,p=t._root,f={data:n},g=t._x0,m=t._y0,v=t._x1,b=t._y1;if(!p)return t._root=f,t;for(;p.length;)if((u=e>=(r=(g+v)/2))?g=r:v=r,(h=i>=(a=(m+b)/2))?m=a:b=a,s=p,!(p=p[c=h<<1|u]))return s[c]=f,t;if(o=+t._x.call(null,p.data),l=+t._y.call(null,p.data),e===o&&i===l)return f.next=p,s?s[c]=f:t._root=f,t;do{s=s?s[c]=new Array(4):t._root=new Array(4),(u=e>=(r=(g+v)/2))?g=r:v=r,(h=i>=(a=(m+b)/2))?m=a:b=a}while((c=h<<1|u)==(d=(l>=a)<<1|o>=r));return s[d]=p,s[c]=f,t}var Bo=function(t,e,i,n,s){this.node=t,this.x0=e,this.y0=i,this.x1=n,this.y1=s};function Wo(t){return t[0]}function jo(t){return t[1]}function $o(t,e,i){var n=new Uo(null==e?Wo:e,null==i?jo:i,NaN,NaN,NaN,NaN);return null==t?n:n.addAll(t)}function Uo(t,e,i,n,s,r){this._x=t,this._y=e,this._x0=i,this._y0=n,this._x1=s,this._y1=r,this._root=void 0}function Vo(t){for(var e={data:t.data},i=e;t=t.next;)i=i.next={data:t.data};return e}var Yo=$o.prototype=Uo.prototype;Yo.copy=function(){var t,e,i=new Uo(this._x,this._y,this._x0,this._y0,this._x1,this._y1),n=this._root;if(!n)return i;if(!n.length)return i._root=Vo(n),i;for(t=[{source:n,target:i._root=new Array(4)}];n=t.pop();)for(var s=0;s<4;++s)(e=n.source[s])&&(e.length?t.push({source:e,target:n.target[s]=new Array(4)}):n.target[s]=Vo(e));return i},Yo.add=function(t){var e=+this._x.call(null,t),i=+this._y.call(null,t);return Fo(this.cover(e,i),e,i,t)},Yo.addAll=function(t){var e,i,n,s,r=t.length,a=new Array(r),o=new Array(r),l=1/0,u=1/0,h=-1/0,c=-1/0;for(i=0;i<r;++i)isNaN(n=+this._x.call(null,e=t[i]))||isNaN(s=+this._y.call(null,e))||(a[i]=n,o[i]=s,n<l&&(l=n),n>h&&(h=n),s<u&&(u=s),s>c&&(c=s));if(l>h||u>c)return this;for(this.cover(l,u).cover(h,c),i=0;i<r;++i)Fo(this,a[i],o[i],t[i]);return this},Yo.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var i=this._x0,n=this._y0,s=this._x1,r=this._y1;if(isNaN(i))s=(i=Math.floor(t))+1,r=(n=Math.floor(e))+1;else{for(var a,o,l=s-i,u=this._root;i>t||t>=s||n>e||e>=r;)switch(o=(e<n)<<1|t<i,(a=new Array(4))[o]=u,u=a,l*=2,o){case 0:s=i+l,r=n+l;break;case 1:i=s-l,r=n+l;break;case 2:s=i+l,n=r-l;break;case 3:i=s-l,n=r-l}this._root&&this._root.length&&(this._root=u)}return this._x0=i,this._y0=n,this._x1=s,this._y1=r,this},Yo.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},Yo.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Yo.find=function(t,e,i){var n,s,r,a,o,l,u,h=this._x0,c=this._y0,d=this._x1,p=this._y1,f=[],g=this._root;for(g&&f.push(new Bo(g,h,c,d,p)),null==i?i=1/0:(h=t-i,c=e-i,d=t+i,p=e+i,i*=i);l=f.pop();)if(!(!(g=l.node)||(s=l.x0)>d||(r=l.y0)>p||(a=l.x1)<h||(o=l.y1)<c))if(g.length){var m=(s+a)/2,v=(r+o)/2;f.push(new Bo(g[3],m,v,a,o),new Bo(g[2],s,v,m,o),new Bo(g[1],m,r,a,v),new Bo(g[0],s,r,m,v)),(u=(e>=v)<<1|t>=m)&&(l=f[f.length-1],f[f.length-1]=f[f.length-1-u],f[f.length-1-u]=l)}else{var b=t-+this._x.call(null,g.data),y=e-+this._y.call(null,g.data),_=b*b+y*y;if(_<i){var x=Math.sqrt(i=_);h=t-x,c=e-x,d=t+x,p=e+x,n=g.data}}return n},Yo.remove=function(t){if(isNaN(r=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var e,i,n,s,r,a,o,l,u,h,c,d,p=this._root,f=this._x0,g=this._y0,m=this._x1,v=this._y1;if(!p)return this;if(p.length)for(;;){if((u=r>=(o=(f+m)/2))?f=o:m=o,(h=a>=(l=(g+v)/2))?g=l:v=l,e=p,!(p=p[c=h<<1|u]))return this;if(!p.length)break;(e[c+1&3]||e[c+2&3]||e[c+3&3])&&(i=e,d=c)}for(;p.data!==t;)if(n=p,!(p=p.next))return this;return(s=p.next)&&delete p.next,n?(s?n.next=s:delete n.next,this):e?(s?e[c]=s:delete e[c],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(i?i[d]=p:this._root=p),this):(this._root=s,this)},Yo.removeAll=function(t){for(var e=0,i=t.length;e<i;++e)this.remove(t[e]);return this},Yo.root=function(){return this._root},Yo.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},Yo.visit=function(t){var e,i,n,s,r,a,o=[],l=this._root;for(l&&o.push(new Bo(l,this._x0,this._y0,this._x1,this._y1));e=o.pop();)if(!t(l=e.node,n=e.x0,s=e.y0,r=e.x1,a=e.y1)&&l.length){var u=(n+r)/2,h=(s+a)/2;(i=l[3])&&o.push(new Bo(i,u,h,r,a)),(i=l[2])&&o.push(new Bo(i,n,h,u,a)),(i=l[1])&&o.push(new Bo(i,u,s,r,h)),(i=l[0])&&o.push(new Bo(i,n,s,u,h))}return this},Yo.visitAfter=function(t){var e,i=[],n=[];for(this._root&&i.push(new Bo(this._root,this._x0,this._y0,this._x1,this._y1));e=i.pop();){var s=e.node;if(s.length){var r,a=e.x0,o=e.y0,l=e.x1,u=e.y1,h=(a+l)/2,c=(o+u)/2;(r=s[0])&&i.push(new Bo(r,a,o,h,c)),(r=s[1])&&i.push(new Bo(r,h,o,l,c)),(r=s[2])&&i.push(new Bo(r,a,c,h,u)),(r=s[3])&&i.push(new Bo(r,h,c,l,u))}n.push(e)}for(;e=n.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Yo.x=function(t){return arguments.length?(this._x=t,this):this._x},Yo.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Xo=function(){return Math.random()},Ko=(function t(e){function i(t,i){return t=null==t?0:+t,i=null==i?1:+i,1===arguments.length?(i=t,t=0):i-=t,function(){return e()*i+t}}return i.source=t,i}(Xo),function t(e){function i(t,i){var n,s;return t=null==t?0:+t,i=null==i?1:+i,function(){var r;if(null!=n)r=n,n=null;else do{n=2*e()-1,r=2*e()-1,s=n*n+r*r}while(!s||s>1);return t+i*r*Math.sqrt(-2*Math.log(s)/s)}}return i.source=t,i}(Xo)),Qo=(function t(e){function i(){var t=Ko.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return i.source=t,i}(Xo),function t(e){function i(t){return function(){for(var i=0,n=0;n<t;++n)i+=e();return i}}return i.source=t,i}(Xo));(function t(e){function i(t){var i=Qo.source(e)(t);return function(){return i()/t}}return i.source=t,i})(Xo),function t(e){function i(t){return function(){return-Math.log(1-e())/t}}return i.source=t,i}(Xo);function Jo(){this._=null}function Zo(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function tl(t,e){var i=e,n=e.R,s=i.U;s?s.L===i?s.L=n:s.R=n:t._=n,n.U=s,i.U=n,i.R=n.L,i.R&&(i.R.U=i),n.L=i}function el(t,e){var i=e,n=e.L,s=i.U;s?s.L===i?s.L=n:s.R=n:t._=n,n.U=s,i.U=n,i.L=n.R,i.L&&(i.L.U=i),n.R=i}function il(t){for(;t.L;)t=t.L;return t}Jo.prototype={constructor:Jo,insert:function(t,e){var i,n,s;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;i=t}else this._?(t=il(this._),e.P=null,e.N=t,t.P=t.L=e,i=t):(e.P=e.N=null,this._=e,i=null);for(e.L=e.R=null,e.U=i,e.C=!0,t=e;i&&i.C;)i===(n=i.U).L?(s=n.R)&&s.C?(i.C=s.C=!1,n.C=!0,t=n):(t===i.R&&(tl(this,i),i=(t=i).U),i.C=!1,n.C=!0,el(this,n)):(s=n.L)&&s.C?(i.C=s.C=!1,n.C=!0,t=n):(t===i.L&&(el(this,i),i=(t=i).U),i.C=!1,n.C=!0,tl(this,n)),i=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,i,n,s=t.U,r=t.L,a=t.R;if(i=r?a?il(a):r:a,s?s.L===t?s.L=i:s.R=i:this._=i,r&&a?(n=i.C,i.C=t.C,i.L=r,r.U=i,i!==a?(s=i.U,i.U=t.U,t=i.R,s.L=t,i.R=a,a.U=i):(i.U=s,s=i,t=i.R)):(n=t.C,t=i),t&&(t.U=s),!n)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===s.L){if((e=s.R).C&&(e.C=!1,s.C=!0,tl(this,s),e=s.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,el(this,e),e=s.R),e.C=s.C,s.C=e.R.C=!1,tl(this,s),t=this._;break}}else if((e=s.L).C&&(e.C=!1,s.C=!0,el(this,s),e=s.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,tl(this,e),e=s.L),e.C=s.C,s.C=e.L.C=!1,el(this,s),t=this._;break}e.C=!0,t=s,s=s.U}while(!t.C);t&&(t.C=!1)}}};var nl=Jo;function sl(t,e,i,n){var s=[null,null],r=Al.push(s)-1;return s.left=t,s.right=e,i&&al(s,t,e,i),n&&al(s,e,t,n),Dl[t.index].halfedges.push(r),Dl[e.index].halfedges.push(r),s}function rl(t,e,i){var n=[e,i];return n.left=t,n}function al(t,e,i,n){t[0]||t[1]?t.left===i?t[1]=n:t[0]=n:(t[0]=n,t.left=e,t.right=i)}function ol(t,e,i,n,s){var r,a=t[0],o=t[1],l=a[0],u=a[1],h=0,c=1,d=o[0]-l,p=o[1]-u;if(r=e-l,d||!(r>0)){if(r/=d,d<0){if(r<h)return;r<c&&(c=r)}else if(d>0){if(r>c)return;r>h&&(h=r)}if(r=n-l,d||!(r<0)){if(r/=d,d<0){if(r>c)return;r>h&&(h=r)}else if(d>0){if(r<h)return;r<c&&(c=r)}if(r=i-u,p||!(r>0)){if(r/=p,p<0){if(r<h)return;r<c&&(c=r)}else if(p>0){if(r>c)return;r>h&&(h=r)}if(r=s-u,p||!(r<0)){if(r/=p,p<0){if(r>c)return;r>h&&(h=r)}else if(p>0){if(r<h)return;r<c&&(c=r)}return!(h>0||c<1)||(h>0&&(t[0]=[l+h*d,u+h*p]),c<1&&(t[1]=[l+c*d,u+c*p]),!0)}}}}}function ll(t,e,i,n,s){var r=t[1];if(r)return!0;var a,o,l=t[0],u=t.left,h=t.right,c=u[0],d=u[1],p=h[0],f=h[1],g=(c+p)/2,m=(d+f)/2;if(f===d){if(g<e||g>=n)return;if(c>p){if(l){if(l[1]>=s)return}else l=[g,i];r=[g,s]}else{if(l){if(l[1]<i)return}else l=[g,s];r=[g,i]}}else if(o=m-(a=(c-p)/(f-d))*g,a<-1||a>1)if(c>p){if(l){if(l[1]>=s)return}else l=[(i-o)/a,i];r=[(s-o)/a,s]}else{if(l){if(l[1]<i)return}else l=[(s-o)/a,s];r=[(i-o)/a,i]}else if(d<f){if(l){if(l[0]>=n)return}else l=[e,a*e+o];r=[n,a*n+o]}else{if(l){if(l[0]<e)return}else l=[n,a*n+o];r=[e,a*e+o]}return t[0]=l,t[1]=r,!0}function ul(t,e){var i=t.site,n=e.left,s=e.right;return i===s&&(s=n,n=i),s?Math.atan2(s[1]-n[1],s[0]-n[0]):(i===n?(n=e[1],s=e[0]):(n=e[0],s=e[1]),Math.atan2(n[0]-s[0],s[1]-n[1]))}function hl(t,e){return e[+(e.left!==t.site)]}function cl(t,e){return e[+(e.left===t.site)]}var dl,pl=[];function fl(){Zo(this),this.x=this.y=this.arc=this.site=this.cy=null}function gl(t){var e=t.P,i=t.N;if(e&&i){var n=e.site,s=t.site,r=i.site;if(n!==r){var a=s[0],o=s[1],l=n[0]-a,u=n[1]-o,h=r[0]-a,c=r[1]-o,d=2*(l*c-u*h);if(!(d>=-Il)){var p=l*l+u*u,f=h*h+c*c,g=(c*p-u*f)/d,m=(l*f-h*p)/d,v=pl.pop()||new fl;v.arc=t,v.site=s,v.x=g+a,v.y=(v.cy=m+o)+Math.sqrt(g*g+m*m),t.circle=v;for(var b=null,y=Tl._;y;)if(v.y<y.y||v.y===y.y&&v.x<=y.x){if(!y.L){b=y.P;break}y=y.L}else{if(!y.R){b=y;break}y=y.R}Tl.insert(b,v),b||(dl=v)}}}}function ml(t){var e=t.circle;e&&(e.P||(dl=e.N),Tl.remove(e),pl.push(e),Zo(e),t.circle=null)}var vl=[];function bl(){Zo(this),this.edge=this.site=this.circle=null}function yl(t){var e=vl.pop()||new bl;return e.site=t,e}function _l(t){ml(t),kl.remove(t),vl.push(t),Zo(t)}function xl(t){var e=t.circle,i=e.x,n=e.cy,s=[i,n],r=t.P,a=t.N,o=[t];_l(t);for(var l=r;l.circle&&Math.abs(i-l.circle.x)<Ml&&Math.abs(n-l.circle.cy)<Ml;)r=l.P,o.unshift(l),_l(l),l=r;o.unshift(l),ml(l);for(var u=a;u.circle&&Math.abs(i-u.circle.x)<Ml&&Math.abs(n-u.circle.cy)<Ml;)a=u.N,o.push(u),_l(u),u=a;o.push(u),ml(u);var h,c=o.length;for(h=1;h<c;++h)u=o[h],l=o[h-1],al(u.edge,l.site,u.site,s);l=o[0],(u=o[c-1]).edge=sl(l.site,u.site,null,s),gl(l),gl(u)}function wl(t){for(var e,i,n,s,r=t[0],a=t[1],o=kl._;o;)if((n=Sl(o,a)-r)>Ml)o=o.L;else{if(!((s=r-Cl(o,a))>Ml)){n>-Ml?(e=o.P,i=o):s>-Ml?(e=o,i=o.N):e=i=o;break}if(!o.R){e=o;break}o=o.R}!function(t){Dl[t.index]={site:t,halfedges:[]}}(t);var l=yl(t);if(kl.insert(e,l),e||i){if(e===i)return ml(e),i=yl(e.site),kl.insert(l,i),l.edge=i.edge=sl(e.site,l.site),gl(e),void gl(i);if(i){ml(e),ml(i);var u=e.site,h=u[0],c=u[1],d=t[0]-h,p=t[1]-c,f=i.site,g=f[0]-h,m=f[1]-c,v=2*(d*m-p*g),b=d*d+p*p,y=g*g+m*m,_=[(m*b-p*y)/v+h,(d*y-g*b)/v+c];al(i.edge,u,f,_),l.edge=sl(u,t,null,_),i.edge=sl(t,f,null,_),gl(e),gl(i)}else l.edge=sl(e.site,l.site)}}function Sl(t,e){var i=t.site,n=i[0],s=i[1],r=s-e;if(!r)return n;var a=t.P;if(!a)return-1/0;var o=(i=a.site)[0],l=i[1],u=l-e;if(!u)return o;var h=o-n,c=1/r-1/u,d=h/u;return c?(-d+Math.sqrt(d*d-2*c*(h*h/(-2*u)-l+u/2+s-r/2)))/c+n:(n+o)/2}function Cl(t,e){var i=t.N;if(i)return Sl(i,e);var n=t.site;return n[1]===e?n[0]:1/0}var kl,Dl,Tl,Al,Ml=1e-6,Il=1e-12;function El(t,e){return e[1]-t[1]||e[0]-t[0]}function Pl(t,e){var i,n,s,r=t.sort(El).pop();for(Al=[],Dl=new Array(t.length),kl=new nl,Tl=new nl;;)if(s=dl,r&&(!s||r[1]<s.y||r[1]===s.y&&r[0]<s.x))r[0]===i&&r[1]===n||(wl(r),i=r[0],n=r[1]),r=t.pop();else{if(!s)break;xl(s.arc)}if(function(){for(var t,e,i,n,s=0,r=Dl.length;s<r;++s)if((t=Dl[s])&&(n=(e=t.halfedges).length)){var a=new Array(n),o=new Array(n);for(i=0;i<n;++i)a[i]=i,o[i]=ul(t,Al[e[i]]);for(a.sort((function(t,e){return o[e]-o[t]})),i=0;i<n;++i)o[i]=e[a[i]];for(i=0;i<n;++i)e[i]=o[i]}}(),e){var a=+e[0][0],o=+e[0][1],l=+e[1][0],u=+e[1][1];!function(t,e,i,n){for(var s,r=Al.length;r--;)ll(s=Al[r],t,e,i,n)&&ol(s,t,e,i,n)&&(Math.abs(s[0][0]-s[1][0])>Ml||Math.abs(s[0][1]-s[1][1])>Ml)||delete Al[r]}(a,o,l,u),function(t,e,i,n){var s,r,a,o,l,u,h,c,d,p,f,g,m=Dl.length,v=!0;for(s=0;s<m;++s)if(r=Dl[s]){for(a=r.site,o=(l=r.halfedges).length;o--;)Al[l[o]]||l.splice(o,1);for(o=0,u=l.length;o<u;)f=(p=cl(r,Al[l[o]]))[0],g=p[1],c=(h=hl(r,Al[l[++o%u]]))[0],d=h[1],(Math.abs(f-c)>Ml||Math.abs(g-d)>Ml)&&(l.splice(o,0,Al.push(rl(a,p,Math.abs(f-t)<Ml&&n-g>Ml?[t,Math.abs(c-t)<Ml?d:n]:Math.abs(g-n)<Ml&&i-f>Ml?[Math.abs(d-n)<Ml?c:i,n]:Math.abs(f-i)<Ml&&g-e>Ml?[i,Math.abs(c-i)<Ml?d:e]:Math.abs(g-e)<Ml&&f-t>Ml?[Math.abs(d-e)<Ml?c:t,e]:null))-1),++u);u&&(v=!1)}if(v){var b,y,_,x=1/0;for(s=0,v=null;s<m;++s)(r=Dl[s])&&(_=(b=(a=r.site)[0]-t)*b+(y=a[1]-e)*y)<x&&(x=_,v=r);if(v){var w=[t,e],S=[t,n],C=[i,n],k=[i,e];v.halfedges.push(Al.push(rl(a=v.site,w,S))-1,Al.push(rl(a,S,C))-1,Al.push(rl(a,C,k))-1,Al.push(rl(a,k,w))-1)}}for(s=0;s<m;++s)(r=Dl[s])&&(r.halfedges.length||delete Dl[s])}(a,o,l,u)}this.edges=Al,this.cells=Dl,kl=Tl=Al=Dl=null}Pl.prototype={constructor:Pl,polygons:function(){var t=this.edges;return this.cells.map((function(e){var i=e.halfedges.map((function(i){return hl(e,t[i])}));return i.data=e.site.data,i}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(i,n){if(r=(s=i.halfedges).length)for(var s,r,a,o,l,u,h=i.site,c=-1,d=e[s[r-1]],p=d.left===h?d.right:d.left;++c<r;)a=p,p=(d=e[s[c]]).left===h?d.right:d.left,a&&p&&n<a.index&&n<p.index&&(l=a,u=p,((o=h)[0]-u[0])*(l[1]-o[1])-(o[0]-l[0])*(u[1]-o[1])<0)&&t.push([h.data,a.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,i){for(var n,s,r=this,a=r._found||0,o=r.cells.length;!(s=r.cells[a]);)if(++a>=o)return null;var l=t-s.site[0],u=e-s.site[1],h=l*l+u*u;do{s=r.cells[n=a],a=null,s.halfedges.forEach((function(i){var n=r.edges[i],o=n.left;if(o!==s.site&&o||(o=n.right)){var l=t-o[0],u=e-o[1],c=l*l+u*u;c<h&&(h=c,a=o.index)}}))}while(null!==a);return r._found=n,null==i||h<=i*i?s.site:null}};Math.SQRT2;function Nl(t,e,i){this.k=t,this.x=e,this.y=i}Nl.prototype={constructor:Nl,scale:function(t){return 1===t?this:new Nl(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Nl(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Nl(1,0,0);Nl.prototype;class Hl{constructor(t,e=!1,i=30,n=-40,s=100){this.id=t,this.verbose=e,this.offsetX=i,this.offsetY=n,this.duration=s}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),Et("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){Et("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=vt.pageX,e=vt.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY,Et("#"+this.id).style("left",t+"px").style("top",e+"px")}edit(t){Et("#"+this.id).html(t)}}class zl{constructor(t,e="Reds"){this.data=t,this.colorScheme=e,this.xScale=void 0,this.yScale=void 0,this.ghScale={},this.cScale=void 0,this.tooltip=void 0}addTooltip(t,e="bar-map-tooltip"){if(Et("#"+t).empty())throw"DOM ID is missing: "+t;let i=Et("#"+t),n=t+"-tooltip";Et("#"+n).empty()&&i.append("div").attr("id",n),this.tooltip=new Hl(n),Et("#"+n).classed(e,!0)}renderWithNewXDomain(t,e,i,n=!1){this.xScale.domain(e);let s=this.xScale.bandwidth();n&&this._renderXAxis(t),"barmap"==i?t.selectAll(".bar-row").selectAll("rect").attr("x",t=>this.xScale(t.x)||0).attr("width",t=>void 0===this.xScale(t.x)?0:s):(this._setRScale(),t.selectAll(".map-bubble").attr("cx",t=>this.xScale(t.x)+this.xScale.bandwidth()/2||0).attr("r",t=>void 0===this.xScale(t.x)?0:this.rScale(t.r)),t.selectAll(".map-grid-vline").attr("x1",t=>this.xScale(t)+this.xScale.bandwidth()/2||0).attr("x2",t=>this.xScale(t)+this.xScale.bandwidth()/2||0).attr("stroke-width",t=>this.xScale(t)>=0?0:.3))}drawSvg(t,e={w:1e3,h:600,top:0,left:0},i="barmap",n=!1,s,r=!1,a=[0,50]){void 0!==s&&(this.tooltipCallback=s),void 0!==this.xScale&&void 0!==this.yScale&&void 0!==this.cScale||this.setScales(e),this._renderAxes(t);let o=this._createClipPath(t,e);"barmap"==i?this.renderBars(t,o,n):"bubbleNoClip"==i?this.renderBubbles(t,a,r,s):this.renderBubbles(o,a,r,s)}setScales(t,e,i){this._setXScale(t,e),this._setYScale(t,i),this._setCScale()}_createClipPath(t,e){return t.classed("data-area",!0),t.append("defs").append("clipPath").attr("id","data-map-clip").append("rect").attr("width",e.w).attr("height",2*e.h).attr("fill","none").attr("stroke","silver"),t.append("g").attr("clip-path","url(#data-map-clip)").classed("clippedArea",!0)}_setXScale(t={w:1e3,left:20},e,i=.05){const n=(t,e)=>{throw console.error("This value is invalid: "+t),e};if(isNaN(t.w)&&n(t.w,"ValueError"),isNaN(t.left)&&n(t.left,"ValueError"),void 0===e){e=[...new Set(this.data.map(t=>t.x))].sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}this.xScale=Ie().domain(e).range([t.left,t.left+t.w]).padding(i)}_setYScale(t={h:600,top:20},e,i=.3){if(void 0===e){e=[...new Set(this.data.map(t=>t.y))]}e.sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN),this.yScale=Ie().domain(e).range([t.top,t.top+t.h]).padding(i)}_setCScale(t=[-.5,0,.5]){this.cScale=Qi().domain(t).range(["#129cff","#ffffff","#f53956"])}_setRScale(t=0,e=5){return void 0===t&&(t=ce(this.data.map(t=>t.r))),void 0===e&&(e=le(this.data.map(t=>t.r))),this.rScale=sn().domain([t,e]).range([0,le([this.xScale.bandwidth(),this.yScale.bandwidth()])/2]),this.rScale}_renderAxes(t){this._renderXAxis(t),this._renderYAxis(t)}_renderXAxis(t){let e=Wt(this.xScale).tickSize(0);t.select(".bar-map-x-axis").remove();let i=this.yScale.range()[1];if(void 0===i||isNaN(i))throw console.error("This value must be defined: "+i),"Value Error";t.append("g").attr("class","bar-map-x-axis").attr("transform",`translate(0, ${i})`).call(e).selectAll("text").attr("y",0).attr("x",9).attr("class","bar-map-x-label").attr("dy",".35em").attr("transform","rotate(90)").style("text-anchor","start")}_renderYAxis(t){let e=jt(this.yScale).tickSize(0);t.append("g").attr("class","bar-map-y-axis").call(e).selectAll("text").attr("class","bar-map-y-label")}renderBubbles(t,e=[0,10],i=!1,n){let s=this._setRScale(e[0],e[1]),r=this.cScale;t.selectAll(".data-bar").remove(),Pt(".h-axis").remove();let a=t.append("g"),o=t.append("g"),l=new Set(this.yScale.domain()),u=new Set(this.xScale.domain());const h=this.xScale.bandwidth()/2,c=this.yScale.bandwidth()/2;i&&(a.selectAll(".map-grid-hline").data(this.yScale.domain()).enter().append("line").classed("map-grid-hline",!0).attr("x1",this.xScale.range()[0]+h).attr("x2",this.xScale.range()[1]+h).attr("y1",t=>this.yScale(t)+c).attr("y2",t=>this.yScale(t)+c).style("stroke","lightgrey").style("stroke-width",.3),a.selectAll(".map-grid-vline").data(this.xScale.domain()).enter().append("line").classed("map-grid-vline",!0).attr("x1",t=>this.xScale(t)+h).attr("x2",t=>this.xScale(t)+h).attr("y1",this.yScale.range()[0]+c).attr("y2",this.yScale.range()[1]-c).style("stroke","lightgrey").style("stroke-width",.3));let d=o.selectAll(".map-bubble").data(this.data.filter(t=>l.has(t.y)&&u.has(t.x))).enter().append("circle").classed("map-bubble",!0).attr("cx",t=>this.xScale(t.x)+h).attr("cy",t=>this.yScale(t.y)+c).attr("r",t=>s(t.r)<1?1:s(t.r)).attr("fill",t=>isNaN(t.value)?"darkgrey":r(t.value)).attr("opacity",.95).attr("stroke","#aaaaaa").attr("cursor","pointer"),p=this.tooltip;void 0===n&&(n=void 0!==this.tooltipCallback?this.tooltipCallback:t=>`Row: ${t.y}<br/> Column: ${t.x} <br/> Color Value: ${t.value.toPrecision(5)}<br/> Bubble Size: ${t.r.toPrecision(5)}`),d.on("mouseover",(function(t){p.show(n(t)),Et(this).classed("hover",!0)})).on("mouseout",(function(){p.hide(),Et(this).classed("hover",!1)}))}renderBars(t,e,i=!1,n){e.selectAll(".map-bubble").remove(),t.selectAll(".map-grid-hline").remove(),t.selectAll(".map-grid-vline").remove(),t.selectAll(".h-axis").remove();let s=this.cScale,r=ve().key(t=>t.y).entries(this.data),a=ve().key(t=>t.dataType).entries(this.data),o=a.reduce((t,e)=>(t[e.key]=0,t),{});Object.keys(o).forEach(t=>{let e=le(a.filter(e=>e.key==t)[0].values.map(t=>t.r));this.ghScale[t]=Qi().rangeRound([0,-this.yScale.bandwidth()]).domain([0,e])});let l=new Set(this.yScale.domain());r.forEach(r=>{if(!l.has(r.key))return;let a=void 0;if(i){let t=r.values[0].dataType;a=this.ghScale[t]}else{let t=le(r.values,t=>t.r);a=Qi().rangeRound([0,-this.yScale.bandwidth()]).domain([0,t])}let o=e.append("g").classed("bar-row",!0);o.append("line").attr("class",r.key.split(/-|\s/)[0]).attr("x1",this.xScale.range()[0]).attr("x2",this.xScale.range()[1]).attr("y1",0).attr("y2",0).attr("transform",`translate(0, ${this.yScale(r.key)+this.yScale.bandwidth()})`).style("stroke","#efefef");let u=Bt(a).ticks(2);t.append("g").attr("class","h-axis").attr("transform",`translate(${this.xScale.range()[1]+3}, ${this.yScale(r.key)+this.yScale.bandwidth()})`).call(u).selectAll("text").attr("font-size",6);let h=o.selectAll(".data-bar").data(r.values).enter().append("rect").attr("class","data-bar").attr("rx",2).attr("x",t=>this.xScale(t.x)||0).attr("y",t=>this.yScale(t.y)+this.yScale.bandwidth()+a(t.r)).attr("width",t=>void 0===this.xScale(t.x)?0:this.xScale.bandwidth()).attr("height",t=>Math.abs(a(t.r))).attr("fill",t=>isNaN(t.value)?"darkgrey":s(t.value)).attr("stroke","#aaaaaa"),c=this.tooltip;void 0===n&&(n=void 0!==this.tooltipCallback?this.tooltipCallback:t=>`Row: ${t.y}<br/> Column: ${t.x} <br/> Value: ${t.value}<br/> Height: ${t.r}`),h.on("mouseover",(function(t){c.show(n(t)),Et(this).classed("hover",!0)})).on("mouseout",(function(){c.hide(),Et(this).classed("hover",!1)}))})}drawBubbleLegend(t,e="bubble legend",i={x:0,y:0},n=[5,10,20,40,80],s=20,r){t.select("#dataMap-bubble-legend").remove(),t.selectAll(".bubble-legend").remove();const a=t.append("g").attr("id","dataMap-bubble-legend").attr("transform",`translate(${i.x}, ${i.y})`).selectAll(".legend").data(n).enter().append("g").classed("legend",!0);"h"==r?(t.append("text").attr("class","bubble-legend color-legend").text(e).attr("x",0).attr("text-anchor","end").attr("y",-5).attr("transform",`translate(${i.x}, ${i.y})`),a.append("circle").attr("cx",(t,e)=>s*e).attr("cy",0).attr("r",t=>this.rScale(t)<0?1:this.rScale(t)).style("fill","#ababab"),a.append("text").attr("class","color-legend").text(t=>t).attr("x",(t,e)=>s*e-10).attr("y",20)):(t.append("text").attr("class","bubble-legend color-legend").text(e).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${i.x}, ${i.y+s*n.length})`),a.append("circle").attr("cx",0).attr("cy",(t,e)=>s*e).attr("r",t=>this.rScale(t)<0?0:this.rScale(t)).style("fill","#ababab"),a.append("text").attr("class","color-legend").text(t=>t).attr("x",10).attr("y",(t,e)=>s*e+5))}drawColorLegend(t,e="color legend",i={x:0,y:0},n={w:30,h:5},s=[-1,-.5,-.25,0,.25,.5,1],r="v"){const a=t.append("g").attr("transform",`translate(${i.x}, ${i.y})`).selectAll(".legend").data(s).enter().append("g").classed("legend",!0);"h"==r?(t.append("text").attr("class","color-legend").text(e).attr("x",0).attr("text-anchor","end").attr("y",-5).attr("transform",`translate(${i.x}, ${i.y})`),a.append("rect").attr("x",(t,e)=>n.w*e).attr("y",0).attr("rx",2).attr("width",n.w).attr("height",n.h).style("fill",t=>this.cScale(t)),a.append("text").attr("class","color-legend").text(t=>t).attr("x",(t,e)=>n.w*e).attr("y",n.h+15)):(t.append("text").attr("class","color-legend").text(e).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${i.x}, ${i.y+n.h*(s.length+1)})`),a.append("rect").attr("x",0).attr("y",(t,e)=>n.h*e).attr("width",n.w).attr("height",n.h).style("fill",t=>this.cScale(t)),a.append("text").attr("class","color-legend").text(t=>t).attr("x",10).attr("y",(t,e)=>n.h*e+n.h/2))}}class Ll{constructor(t,e=0,i=!0,n=10,s="Greys",r=[0,1]){this.data=this._unique(t),this.dataDict={},this.cutoff=e,this.filteredData=this._filter(this.data,this.cutoff),this.dataDict=this._generateDataDict(this.filteredData),this.useLog=i,this.logBase=n,this.colorScheme=s,this.colorScale=this._setColorScale(r),this.xScale=void 0,this.yScale=void 0,this.labelScale=void 0,this.svg=void 0,this.canvas=void 0,this.config=void 0,this.tooltip=void 0}saveSvgObj(t){this.svg=t}saveCanvasObj(t){this.canvas=t}saveConfig(t){this.config=t}addTooltip(t){if(Et("#"+t).empty())throw"DOM ID is missing: "+t;let e=t+"-tooltip";Et("#"+e).empty()&&Et("#"+t).append("div").attr("id",e),this.tooltip=new Hl(e,!1,40,0),Et("#"+e).classed("half-map-tooltip",!0)}redraw(t,e,i,n=[0,1],s=!1,r){void 0!==i&&(this.config.w=Math.abs(i[1]-i[0])),this.draw(this.canvas,this.svg,this.config,n,s,r,t,e)}draw(t,e,i={w:600,top:20,left:20},n=[0,1],s=!1,r=90,a,o){this._drawCanvas(t,i,n,a,o);this.drawSvg(e,i,!1,s,r,n,a,o)}drawColorLegend(t,e={x:0,y:0},i=5,n="",s=[0,1]){void 0===this.colorScale&&this._setColorScale(s),Go(n,t,this.colorScale,e,this.useLog,i,this.logBase,{h:20,w:10},"v")}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}_drawCanvas(t,e={w:600,top:20,left:20},i=[0,1],n,s){this._setScales(e,i,n,s);let r=t.node().getContext("2d");r.save(),r.rotate(-.25*Math.PI),r.clearRect(-e.w,-e.w,2*e.w,2*e.w),this.filteredData.forEach(t=>{let e=this.xScale(t.x),i=this.yScale(t.y);void 0!==e&&void 0!==i&&(t.color=0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value),r.fillStyle=this.colorScale(t.value),r.fillRect(e,i,this.xScale.bandwidth(),this.yScale.bandwidth()))}),r.restore()}drawSvg(t,e,i=!0,n=!0,s=90,r=[0,1],a,o){if(i){this._setScales(e,r,a,o);let i=t.append("g").attr("clip-path","url(#clip)").selectAll(".half-map-cell").data(this.filteredData);i.enter().append("rect").attr("class","half-map-cell").attr("row",t=>"y"+this.yScale.domain().indexOf(t.y)).attr("column",t=>"x"+this.xScale.domain().indexOf(t.x)).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("transform","rotate(-45)").merge(i).style("fill",t=>0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value))}n&&(this._setLabelScale(e),t.selectAll().data(this.labelScale.domain()).enter().append("text").attr("class",(t,e)=>"half-map-label l"+e).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","none").attr("transform",t=>`translate(${this.labelScale(t)-this.labelScale.step()/2}, -5) rotate(-${s})`).text(t=>t));let l=t.append("rect").attr("class","half-map-cursor").attr("x",0).attr("y",0).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("stroke","#d2111b").style("stroke-width","1px").style("fill","none").style("display","none");t.on("mouseout",()=>{l.style("display","none"),this.tooltip.hide(),t.selectAll(".half-map-label").classed("highlighted",!1)}),Et(t.node().parentNode).style("cursor","none").style("position","absolute").on("mousemove",()=>{let e=br(t.node()),i=e[0],s=e[1],r=.25*Math.PI,a=i*Math.cos(r)-s*Math.sin(r),o=i*Math.sin(r)+s*Math.cos(r);if(i<0||s<0||a<0||o<0)return this.tooltip.hide(),void l.style("display","none");let u=Math.floor(a/this.xScale.step()),h=Math.floor(o/this.yScale.step()),c=this.xScale.domain()[u],d=this.yScale.domain()[h],p=this.dataDict[c+d];void 0!==p?(l.attr("transform",`translate(${i},${s}) rotate(-45)`),l.style("display","block"),this.tooltip.show(`${c}<br/> ${d}<br/> Value: ${p.displayValue}`),n&&(t.selectAll(".half-map-label").classed("highlighted",!1),t.select(".l"+u).classed("highlighted",!0),t.select(".l"+h).classed("highlighted",!0))):(this.tooltip.hide(),l.style("display","none"))})}_unique(t){t.sort((t,e)=>t.x<e.x?-1:t.x>e.x?1:t.y<e.y?-1:t.y>e.y?1:0);let e={};return t.filter(t=>{let i=t.x+t.y,n=t.y+t.x;return!e.hasOwnProperty(i)&&!e.hasOwnProperty(n)&&(e[i]=!0,!0)})}_filter(t,e){return t.filter(t=>!(t.value<e))}_generateDataDict(t){let e={};return t.forEach(t=>{e[t.x+t.y]=t,e[t.y+t.x]=t}),e}_setScales(t={w:600,top:20,left:20},e=[0,1],i,n){(i||void 0===this.xScale)&&this._setXScale(t,i),(n||void 0===this.yScale)&&this._setYScale(t,n),void 0===this.colorScale&&this._setColorScale(e)}_setXScale(t={w:600},e){void 0===e&&(e=ve().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.xScale=Ie().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setYScale(t={w:600},e){void 0===e&&(e=ve().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.yScale=Ie().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setLabelScale(t={w:600}){void 0===this.xScale&&this._setXScale();let e=this.xScale.domain();this.labelScale=Ie().domain(e).range([0,t.w]).padding(.05)}_setColorScale(t){let e=this.useLog,i=void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t;this.colorScale=qo(i,this.colorScheme)}}function Ol(t){if(Et("#"+t).empty()){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}function ql(t,e,i,n,s){return Ol(t),void 0===s&&(s=t+"-svg"),void 0===n&&(n={top:0,left:0}),Et("#"+t).append("svg").attr("width",e).attr("height",i).attr("id",s).append("g").attr("transform",`translate(${n.left}, ${n.top})`)}const Gl=[{colorHex:"FF6600",colorRgb:"255,102,0",datasetId:"gtex_v8",eGeneCount:15607,expressedGeneCount:28830,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:581,rnaSeqSampleCount:663,sGeneCount:5113,samplingSite:"Subcutaneous tissue beneath the leg's skin sample.",tissueSite:"Adipose Tissue",tissueSiteDetail:"Adipose - Subcutaneous",tissueSiteDetailAbbr:"ADPSBQ",tissueSiteDetailId:"Adipose_Subcutaneous",uberonId:"0002190"},{colorHex:"FFAA00",colorRgb:"255,170,0",datasetId:"gtex_v8",eGeneCount:12482,expressedGeneCount:28881,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:469,rnaSeqSampleCount:541,sGeneCount:4210,samplingSite:"Adipose tissue on the large fold of parietal peritoneum that hangs down from the greater curvature of the stomach, passing in front of the small intestines.",tissueSite:"Adipose Tissue",tissueSiteDetail:"Adipose - Visceral (Omentum)",tissueSiteDetailAbbr:"ADPVSC",tissueSiteDetailId:"Adipose_Visceral_Omentum",uberonId:"0010414"},{colorHex:"33DD33",colorRgb:"51,221,51",datasetId:"gtex_v8",eGeneCount:8123,expressedGeneCount:28235,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:233,rnaSeqSampleCount:258,sGeneCount:2369,samplingSite:"Left, followed by the right if necessary for sufficient aliquots.",tissueSite:"Adrenal Gland",tissueSiteDetail:"Adrenal Gland",tissueSiteDetailAbbr:"ADRNLG",tissueSiteDetailId:"Adrenal_Gland",uberonId:"0002369"},{colorHex:"FF5555",colorRgb:"255,85,85",datasetId:"gtex_v8",eGeneCount:12493,expressedGeneCount:28025,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:387,rnaSeqSampleCount:432,sGeneCount:3740,samplingSite:"Ascending aorta or other thoracic regions (nonatherosclerotic).",tissueSite:"Blood Vessel",tissueSiteDetail:"Artery - Aorta",tissueSiteDetailAbbr:"ARTAORT",tissueSiteDetailId:"Artery_Aorta",uberonId:"0001496"},{colorHex:"FFAA99",colorRgb:"255,170,153",datasetId:"gtex_v8",eGeneCount:6296,expressedGeneCount:28462,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:213,rnaSeqSampleCount:240,sGeneCount:2140,samplingSite:"Left and right, noncalcific regions only.",tissueSite:"Blood Vessel",tissueSiteDetail:"Artery - Coronary",tissueSiteDetailAbbr:"ARTCRN",tissueSiteDetailId:"Artery_Coronary",uberonId:"0001621"},{colorHex:"FF0000",colorRgb:"255,0,0",datasetId:"gtex_v8",eGeneCount:15008,expressedGeneCount:27217,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:584,rnaSeqSampleCount:663,sGeneCount:4791,samplingSite:"Left Tibial. Peripheral tibial artery from gastrocnemius region",tissueSite:"Blood Vessel",tissueSiteDetail:"Artery - Tibial",tissueSiteDetailAbbr:"ARTTBL",tissueSiteDetailId:"Artery_Tibial",uberonId:"0007610"},{colorHex:"AA0000",colorRgb:"170,0,0",datasetId:"gtex_v8",eGeneCount:null,expressedGeneCount:28949,hasEGenes:!1,hasSGenes:!1,rnaSeqAndGenotypeSampleCount:21,rnaSeqSampleCount:21,sGeneCount:null,samplingSite:"Central posterior urinary bladder, trimming from the outer wall if necessary.",tissueSite:"Bladder",tissueSiteDetail:"Bladder",tissueSiteDetailAbbr:"BLDDER",tissueSiteDetailId:"Bladder",uberonId:"0001255"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:3726,expressedGeneCount:28196,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:129,rnaSeqSampleCount:152,sGeneCount:892,samplingSite:"Amygdala (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Amygdala",tissueSiteDetailAbbr:"BRNAMY",tissueSiteDetailId:"Brain_Amygdala",uberonId:"0001876"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:5640,expressedGeneCount:28921,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:147,rnaSeqSampleCount:176,sGeneCount:1238,samplingSite:"Anterior cingulate cortex (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Anterior cingulate cortex (BA24)",tissueSiteDetailAbbr:"BRNACC",tissueSiteDetailId:"Brain_Anterior_cingulate_cortex_BA24",uberonId:"0009835"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:8362,expressedGeneCount:29230,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:194,rnaSeqSampleCount:246,sGeneCount:1809,samplingSite:"Caudate (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Caudate (basal ganglia)",tissueSiteDetailAbbr:"BRNCDT",tissueSiteDetailId:"Brain_Caudate_basal_ganglia",uberonId:"0001873"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:10027,expressedGeneCount:29538,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:175,rnaSeqSampleCount:215,sGeneCount:2397,samplingSite:"Cerebellar hemisphere (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Cerebellar Hemisphere",tissueSiteDetailAbbr:"BRNCHB",tissueSiteDetailId:"Brain_Cerebellar_Hemisphere",uberonId:"0002037"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:11240,expressedGeneCount:30106,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:209,rnaSeqSampleCount:241,sGeneCount:2786,samplingSite:"Right cerebellum (sampled at donor collection site and preserved in PAXgene fixative).",tissueSite:"Brain",tissueSiteDetail:"Brain - Cerebellum",tissueSiteDetailAbbr:"BRNCHA",tissueSiteDetailId:"Brain_Cerebellum",uberonId:"0002037"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:9082,expressedGeneCount:29560,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:205,rnaSeqSampleCount:255,sGeneCount:2048,samplingSite:"Right cerebral frontal pole cortex (sampled at donor collection site and preserved in PAXgene fixative).",tissueSite:"Brain",tissueSiteDetail:"Brain - Cortex",tissueSiteDetailAbbr:"BRNCTXA",tissueSiteDetailId:"Brain_Cortex",uberonId:"0001870"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:7335,expressedGeneCount:29132,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:175,rnaSeqSampleCount:209,sGeneCount:1684,samplingSite:"Right cerebral frontal pole cortex (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Frontal Cortex (BA9)",tissueSiteDetailAbbr:"BRNCTXB",tissueSiteDetailId:"Brain_Frontal_Cortex_BA9",uberonId:"0009834"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:5517,expressedGeneCount:28625,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:165,rnaSeqSampleCount:197,sGeneCount:1185,samplingSite:"Hippocampus (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Hippocampus",tissueSiteDetailAbbr:"BRNHPP",tissueSiteDetailId:"Brain_Hippocampus",uberonId:"0001954"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:5499,expressedGeneCount:29502,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:170,rnaSeqSampleCount:202,sGeneCount:1414,samplingSite:"Hypothalamus (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Hypothalamus",tissueSiteDetailAbbr:"BRNHPT",tissueSiteDetailId:"Brain_Hypothalamus",uberonId:"0001898"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:8198,expressedGeneCount:29339,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:202,rnaSeqSampleCount:246,sGeneCount:1881,samplingSite:"Nucleus accumbens basal ganglia (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Nucleus accumbens (basal ganglia)",tissueSiteDetailAbbr:"BRNNCC",tissueSiteDetailId:"Brain_Nucleus_accumbens_basal_ganglia",uberonId:"0001882"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:6902,expressedGeneCount:28335,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:170,rnaSeqSampleCount:205,sGeneCount:1350,samplingSite:"Putamen basal ganglia (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Putamen (basal ganglia)",tissueSiteDetailAbbr:"BRNPTM",tissueSiteDetailId:"Brain_Putamen_basal_ganglia",uberonId:"0001874"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:4483,expressedGeneCount:28352,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:126,rnaSeqSampleCount:159,sGeneCount:1144,samplingSite:"Spinal cord (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Spinal cord (cervical c-1)",tissueSiteDetailAbbr:"BRNSPC",tissueSiteDetailId:"Brain_Spinal_cord_cervical_c-1",uberonId:"0006469"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:3301,expressedGeneCount:28050,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:114,rnaSeqSampleCount:139,sGeneCount:814,samplingSite:"Substantia nigra (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Substantia nigra",tissueSiteDetailAbbr:"BRNSNG",tissueSiteDetailId:"Brain_Substantia_nigra",uberonId:"0002038"},{colorHex:"33CCCC",colorRgb:"51,204,204",datasetId:"gtex_v8",eGeneCount:10872,expressedGeneCount:29615,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:396,rnaSeqSampleCount:459,sGeneCount:4124,samplingSite:"Central breast subareolar region of the right breast, 1-2 cm under the skin surface of nipple region.",tissueSite:"Breast",tissueSiteDetail:"Breast - Mammary Tissue",tissueSiteDetailAbbr:"BREAST",tissueSiteDetailId:"Breast_Mammary_Tissue",uberonId:"0008367"},{colorHex:"CC66FF",colorRgb:"204,102,255",datasetId:"gtex_v8",eGeneCount:4934,expressedGeneCount:27840,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:147,rnaSeqSampleCount:174,sGeneCount:2360,samplingSite:"Transformed lymphocytes.",tissueSite:"Blood Vessel",tissueSiteDetail:"Cells - EBV-transformed lymphocytes",tissueSiteDetailAbbr:"LCL",tissueSiteDetailId:"Cells_EBV-transformed_lymphocytes",uberonId:"EFO_0000572"},{colorHex:"AAEEFF",colorRgb:"170,238,255",datasetId:"gtex_v8",eGeneCount:15219,expressedGeneCount:26297,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:483,rnaSeqSampleCount:504,sGeneCount:4586,samplingSite:"Cultured primary fibroblasts.",tissueSite:"Skin",tissueSiteDetail:"Cells - Cultured fibroblasts",tissueSiteDetailAbbr:"FIBRBLS",tissueSiteDetailId:"Cells_Cultured_fibroblasts",uberonId:"EFO_0002009"},{colorHex:"FFCCCC",colorRgb:"255,204,204",datasetId:"gtex_v8",eGeneCount:null,expressedGeneCount:29691,hasEGenes:!1,hasSGenes:!1,rnaSeqAndGenotypeSampleCount:9,rnaSeqSampleCount:9,sGeneCount:null,samplingSite:"Ectocervix (squamous) from uterus. Bivalve uterus along the endocervical canal to open uterus and cervix from external os to fundus.",tissueSite:"Cervix Uteri",tissueSiteDetail:"Cervix - Ectocervix",tissueSiteDetailAbbr:"CVXECT",tissueSiteDetailId:"Cervix_Ectocervix",uberonId:"0012249"},{colorHex:"CCAADD",colorRgb:"204,170,221",datasetId:"gtex_v8",eGeneCount:null,expressedGeneCount:30559,hasEGenes:!1,hasSGenes:!1,rnaSeqAndGenotypeSampleCount:10,rnaSeqSampleCount:10,sGeneCount:null,samplingSite:"Endocervix (glandular) from uterus. Bivalve uterus along the endocervical canal to open uterus and cervix from external os to fundus.",tissueSite:"Cervix Uteri",tissueSiteDetail:"Cervix - Endocervix",tissueSiteDetailAbbr:"CVSEND",tissueSiteDetailId:"Cervix_Endocervix",uberonId:"0000458"},{colorHex:"EEBB77",colorRgb:"238,187,119",datasetId:"gtex_v8",eGeneCount:10550,expressedGeneCount:28454,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:318,rnaSeqSampleCount:373,sGeneCount:3269,samplingSite:"Sigmoid colon, Obtain muscularis only; discard mucosa.",tissueSite:"Colon",tissueSiteDetail:"Colon - Sigmoid",tissueSiteDetailAbbr:"CLNSGM",tissueSiteDetailId:"Colon_Sigmoid",uberonId:"0001159"},{colorHex:"CC9955",colorRgb:"204,153,85",datasetId:"gtex_v8",eGeneCount:11686,expressedGeneCount:29574,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:368,rnaSeqSampleCount:406,sGeneCount:3459,samplingSite:"Transverse, Full thickness: mucosa and muscularis",tissueSite:"Colon",tissueSiteDetail:"Colon - Transverse",tissueSiteDetailAbbr:"CLNTRN",tissueSiteDetailId:"Colon_Transverse",uberonId:"0001157"},{colorHex:"8B7355",colorRgb:"139,115,85",datasetId:"gtex_v8",eGeneCount:10534,expressedGeneCount:28219,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:330,rnaSeqSampleCount:375,sGeneCount:3286,samplingSite:"Muscularis propria in the lowest portion of the esophagus just proximal to the stomach.",tissueSite:"Esophagus",tissueSiteDetail:"Esophagus - Gastroesophageal Junction",tissueSiteDetailAbbr:"ESPGEJ",tissueSiteDetailId:"Esophagus_Gastroesophageal_Junction",uberonId:"0004550"},{colorHex:"552200",colorRgb:"85,34,0",datasetId:"gtex_v8",eGeneCount:14675,expressedGeneCount:28332,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:497,rnaSeqSampleCount:555,sGeneCount:3986,samplingSite:"Squamous region (distal/lower third), at least 4 cm above gastroesophageal junction.",tissueSite:"Esophagus",tissueSiteDetail:"Esophagus - Mucosa",tissueSiteDetailAbbr:"ESPMCS",tissueSiteDetailId:"Esophagus_Mucosa",uberonId:"0006920"},{colorHex:"BB9988",colorRgb:"187,153,136",datasetId:"gtex_v8",eGeneCount:14110,expressedGeneCount:27982,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:465,rnaSeqSampleCount:515,sGeneCount:4088,samplingSite:"Squamous region (distal/lower third), at least 4 cm above gastroesophageal junction.",tissueSite:"Esophagus",tissueSiteDetail:"Esophagus - Muscularis",tissueSiteDetailAbbr:"ESPMSL",tissueSiteDetailId:"Esophagus_Muscularis",uberonId:"0004648"},{colorHex:"FFCCCC",colorRgb:"255,204,204",datasetId:"gtex_v8",eGeneCount:null,expressedGeneCount:29861,hasEGenes:!1,hasSGenes:!1,rnaSeqAndGenotypeSampleCount:8,rnaSeqSampleCount:9,sGeneCount:null,samplingSite:"Left (and right if needed for sufficient aliquots) starting at, and to include, fimbriated end.",tissueSite:"Fallopian Tube",tissueSiteDetail:"Fallopian Tube",tissueSiteDetailAbbr:"FLLPNT",tissueSiteDetailId:"Fallopian_Tube",uberonId:"0003889"},{colorHex:"9900FF",colorRgb:"153,0,255",datasetId:"gtex_v8",eGeneCount:10991,expressedGeneCount:27818,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:372,rnaSeqSampleCount:429,sGeneCount:3055,samplingSite:"Right atrial appendage, tip (if fatty or discolored, take more proximally)",tissueSite:"Heart",tissueSiteDetail:"Heart - Atrial Appendage",tissueSiteDetailAbbr:"HRTAA",tissueSiteDetailId:"Heart_Atrial_Appendage",uberonId:"0006631"},{colorHex:"660099",colorRgb:"102,0,153",datasetId:"gtex_v8",eGeneCount:9642,expressedGeneCount:26037,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:386,rnaSeqSampleCount:432,sGeneCount:2357,samplingSite:"Anterior left ventricle, 1 cm above apex and 1 cm from left anterior descending coronary artery.",tissueSite:"Heart",tissueSiteDetail:"Heart - Left Ventricle",tissueSiteDetailAbbr:"HRTLV",tissueSiteDetailId:"Heart_Left_Ventricle",uberonId:"0006566"},{colorHex:"22FFDD",colorRgb:"34,255,221",datasetId:"gtex_v8",eGeneCount:1260,expressedGeneCount:29263,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:73,rnaSeqSampleCount:85,sGeneCount:547,samplingSite:"Left kidney cortex.",tissueSite:"Kidney",tissueSiteDetail:"Kidney - Cortex",tissueSiteDetailAbbr:"KDNCTX",tissueSiteDetailId:"Kidney_Cortex",uberonId:"0001225"},{colorHex:"33FFC2",colorRgb:"51,255,194",datasetId:"gtex_v8",eGeneCount:null,expressedGeneCount:31935,hasEGenes:!1,hasSGenes:!1,rnaSeqAndGenotypeSampleCount:4,rnaSeqSampleCount:4,sGeneCount:null,samplingSite:"Left kidney medulla adjacent to Cortex.",tissueSite:"Kidney",tissueSiteDetail:"Kidney - Medulla",tissueSiteDetailAbbr:"KDNMDL",tissueSiteDetailId:"Kidney_Medulla",uberonId:"0001293"},{colorHex:"AABB66",colorRgb:"170,187,102",datasetId:"gtex_v8",eGeneCount:5734,expressedGeneCount:26560,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:208,rnaSeqSampleCount:226,sGeneCount:1485,samplingSite:"Central right lobe, 1 cm below capsule.",tissueSite:"Liver",tissueSiteDetail:"Liver",tissueSiteDetailAbbr:"LIVER",tissueSiteDetailId:"Liver",uberonId:"0001114"},{colorHex:"99FF00",colorRgb:"153,255,0",datasetId:"gtex_v8",eGeneCount:14113,expressedGeneCount:30049,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:515,rnaSeqSampleCount:578,sGeneCount:4774,samplingSite:"Inferior segment of left upper lobe, 1 cm below the pleural surface.",tissueSite:"Lung",tissueSiteDetail:"Lung",tissueSiteDetailAbbr:"LUNG",tissueSiteDetailId:"Lung",uberonId:"0008952"},{colorHex:"99BB88",colorRgb:"153,187,136",datasetId:"gtex_v8",eGeneCount:4836,expressedGeneCount:30270,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:144,rnaSeqSampleCount:162,sGeneCount:1648,samplingSite:"Inner surface of lower lip.",tissueSite:"Salivary Gland",tissueSiteDetail:"Minor Salivary Gland",tissueSiteDetailAbbr:"SLVRYG",tissueSiteDetailId:"Minor_Salivary_Gland",uberonId:"0006330"},{colorHex:"AAAAFF",colorRgb:"170,170,255",datasetId:"gtex_v8",eGeneCount:13532,expressedGeneCount:25586,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:706,rnaSeqSampleCount:803,sGeneCount:4056,samplingSite:"The gastrocnemius muscle, 2 cm below the patella.",tissueSite:"Muscle",tissueSiteDetail:"Muscle - Skeletal",tissueSiteDetailAbbr:"MSCLSK",tissueSiteDetailId:"Muscle_Skeletal",uberonId:"0011907"},{colorHex:"FFD700",colorRgb:"255,215,0",datasetId:"gtex_v8",eGeneCount:17285,expressedGeneCount:30082,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:532,rnaSeqSampleCount:619,sGeneCount:5297,samplingSite:"Left tibial. Peripheral tibial nerve from gastrocnemius region",tissueSite:"Nerve",tissueSiteDetail:"Nerve - Tibial",tissueSiteDetailAbbr:"NERVET",tissueSiteDetailId:"Nerve_Tibial",uberonId:"0001323"},{colorHex:"FFAAFF",colorRgb:"255,170,255",datasetId:"gtex_v8",eGeneCount:5542,expressedGeneCount:29523,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:167,rnaSeqSampleCount:180,sGeneCount:1998,samplingSite:"Most normal regions of the left ovary (and right if necessary to obt    ain sufficient aliquots).",tissueSite:"Ovary",tissueSiteDetail:"Ovary",tissueSiteDetailAbbr:"OVARY",tissueSiteDetailId:"Ovary",uberonId:"0000992"},{colorHex:"995522",colorRgb:"153,85,34",datasetId:"gtex_v8",eGeneCount:9660,expressedGeneCount:27435,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:305,rnaSeqSampleCount:328,sGeneCount:2250,samplingSite:"Mid-portion (not tail).",tissueSite:"Pancreas",tissueSiteDetail:"Pancreas",tissueSiteDetailAbbr:"PNCREAS",tissueSiteDetailId:"Pancreas",uberonId:"0001150"},{colorHex:"AAFF99",colorRgb:"170,255,153",datasetId:"gtex_v8",eGeneCount:9146,expressedGeneCount:31187,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:237,rnaSeqSampleCount:283,sGeneCount:2901,samplingSite:"Entire pituitary gland.",tissueSite:"Pituitary",tissueSiteDetail:"Pituitary",tissueSiteDetailAbbr:"PTTARY",tissueSiteDetailId:"Pituitary",uberonId:"0000007"},{colorHex:"DDDDDD",colorRgb:"221,221,221",datasetId:"gtex_v8",eGeneCount:7356,expressedGeneCount:30385,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:221,rnaSeqSampleCount:245,sGeneCount:2463,samplingSite:"Non-nodular region of representative region.",tissueSite:"Prostate",tissueSiteDetail:"Prostate",tissueSiteDetailAbbr:"PRSTTE",tissueSiteDetailId:"Prostate",uberonId:"0002367"},{colorHex:"0000FF",colorRgb:"0,0,255",datasetId:"gtex_v8",eGeneCount:15483,expressedGeneCount:29686,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:517,rnaSeqSampleCount:604,sGeneCount:4652,samplingSite:"Extension of the abdominal incision to the suprapubic area avoiding pubic hair. ",tissueSite:"Skin",tissueSiteDetail:"Skin - Not Sun Exposed (Suprapubic)",tissueSiteDetailAbbr:"SKINNS",tissueSiteDetailId:"Skin_Not_Sun_Exposed_Suprapubic",uberonId:"0036149"},{colorHex:"7777FF",colorRgb:"119,119,255",datasetId:"gtex_v8",eGeneCount:16967,expressedGeneCount:29629,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:605,rnaSeqSampleCount:701,sGeneCount:5134,samplingSite:"Left or right leg 2 cm below patella on medial side.",tissueSite:"Skin",tissueSiteDetail:"Skin - Sun Exposed (Lower leg)",tissueSiteDetailAbbr:"SKINS",tissueSiteDetailId:"Skin_Sun_Exposed_Lower_leg",uberonId:"0004264"},{colorHex:"555522",colorRgb:"85,85,34",datasetId:"gtex_v8",eGeneCount:6681,expressedGeneCount:30321,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:174,rnaSeqSampleCount:187,sGeneCount:2084,samplingSite:"Thickened mucosa corresponding to lymphoid nodules (Peyer Patches) just proximal to the ileocecal valve in the most distal part of the small intestine.",tissueSite:"Small Intestine",tissueSiteDetail:"Small Intestine - Terminal Ileum",tissueSiteDetailAbbr:"SNTTRM",tissueSiteDetailId:"Small_Intestine_Terminal_Ileum",uberonId:"0001211"},{colorHex:"778855",colorRgb:"119,136,85",datasetId:"gtex_v8",eGeneCount:10783,expressedGeneCount:29856,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:227,rnaSeqSampleCount:241,sGeneCount:2837,samplingSite:"Central region, 5 mm below capsule.",tissueSite:"Spleen",tissueSiteDetail:"Spleen",tissueSiteDetailAbbr:"SPLEEN",tissueSiteDetailId:"Spleen",uberonId:"0002106"},{colorHex:"FFDD99",colorRgb:"255,221,153",datasetId:"gtex_v8",eGeneCount:8771,expressedGeneCount:28254,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:324,rnaSeqSampleCount:359,sGeneCount:2638,samplingSite:"Body (Gently rinse mucosa with normal saline before aliquot preparation)",tissueSite:"Stomach",tissueSiteDetail:"Stomach",tissueSiteDetailAbbr:"STMACH",tissueSiteDetailId:"Stomach",uberonId:"0000945"},{colorHex:"AAAAAA",colorRgb:"170,170,170",datasetId:"gtex_v8",eGeneCount:18795,expressedGeneCount:40180,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:322,rnaSeqSampleCount:361,sGeneCount:8626,samplingSite:"Left testis (and right testis if necessary to obtain sufficient tissue for aliquots).",tissueSite:"Testis",tissueSiteDetail:"Testis",tissueSiteDetailAbbr:"TESTIS",tissueSiteDetailId:"Testis",uberonId:"0000473"},{colorHex:"006600",colorRgb:"0,102,0",datasetId:"gtex_v8",eGeneCount:17684,expressedGeneCount:30166,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:574,rnaSeqSampleCount:653,sGeneCount:5358,samplingSite:"Most grossly non-nodular normal regions from either side (whichever side is observed to be more normal).",tissueSite:"Thyroid",tissueSiteDetail:"Thyroid",tissueSiteDetailAbbr:"THYROID",tissueSiteDetailId:"Thyroid",uberonId:"0002046"},{colorHex:"FF66FF",colorRgb:"255,102,255",datasetId:"gtex_v8",eGeneCount:3577,expressedGeneCount:29192,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:129,rnaSeqSampleCount:142,sGeneCount:1524,samplingSite:"Corpus. Bivalve uterus along endocervical canal to fundus.",tissueSite:"Uterus",tissueSiteDetail:"Uterus",tissueSiteDetailAbbr:"UTERUS",tissueSiteDetailId:"Uterus",uberonId:"0000995"},{colorHex:"FF5599",colorRgb:"255,85,153",datasetId:"gtex_v8",eGeneCount:3730,expressedGeneCount:29727,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:141,rnaSeqSampleCount:156,sGeneCount:1460,samplingSite:"Anterior.",tissueSite:"Vagina",tissueSiteDetail:"Vagina",tissueSiteDetailAbbr:"VAGINA",tissueSiteDetailId:"Vagina",uberonId:"0000996"},{colorHex:"FF00BB",colorRgb:"255,0,187",datasetId:"gtex_v8",eGeneCount:12360,expressedGeneCount:24144,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:670,rnaSeqSampleCount:755,sGeneCount:3013,samplingSite:"Femoral vein; subclavian vein and heart are other possible sites.",tissueSite:"Blood",tissueSiteDetail:"Whole Blood",tissueSiteDetailAbbr:"WHLBLD",tissueSiteDetailId:"Whole_Blood",uberonId:"0013756"}];class Rl extends class extends class{constructor(t={x:void 0,y:void 0,z:void 0},e,i){this.setCoord(t),this.setValue(e),this.setR(i)}get displayValue(){return this.v.toPrecision(3)}get value(){return this.v}setCoord(t={x:void 0,y:void 0,z:void 0}){this.x=t.x,this.y=t.y,this.z=t.z}setValue(t){this.v=t}setR(t){this.r=t}}{constructor(t,e,i){super(),this.varId=t,this.chr=e,this.pos=parseInt(i),this.rsId=void 0,void 0===this.chr&&this.setGenomicPosition()}get variantId(){return this.varId}get chromosome(){return this.chr}get colorValue(){return this.v}setRsId(t){this.rsId=t}setGenomicPosition(){this.pos=parseInt(this.varId.split("_")[1]),this.chr=this.varId.split("_")[0]}}{constructor(t,e,i,n,s,r,a){super(t),this.gencodeId=e,this.phenotypeId=i,this.tissueId=n,this.tissueSiteDetailAbbr=function(){let t={};return Gl.forEach(e=>{t[e.tissueSiteDetailId]=e}),t}()[this.tissueId].tissueSiteDetailAbbr,this.pValue=s,this.nes=r,this.type=a,this.setCoord({x:this.varId,y:this.type+"-"+this.tissueSiteDetailAbbr}),this.setR(-Math.log10(parseFloat(this.pValue.toPrecision(3)))),this.setValue(parseFloat(this.nes.toPrecision(3)))}get tissueSiteDetailId(){return this.tissueId}setGeneSymbol(t){this.geneSymbol=t}}class Fl extends class{constructor(t,e){this.label=t,this.type=e}get featureLabel(){return this.label}get featureType(){return this.type}}{constructor(t,e,i,n,s,r,a){super(a,r),this.gencodeId=t,this.id=t.split(".")[0].toLowerCase(),this.chr=e,this.start=n,this.end=s,this.type=r,this.symbol=a,this.strand=i,this.tss="+"==this.strand?this.start:this.end}get chromosome(){return this.chr}get pos(){return this.tss}get geneSymbol(){return this.symbol}}const Bl="https://gtexportal.org/rest/v1/",Wl={tissueInfo:Bl+"dataset/tissueInfo",dyneqtl:Bl+"association/dyneqtl",dynsqtl:Bl+"association/dynsqtl",funcAnno:Bl+"dataset/functionalAnnotation?datasetId=gtex_v8",queryGene:Bl+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",geneExpression:Bl+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000&gencodeId=",geneModel:Bl+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",eqtls:Bl+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",sqtls:Bl+"association/singleTissueSqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:Bl+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",independentEqtl:Bl+"association/independentEqtl?gencodeId=",genes:Bl+"reference/neighborGene?",geneInfo:Bl+"reference/gene?geneId=",fineMapping:Bl+"association/fineMapping?gencodeId=",variantEqtls:Bl+"association/singleTissueEqtl?tissueSiteDetailId=Adipose_Subcutaneous,Adipose_Visceral_Omentum,Adrenal_Gland,Artery_Aorta,Artery_Coronary,Artery_Tibial,Bladder,Brain_Amygdala,Brain_Anterior_cingulate_cortex_BA24,Brain_Caudate_basal_ganglia,Brain_Cerebellar_Hemisphere,Brain_Cerebellum,Brain_Cortex,Brain_Frontal_Cortex_BA9,Brain_Hippocampus,Brain_Hypothalamus,Brain_Nucleus_accumbens_basal_ganglia,Brain_Putamen_basal_ganglia,Brain_Spinal_cord_cervical_c-1,Brain_Substantia_nigra,Breast_Mammary_Tissue,Cells_EBV-transformed_lymphocytes,Cells_Cultured_fibroblasts,Cervix_Ectocervix,Cervix_Endocervix,Colon_Sigmoid,Colon_Transverse,Esophagus_Gastroesophageal_Junction,Esophagus_Mucosa,Esophagus_Muscularis,Fallopian_Tube,Heart_Atrial_Appendage,Heart_Left_Ventricle,Kidney_Cortex,Kidney_Medulla,Liver,Lung,Minor_Salivary_Gland,Muscle_Skeletal,Nerve_Tibial,Ovary,Pancreas,Pituitary,Prostate,Skin_Not_Sun_Exposed_Suprapubic,Skin_Sun_Exposed_Lower_leg,Small_Intestine_Terminal_Ileum,Spleen,Stomach,Testis,Thyroid,Uterus,Vagina,Whole_Blood&variantId=",variantSqtls:Bl+"association/singleTissueSqtl?variantId=",gwasCats:Bl+"reference/gwascatalogbylocation",ldByVariant:Bl+"dataset/ldByVariant?variantId=",variantByLocation:Bl+"dataset/variantbylocation?sortBy=pos&sortDirection=asc"};function jl(t,e){Xl(t,"gene");let i=void 0;return t.gene.length>1?(console.warn("More than one matching entities to "+e),i=function(t,e){const i="geneSymbolUpper";Xl(t[0],i);let n=t.filter(t=>t[i]==e.toUpperCase());if(1===n.length)return n[0];throw alert("Error: More than one gene match to this search. "),"No matching gene found"}(t.gene,e)):i=t.gene[0],["tss","chromosome","strand","gencodeId"].forEach(t=>{Xl(i,t)}),new Fl(i.gencodeId,i.chromosome,i.strand,i.start,i.end,i.geneType,i.geneSymbol)}function $l(t){const e="collapsedGeneModelExon";return Xl(t,e),0==t[e].length?(console.warn("This gene has no collapsed gene model information."),[]):(["start","exonId"].forEach(i=>{Xl(t[e][0],i)}),t[e].map(t=>(t.pos=t.start,t.featureLabel=t.exonId,t)))}function Ul(t,e="singleTissueEqtl"){Xl(t,e);let i=t[e];if(0==i.length)return[];["variantId","pos","pValue"].forEach(t=>{Xl(i[0],t)});let n=i.reduce((t,e)=>(t.hasOwnProperty(e.variantId)?t[e.variantId].pValue>e.pValue&&(t[e.variantId]=e):t[e.variantId]=e,t),{});return Object.values(n).map(t=>(t.chr=t.chromosome,t.start=t.pos,t.end=t.pos,t.featureType="variant",t.featureLabel=t.snpId||t.variantId,t.colorValue=-Math.log10(t.pValue),t)).sort((t,e)=>parseInt(t.pos)-parseInt(e.pos))}function Vl(t,e="singleTissueEqtl",i="eQTL"){Xl(t,e);let n=t[e];if(void 0===n)throw`Data parsing error: ${t} ${e}`;return 0==n.length?[]:(["variantId","tissueSiteDetailId","nes","pValue"].forEach(t=>{Xl(n[0],t)}),n.map(t=>{const e=new Rl(t.variantId,t.gencodeId,t.phenotypeId,t.tissueSiteDetailId,t.pValue,t.nes,i);return e.setGeneSymbol(t.geneSymbol),e.setRsId(t.snpId),e}))}function Yl(t,e="independentEqtl"){Xl(t,e);const i=t[e];if(0==i.length)return[];["gencodeId","variantId","rank","tissueSiteDetailId"].forEach(t=>{Xl(i[0],t)});const n=i.reduce((t,e)=>{const i=e.tissueSiteDetailId;return t.hasOwnProperty(i)||(t[i]=0),t[i]+=1,t},{});return i.map(t=>(t.tissueId=t.tissueSiteDetailId,t.x=t.variantId,t.y="eQTL-"+t.tissueId,t.rank=parseInt(t.rank),t)).filter(t=>{const e=t.tissueSiteDetailId;return n[e]>=2})}function Xl(t,e,i=!1){if(i&&console.info(t),void 0===t.hasOwnProperty(e))throw console.error(t),"Data Parsing Error: required attribute not found."+e}function Kl(t={x:20,y:20,scaleFactor:1,diverging:!1,bubble:!1}){let e=te(1,t.x+1),i=te(1,t.y+1),n=[];return e.forEach(e=>{e="x"+e.toString(),i.forEach(i=>{i="y"+i.toString();let s=Math.random()*t.scaleFactor;s=t.diverging&&Math.random()<.5?-s:s,n.push({x:e,y:i,value:s,displayValue:parseFloat(s.toExponential()).toPrecision(3),r:t.bubble?30*Math.random():void 0})})}),n}var Ql=i(8);function Jl(t){for(var e="",i=document.styleSheets,n=0;n<i.length;n++)try{if(null==i[n].cssRules)continue;for(var s=i[n].cssRules,r=0;r<s.length;r++){var a=s[r];if(void 0!==a.style){var o,l=void 0===a.selectorText?a.selectorText:a.selectorText.replace(`#${t[0].id} `,"");try{o=_o()(t).find(l)}catch(t){o=[]}o.length>0&&(e+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var u=document.createElement("style");return u.setAttribute("type","text/css"),u.innerHTML="<![CDATA[\n"+e+"\n]]>",u}class Zl{constructor(t,e,i=!1){_o()("#"+t).show();const n=i?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=_o()("<div/>").addClass(n).appendTo("#"+t),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,i,n,s="fa-download"){this.createButton(t,s),Et("#"+t).on("click",()=>{this.downloadSvg(e,i,n)}).on("mouseover",()=>{this.tooltip.show("Download the plot")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,i="fa-expand-arrows-alt"){this.createButton(t,i),Et("#"+t).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download",i="need to define",n){const s=_o()("<a/>").attr("id",t).addClass("btn btn-default btn-light btn-sm").appendTo(this.bar);return e.startsWith("fa-")?_o()("<i/>").addClass("fa "+e).appendTo(s):s.text(e),this.buttons[t]=s,"foo"!=t&&Et("#"+t).on("click",()=>{void 0===n?alert("need to define the click event"):n()}).on("mouseover",()=>{this.tooltip.show(i)}).on("mouseout",()=>{this.tooltip.hide()}),s}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,i){console.log(t,e,i);let n=_o()(_o()(_o()(""+("#"+t)))[0]),s=n.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),r=Jl(n.get());s.prepend(r),_o()("#"+i).html("").hide();let a=_o()("#"+i).append(s).html(),o=new Blob([a],{type:"image/svg+xml"});Object(Ql.saveAs)(o,e),_o()("#"+i).html("").hide()}}function tu(t){var e=0,i=t.children,n=i&&i.length;if(n)for(;--n>=0;)e+=i[n].value;else e=1;t.value=e}function eu(t,e){var i,n,s,r,a,o=new ru(t),l=+t.value&&(o.value=t.value),u=[o];for(null==e&&(e=iu);i=u.pop();)if(l&&(i.value=+i.data.value),(s=e(i.data))&&(a=s.length))for(i.children=new Array(a),r=a-1;r>=0;--r)u.push(n=i.children[r]=new ru(s[r])),n.parent=i,n.depth=i.depth+1;return o.eachBefore(su)}function iu(t){return t.children}function nu(t){t.data=t.data.data}function su(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function ru(t){this.data=t,this.depth=this.height=0,this.parent=null}ru.prototype=eu.prototype={constructor:ru,count:function(){return this.eachAfter(tu)},each:function(t){var e,i,n,s,r=this,a=[r];do{for(e=a.reverse(),a=[];r=e.pop();)if(t(r),i=r.children)for(n=0,s=i.length;n<s;++n)a.push(i[n])}while(a.length);return this},eachAfter:function(t){for(var e,i,n,s=this,r=[s],a=[];s=r.pop();)if(a.push(s),e=s.children)for(i=0,n=e.length;i<n;++i)r.push(e[i]);for(;s=a.pop();)t(s);return this},eachBefore:function(t){for(var e,i,n=this,s=[n];n=s.pop();)if(t(n),e=n.children)for(i=e.length-1;i>=0;--i)s.push(e[i]);return this},sum:function(t){return this.eachAfter((function(e){for(var i=+t(e.data)||0,n=e.children,s=n&&n.length;--s>=0;)i+=n[s].value;e.value=i}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,i=function(t,e){if(t===e)return t;var i=t.ancestors(),n=e.ancestors(),s=null;t=i.pop(),e=n.pop();for(;t===e;)s=t,t=i.pop(),e=n.pop();return s}(e,t),n=[e];e!==i;)e=e.parent,n.push(e);for(var s=n.length;t!==i;)n.splice(s,0,t),t=t.parent;return n},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(i){i!==t&&e.push({source:i.parent,target:i})})),e},copy:function(){return eu(this).eachBefore(nu)}};function au(t){this._context=t}au.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var ou=function(t){return new au(t)};function lu(t){return t[0]}function uu(t){return t[1]}var hu=function(){var t=lu,e=uu,i=vo(!0),n=null,s=ou,r=null;function a(a){var o,l,u,h=a.length,c=!1;for(null==n&&(r=s(u=lo())),o=0;o<=h;++o)!(o<h&&i(l=a[o],o,a))===c&&((c=!c)?r.lineStart():r.lineEnd()),c&&r.point(+t(l,o,a),+e(l,o,a));if(u)return r=null,u+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:vo(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:vo(+t),a):e},a.defined=function(t){return arguments.length?(i="function"==typeof t?t:vo(!!t),a):i},a.curve=function(t){return arguments.length?(s=t,null!=n&&(r=s(n)),a):s},a.context=function(t){return arguments.length?(null==t?n=r=null:r=s(n=t),a):n},a},cu=function(){var t=lu,e=null,i=vo(0),n=uu,s=vo(!0),r=null,a=ou,o=null;function l(l){var u,h,c,d,p,f=l.length,g=!1,m=new Array(f),v=new Array(f);for(null==r&&(o=a(p=lo())),u=0;u<=f;++u){if(!(u<f&&s(d=l[u],u,l))===g)if(g=!g)h=u,o.areaStart(),o.lineStart();else{for(o.lineEnd(),o.lineStart(),c=u-1;c>=h;--c)o.point(m[c],v[c]);o.lineEnd(),o.areaEnd()}g&&(m[u]=+t(d,u,l),v[u]=+i(d,u,l),o.point(e?+e(d,u,l):m[u],n?+n(d,u,l):v[u]))}if(p)return o=null,p+""||null}function u(){return hu().defined(s).curve(a).context(r)}return l.x=function(i){return arguments.length?(t="function"==typeof i?i:vo(+i),e=null,l):t},l.x0=function(e){return arguments.length?(t="function"==typeof e?e:vo(+e),l):t},l.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:vo(+t),l):e},l.y=function(t){return arguments.length?(i="function"==typeof t?t:vo(+t),n=null,l):i},l.y0=function(t){return arguments.length?(i="function"==typeof t?t:vo(+t),l):i},l.y1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:vo(+t),l):n},l.lineX0=l.lineY0=function(){return u().x(t).y(i)},l.lineY1=function(){return u().x(t).y(n)},l.lineX1=function(){return u().x(e).y(i)},l.defined=function(t){return arguments.length?(s="function"==typeof t?t:vo(!!t),l):s},l.curve=function(t){return arguments.length?(a=t,null!=r&&(o=a(r)),l):a},l.context=function(t){return arguments.length?(null==t?r=o=null:o=a(r=t),l):r},l};const du=function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)},pu=function(t){let e=(oe(t,.75)-oe(t,.25))/1.34;return 1.06*Math.min(Qt(t),e)*Math.pow(t.length,-.2)};class fu{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0,this.groups=ve().key(t=>{if(void 0===t.group)throw"required attribute does not exist";return t.group}).entries(this.data)}setYDomain(t){if(void 0===t||0==t.length){let e=[];this.data.forEach(t=>e=e.concat(t.values)),t=Jt(e)}return t}render(t,e=500,i=357,n,s,r={show:!0,angle:30,paddingInner:.01,paddingOuter:.01,textAnchor:"start",adjustHeight:0,showLabels:!0,showTicks:!0},a={show:!0,angle:0,paddingInner:0,paddingOuter:0,sort:!1,adjustHeight:5},o={label:"Y label"},l={show:!1,angle:0,adjustHeight:void 0},u=!1,h=!1,c=!1,d=!1,p=0,f,g="kdeScott"){this.dom=t,this.width=e,this.height=i,this.config={x:r,subx:a,y:o,size:l},this.scale={x:Ie().range([0,this.width]).domain(n||this.groups.map(t=>t.key)).paddingOuter(this.config.x.paddingOuter).paddingInner(this.config.x.paddingInner),subx:Ie(),y:Qi().rangeRound([this.height,0]).domain(this.setYDomain(s)),z:Qi()},this.show={whisker:u,outliers:d,divider:h,legend:c,points:p},this.kdeOption=g,this.vColor=f,this.reset()}update(){this.groups.forEach(t=>{t.index=this.scale.x.domain().indexOf(t.key);let e=this.groupInfo[t.key];void 0!==e&&this._renderGroupInfoText(e,t.key);this.scale.subx.domain((()=>(this.config.subx.sort&&t.values.sort((t,e)=>t.label<e.label?-1:t.label>e.label?1:0),t.values.map(t=>t.label)))()).range([this.scale.x(t.key),this.scale.x(t.key)+this.scale.x.bandwidth()]),t.values.forEach(e=>{0!=e.values.length&&(e.values=e.values.sort($t),void 0!==this.vColor&&(e.color=this.vColor),t.dom=this._drawViolin(e,t.index))}),this.config.size.show&&this._renderSizeAxis(t),this.config.subx.show&&this._renderSubXAxis(t)}),this._renderXAxis(),this._renderYAxis(),this.dom.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),this.show.divider&&this._addGroupDivider(),this.show.legend&&this._addLegend()}addPlotTitle(t,e){let i=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,n=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${i}, ${n})`).text(e)}createTooltip(t){return 0==_o()("#"+t).length&&_o()("<div/>").attr("id",t).appendTo(_o()("body")),this.tooltip=new Hl(t),Et("#"+t).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return this.toolbar=new Zl(t,e),this.toolbar}addBrush(t){const e=io(Wa);e.on("end",()=>{this.zoom(t,e)}),t.append("g").attr("class","brush").call(e)}zoom(t,e){let i,n=vt.selection;if(void 0===e)this.reset();else if(n){this.scale.x.domain(this.scale.x.domain().filter((t,e)=>{const i=Math.floor(n[0][0]/this.scale.x.bandwidth()),s=Math.floor(n[1][0]/this.scale.x.bandwidth());return e>=i&&e<=s}));const i=Math.floor(this.scale.y.invert(n[1][1])),s=Math.floor(this.scale.y.invert(n[0][1]));this.scale.y.domain([i,s]),t.select(".brush").call(e.move,null)}else{if(!i)return i=setTimeout((function(){i=null}),350);this.reset()}let s=t.transition().duration(750);t.select(".axis--x").transition(s).call(this.xAxis),t.select(".axis--y").transition(s).call(this.yAxis),this.groups.forEach(e=>{let i=e.key,n=e.values;this.scale.subx.range([this.scale.x(i),this.scale.x(i)+this.scale.x.bandwidth()]),n.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(i),this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const r=t.select(`#violin${e.index}-${n.label}`);r.select(".violin").transition(s).attr("d",cu().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const a=oe(n.values,.25),o=oe(n.values,.75),l=.1;r.select(".violin-ir").transition(s).attr("x",this.scale.z(-l)).attr("y",this.scale.y(o)).attr("width",Math.abs(this.scale.z(-l)-this.scale.z(l))).attr("height",Math.abs(this.scale.y(o)-this.scale.y(a)));const u=he(n.values);r.select(".violin-median").transition(s).attr("x1",this.scale.z(-l)).attr("x2",this.scale.z(l)).attr("y1",this.scale.y(u)).attr("y2",this.scale.y(u))})})}reset(){this.dom.selectAll("*").remove(),this.update()}updateData(t,e=!1,i=!0){this.data=t,this.groups=ve().key(t=>{if(void 0===t.group)throw"required attribute does not exist";return t.group}).entries(this.data),this.updateYScale(),this.updateXScale(),this.show.outliers=i,e&&this.reset()}updateYScale(t,e,i=!1){void 0!==t&&(this.config.y.label=t),this.scale.y=Qi().rangeRound([this.height,0]).domain(this.setYDomain(e)),i&&this.reset()}updateXScale(t,e=!1){this.scale.x=Ie().range([0,this.width]).domain(t||this.groups.map(t=>t.key)).paddingOuter(this.config.x.paddingOuter).paddingInner(this.config.x.paddingInner),e&&this.reset()}_drawViolin(t,e){const i=e=>{this.scale.z.domain([-e,e]).range([this.scale.subx(t.label),this.scale.subx(t.label)+this.scale.subx.bandwidth()])},n=this._generateVertices(t.values,this.kdeOption),s=this.dom.append("g").attr("id",`violin${e}-${t.label}`).attr("class","violin-g").datum(t);if(t.values.length>this.show.points&&n.length&&this._validVertices(n)){i(le(n,t=>Math.abs(t[1])));const r=oe(t.values,.25),a=oe(t.values,.75),o=Math.abs(a-r),l=Jt(t.values.filter(t=>t<=a+1.5*o)),u=l[1],h=l[0],c=he(t.values);if(this._renderViolinShape(s,t,n,c,e%2==0),(void 0===t.showBoxplot||t.showBoxplot)&&this._renderBoxPlot(s,t,h,u,r,a,c),this.show.outliers){const e=t.values.filter(t=>t<h||t>u);this._renderDataDots(s,{values:e,color:t.color},1)}t.showPoints&&this._renderDataDots(s,t,1)}else if(this.show.points>0){i(le(t.values,t=>Math.abs(t))),this._renderDataDots(s,t,1)}return s}_renderViolinShape(t,e,i,n,s,r="#94a8b8",a="#90c1c1"){let o=cu().x0(t=>this.scale.z("left"==e.showHalfViolin?0:t[1])).x1(t=>this.scale.z("right"==e.showHalfViolin?0:-t[1])).y(t=>this.scale.y(t[0]));const l=()=>void 0!==e.color?e.color:s?a:r,u=t.append("path").datum(i).attr("d",o).classed("violin",!0).style("fill",e.fill?e.fill:l).style("stroke",e.stroke?e.stroke:l);t.on("mouseover",()=>{u.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+n.toPrecision(4)+"<br/>")}),t.on("mouseout",()=>{u.classed("highlighted",!1)})}_renderBoxPlot(t,e,i,n,s,r,a){const o=this.scale.z.domain()[1]/3;this.show.whisker&&t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(n)).attr("y2",this.scale.y(i)).style("stroke","#fff"),t.append("rect").attr("x","right"==e.showHalfViolin?this.scale.z(0):this.scale.z(-o)).attr("y",this.scale.y(r)).attr("width",void 0===e.showHalfViolin?Math.abs(this.scale.z(-o)-this.scale.z(o)):Math.abs(this.scale.z(0)-this.scale.z(o))).attr("height",Math.abs(this.scale.y(r)-this.scale.y(s))).style("fill",e.altColor||"#555f66").style("stroke-width",.2),t.append("line").attr("x1","right"==e.showHalfViolin?this.scale.z(0):this.scale.z(-o)).attr("x2","left"==e.showHalfViolin?this.scale.z(0):this.scale.z(o)).attr("y1",this.scale.y(a)).attr("y2",this.scale.y(a)).attr("class","violin-median")}_renderDataDots(t,e,i=2){const n=this.scale.z.domain()[1],s=Ko(0,n/4);t.append("g").attr("class","violin-points").selectAll("circle").data(e.values).enter().append("circle").attr("cx",()=>this.scale.z("left"==e.showHalfViolin?-Math.abs(s()):Math.abs(s()))).attr("cy",t=>this.scale.y(t)).attr("fill",e.color).attr("r",i)}_sanityCheck(t){const e=["group","label","values"];t.forEach(t=>{e.forEach(e=>{if(void 0===t[e])throw"GroupedViolin: input data error."})})}_addGroupDivider(){const t=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),i=(i,n)=>n!==t.length-1?this.scale.x(i)+ +this.scale.x.bandwidth()+e/2:0;this.dom.selectAll(".vline").data(t).enter().append("line").classed("vline",!0).attr("x1",i).attr("x2",i).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(e,i)=>i!=t.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_addLegend(){const t=this.dom.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");t.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const e=t.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0);e.append("rect").attr("x",(t,e)=>5+60*e+this.scale.x.range()[0]).attr("y",-28).attr("width",10).attr("height",10).style("fill",t=>t.color),e.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,e)=>17+60*e+this.scale.x.range()[0]).attr("y",-20)}_renderGroupInfoText(t,e){this.dom.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","middle").attr("fill",e=>"pvalue"==e&&parseFloat(t[e])<=parseFloat(t.pvalueThreshold)?"orangered":"SlateGray").attr("transform",()=>`translate(${this.scale.x(e)+this.scale.x.bandwidth()/2}, ${this.scale.y(this.scale.y.domain()[0])+50})`).text(e=>`${e}: ${parseFloat(parseFloat(t[e]).toPrecision(3)).toExponential()}`)}_renderXAxis(){let t=this.config.subx.show?55:0;const e=this.config.x;e.show&&(this.xAxis="top"==e.direction?Ft(this.scale.x):Wt(this.scale.x),e.hideLabels&&(this.Axis=this.xAxis.tickFormat("")),e.hideTicks&&(this.Axis=this.xAxis.tickSize(0)),this.dom.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${void 0!==e.adjustHeight?e.adjustHeight:this.height+t})`).call(this.xAxis).selectAll("text").attr("text-anchor",e.textAnchor?e.textAnchor:"start").attr("transform",`rotate(${e.angle}, 0, 10)`))}_renderYAxis(t=!1){this.yAxis=jt(this.scale.y).tickValues(this.scale.y.ticks(5)),t&&this.dom.select(".violin-y-axis").empty().remove(),this.dom.append("g").attr("class","violin-y-axis axis--y").attr("transform","translate(-5, 0)").call(this.yAxis),this.dom.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${10+Et(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(this.config.y.label)}_renderSizeAxis(t){let e={};t.values.forEach(t=>e[t.label]=`(${t.size||t.values.length})`);let i=Wt(Ie().domain(t.values.map(t=>t.label)).rangeRound([this.scale.x(t.key),this.scale.x(t.key)+this.scale.x.bandwidth()])).tickFormat(t=>e[t]);const n=this.height+18,s=this.config.size,r=t.dom.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${s.adjustHeight||n})`).call(i);s.angle>0&&r.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${s.angle}, 2, 10)`)}_renderSubXAxis(t){const e=this.config.subx,i=e.adjustHeight?e.adjustHeight:5;let n=Wt(this.scale.subx);e.hideTicks&&(n=n.tickSize(0));const s=t.dom.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${this.height+i})`).call(n);e.angle>0&&s.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${e.angle}, 2, 10)`)}_generateVertices(t,e){let i=(n=du,s=this.scale.y.ticks(100),r=pu(t),function(t){return s.map(e=>[e,ue(t,t=>n((e-t)/r))/r])});var n,s,r;const a=Jt(t);let o="default"==e?i(t):function(t,e){void 0===e&&(e=Qi().domain(Jt(t)).nice().ticks(100));const i=Math.pow(t.length,-.2),n=1/Qt(t)/i,s=Math.pow(2*Math.PI,-.5)*n/t.length;return e.map(e=>{let i=0;return t.forEach(t=>{i+=Math.exp(-Math.pow((t-e)*n,2)/2)}),[e,i*s]})}(t);return o=o.filter(t=>t[0]>=a[0]&&t[0]<=a[1]),o}_validVertices(t){return!t.reduce((t,e)=>t.concat(e),[]).filter(t=>isNaN(t)).length}}function gu(t,e,i){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-i),t._x2,t._y2)}function mu(t,e){this._context=t,this._k=(1-e)/6}mu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:gu(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:gu(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function i(t){return new mu(t,e)}return i.tension=function(e){return t(+e)},i})(0);const vu={heatmap:Kl({x:50,y:10,scaleFactor:1e3}),dendroHeatmap:{rowTree:"(((TP53:0.17,SLK:0.17):1.18,NDRG4:1.34):1.33,ACTN3:2.67);",colTree:"(((Adipose Visceral Omentum:0.06,Adipose Subcutaneous:0.06):0.00,Bladder:0.06):0.16,Adrenal Gland:0.22);",heatmap:[{y:"SLK",value:35.505,x:"Adipose Subcutaneous",unit:"TPM"},{y:"SLK",value:29.28,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"SLK",value:17.405,x:"Adrenal Gland",unit:"TPM"},{y:"SLK",value:53.29,x:"Bladder",unit:"TPM"},{y:"NDRG4",value:12.035,x:"Adipose Subcutaneous",unit:"TPM"},{y:"NDRG4",value:6.531000000000001,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"NDRG4",value:134.8,x:"Adrenal Gland",unit:"TPM"},{y:"NDRG4",value:7.1160000000000005,x:"Bladder",unit:"TPM"},{y:"TP53",value:29.935,x:"Adipose Subcutaneous",unit:"TPM"},{y:"TP53",value:23.55,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"TP53",value:18.515,x:"Adrenal Gland",unit:"TPM"},{y:"TP53",value:40.51,x:"Bladder",unit:"TPM"},{y:"ACTN3",value:.33145,x:"Adipose Subcutaneous",unit:"TPM"},{y:"ACTN3",value:.3317,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"ACTN3",value:.100005,x:"Adrenal Gland",unit:"TPM"},{y:"ACTN3",value:.48100000000000004,x:"Bladder",unit:"TPM"}]},groupedViolinPlot:[{group:"Group 1",label:"Gene 1",values:te(0,2e3).map(Ko(2,1))},{group:"Group 1",label:"Gene 2",values:te(0,2e3).map(Ko(5,1))},{group:"Group 1",label:"Gene 3",values:te(0,2e3).map(Ko(10,1))},{group:"Group 2",label:"Gene 1",values:te(0,2e3).map(Ko(5,1))},{group:"Group 2",label:"Gene 2",values:te(0,2e3).map(Ko(3,1))},{group:"Group 2",label:"Gene 3",values:te(0,2e3).map(Ko(1,1))},{group:"Group 3",label:"Gene 1",values:te(0,2e3).map(Ko(2,1))},{group:"Group 3",label:"Gene 2",values:te(0,2e3).map(Ko(3,1))},{group:"Group 3",label:"Gene 3",values:te(0,2e3).map(Ko(5,1))}],transcriptTracks:{exons:{"ENST00000311595.9":[{chrom:"17",chromEnd:77071172,exonId:"ENSE00002713933.1",exonNumber:"1",chromStart:77071151,strand:"+"},{chrom:"17",chromEnd:77073579,exonId:"ENSE00003672628.1",exonNumber:"2",chromStart:77073512,strand:"+"},{chrom:"17",chromEnd:77073946,exonId:"ENSE00003475281.1",exonNumber:"3",chromStart:77073745,strand:"+"},{chrom:"17",chromEnd:77075719,exonId:"ENSE00001111713.1",exonNumber:"4",chromStart:77075571,strand:"+"},{chrom:"17",chromEnd:77076446,exonId:"ENSE00003651250.1",exonNumber:"5",chromStart:77076289,strand:"+"},{chrom:"17",chromEnd:77077155,exonId:"ENSE00003607773.1",exonNumber:"6",chromStart:77077007,strand:"+"},{chrom:"17",chromEnd:77078612,exonId:"ENSE00002720924.1",exonNumber:"7",chromStart:77077980,strand:"+"}]},transcripts:[{chromosome:"17",end:77078612,gencodeId:"ENSG00000167280.12",geneSymbol:"ENGASE",start:77071151,strand:"+",transcriptId:"ENST00000311595.9"}]},bubbleMap:Kl({x:50,y:10,scaleFactor:1,diverging:!0,bubble:!0}),ldPlot:Kl({x:2,y:2,scaleFactor:1})};const bu={id:"gtexGroupedViolinPlot",data:vu.groupedViolinPlot,width:500,height:300,margin:{top:50,right:20,bottom:100,left:100},xAxis:{show:!0,angle:0,paddingInner:.01,paddingOuter:.01},subXAxis:{show:!0,angle:0,paddingInner:0,paddingOuter:0,sort:!1},yAxis:{label:"Random Value"},sizeAxis:{show:!0},showDivider:!0,showWhisker:!1,showLegend:!1};function yu(t,e,i,n,s,r="eqtl",a=function(){const t="https://gtexportal.org/rest/v1/";return{singleCellExpression:"https://dev.gtexportal.org/rest/v1/expression/singlenucleusgeneexpression?datasetId=gtex_snrnaseq_pilot&gencodeId=",singleTissueEqtl:t+"association/singleTissueEqtl?gencodeId=",ld:t+"dataset/ld?gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?snpId=",variantId:t+"dataset/variant?variantId=",exonExp:t+"expression/medianExonExpression?hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v8&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v8&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?gencodeId=",geneExp:t+"expression/geneExpression?gencodeId=",medGeneExp:t+"expression/medianGeneExpression?hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?geneId=",tissue:t+"dataset/tissueInfo",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",dynsqtl:t+"association/dynsqtl",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){let o="";o="sqtl"==r.toLowerCase()?a.dynsqtl+`?variantId=${i}&phenotypeId=${e}&tissueSiteDetailId=${n}`:a.dyneqtl+`?variantId=${i}&gencodeId=${e}&tissueSiteDetailId=${n}`,b(o,{credentials:"include"}).then((function(e){let i=function(t){["data","genotypes","pValue","pValueThreshold","tissueSiteDetailId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parse Error: Required json attribute is missing: "+e}),t.expression_values=t.data.map(t=>parseFloat(t)),t.genotypes=t.genotypes.map(t=>parseFloat(t)),t.homoRefExp=t.expression_values.filter((e,i)=>0==t.genotypes[i]),t.homoAltExp=t.expression_values.filter((e,i)=>2==t.genotypes[i]),t.heteroExp=t.expression_values.filter((e,i)=>1==t.genotypes[i]);let e=t.variantId.split(/_/)[2],i=t.variantId.split(/_/)[3];return t.het=e+i,t.ref=e+e,t.alt=i+i,t}(e);t.data=[{group:s||i.tissueSiteDetailId,label:i.ref.length>2?"ref":i.ref,size:i.homoRefExp.length,values:i.homoRefExp},{group:s||i.tissueSiteDetailId,label:i.het.length>2?"het":i.het,size:i.heteroExp.length,values:i.heteroExp},{group:s||i.tissueSiteDetailId,label:i.alt.length>2?"alt":i.alt,size:i.homoAltExp.length,values:i.homoAltExp}],t.numPoints=10,function(t=bu){Ol(t.id);let e=t.width-(t.margin.left+t.margin.right),i=t.height-(t.margin.top+t.margin.bottom),n=(t.id,t.id+"Tooltip"),s=ql(t.id,t.width,t.height,t.margin);const r=new fu(t.data);r.render(s,e,i,void 0,[],t.xAxis,t.subXAxis,t.yAxis,t.sizeAxis,t.showWhisker,t.showDivider,t.showLegend,t.showOutliers,t.numPoints,t.vColor),s.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1),r.createTooltip(n)}(t)}))}i(24);function _u(t,e,i){!function(t){if(Et("#"+t).empty()){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}(t);let n=_o()("#"+t),s=_o()("<div/>").attr("id",e).attr("title",i).appendTo(n),r=_o()("<div/>").html("Clear All").appendTo(s),a=_o()("<div/>").attr("id",e+"-content").appendTo(s);s.dialog({title:i,autoOpen:!1}),r.click((function(){a.empty()}))}function xu(t,e,i){let n=_o()("<div/>").attr("class","violin-dialog").css("float","left").css("margin","20px").appendTo(`#${t}-content`),s=_o()("<div/>").appendTo(n);_o()("<i/>").attr("class","fa fa-window-close").css("margin-right","2px").click((function(){n.remove()})).appendTo(s);let r=`${e.y}<br/><span style="font-size: 12px">${e.geneSymbol}: ${e.gencodeId}<br/>${e.x}<br/></span>`;"sQTL"==e.type?r+=`<span style="font-size: 12px">${e.phenotypeId.replace(":"+e.gencodeId,"")}</span><br/>`:r+="<br/>",_o()("<span/>").attr("class","title").html(r).appendTo(s);let a="dEqtl"+Date.now().toString();return _o()("<div/>").attr("id",a).appendTo(n),function(t,e,i){let n={id:t,data:void 0,width:250,height:200,margin:{left:50,right:20,top:20,bottom:50},showDivider:!1,xAxis:{show:!1,angle:0,paddingInner:.01,paddingOuter:.01,textAnchor:"start",adjustHeight:0,showLabels:!1,showTicks:!1},yAxis:{label:"eQTL"==e.type?"Norm. Expression":"Norm. Intron-Excision Ratio"},showWhisker:!1,showLegend:!1,showSampleSize:!0,vColor:"sQTL"==e.type?"#a4dced":"#a9e4cc"},s="eQTL"==e.type?e.gencodeId:e.phenotypeId;yu(n,s,e.variantId,e.tissueSiteDetailId,e.y,e.type,i)}(a,e,i),n}const wu=t=>`QTL type: ${t.type} <br> Tissue: ${t.tissueId}<br/> Variant: ${t.x} <br/> rs ID: ${t.rsId} <br/> NES: ${t.value}<br/> -log10(p-value): ${t.r.toPrecision(3)}`;let Su={locusData:{gwasImputed:void 0,eqtl:void 0,sqtl:void 0},track:{tss:void 0,geneModel:void 0,eqtl:void 0,sqtl:void 0,enhancerBrain:void 0,enhancerHeart:void 0,enhancerLung:void 0,enhancerSkeletalMuscle:void 0},queryGene:void 0,genes:void 0,gwasToGene:void 0,functionAnnotationDict:void 0,ld:[],tissueMap:{}},Cu={svg:void 0,lastTrack:void 0,ldMap:void 0};const ku=Wl,Du={enhancer:"rgb(193, 39, 45)",promoter:"rgb(237, 28, 36)",open_chromatin_region:"rgb(247, 147, 30)",promoter_flanking_region:"rgb(241, 90, 36)",CTCF_binding_site:"rgb(255, 221, 13)",TF_binding_site:"rgb(252, 238, 33)","3_prime_UTR_variant":"rgb(140, 198, 63)","5_prime_UTR_variant":"rgb(57, 181, 74)",frameshift_variant:"rgb(102, 45, 145)",intron_variant:"rgb(179, 179, 179)",missense_variant:"rgb(255, 143, 241)",non_coding_transcript_exon_variant:"rgb(153, 134, 117)",splice_acceptor_variant:"rgb(41, 171, 226)",splice_donor_variant:"rgb(0, 113, 188)",splice_region_variant:"rgb(46, 49, 146)",stop_gained:"rgb(255, 0, 255)",synonymous_variant:"rgb(255, 211, 206)"};function Tu(t,e=Fu){!function(t){Et("#"+t.spinnerId).style("opacity",1)}(e),Et("#locus-browser-error").text(""),function(t,e){b(t.urls.queryGene+e,{credentials:"include"}).then(i=>{const n=jl(i,e);b(`${t.urls.genes}pos=${n.tss}&chromosome=${n.chromosome}&bpWindow=${t.genomicWindow}`,{credentials:"include"}).then(i=>{const s=["geneModel","tissueInfo","funcAnno","eqtls","sqtls","independentEqtl","ld"].map(e=>{if("tissueInfo"==e)return b(t.urls[e],{credentials:"include"});if("funcAnno"==e)return b(t.urls[e]+`&chromosome=${n.chromosome}&start=${n.tss-1e6}&end=${n.tss+1e6}`,{credentials:"include"});const i=t.urls[e]+n.gencodeId;return b(i,{credentials:"include"})});Promise.all(s).then(s=>{t.data.queryGene=n,t.data.genes=function(t){const e="neighborGene";return Xl(t,e),Xl(t[e][0],"geneType"),t[e].filter(t=>"protein coding"==t.geneType||"lincRNA"==t.geneType).map(t=>new Fl(t.gencodeId,t.chromosome,t.strand,t.start,t.end,t.geneType,t.geneSymbol))}(i),t.data.tissueMap=function(t){Xl(t,"tissueInfo");const e=t.tissueInfo;["rnaSeqAndGenotypeSampleCount","tissueSiteDetailId"].forEach(t=>{Xl(e[0],t)});let i={};return e.forEach(t=>{i[t.tissueSiteDetailAbbr]=t}),i}(s[1]),t.data.functionAnnotationDict=function(t,e){const i=new Set(["enhancer","promoter","open_chromatin_region","promoter_flanking_region","CTCF_binding_site","TF_binding_site"]),n="functionalAnnotation";Xl(t,n),["chromosome","pos"].forEach(e=>{Xl(t[n][0],e)});let s={};const r={"3PrimeUtrVariant":"3_prime_UTR_variant","5PrimeUtrVariant":"5_prime_UTR_variant",ctcfBindingSite:"CTCF_binding_site",enhancer:"enhancer",frameshiftVariant:"frameshift_variant",intronVariant:"intron_variant",missenseVariant:"missense_variant",nonCodingTranscriptExonVariant:"non_coding_transcript_exon_variant",openChromatinRegion:"open_chromatin_region",promoter:"promoter",promoterFlankingRegion:"promoter_flanking_region",spliceAcceptorVariant:"splice_acceptor_variant",spliceDonorVariant:"splice_donor_variant",spliceRegionVariant:"splice_region_variant",stopGained:"stop_gained",synonymous_variant:"synonymouse_variant",tfBindingSite:"TF_binding_site"};return t[n].forEach(t=>{let n=Object.keys(t).filter(n=>{if(1==t[n]&&r.hasOwnProperty(n)){let s=r[n];return void 0===e||t.pos<=e.end&&t.pos>=e.start||i.has(s)}}).map(t=>r[t]);n.length>0&&(s[t.variantId]=n)}),s}(s[2],n),t.data.locusData={eqtl:Vl(s[3],"singleTissueEqtl","eQTL"),sqtl:Vl(s[4],"singleTissueSqtl","sQTL")},t.data.indies={eqtl:Yl(s[5])},t.data.track={tss:t.data.genes,geneModel:$l(s[0]),eqtl:Ul(s[3],"singleTissueEqtl"),sqtl:Ul(s[4],"singleTissueSqtl")},t.data.ld=function(t){let e=t.ld.map(t=>{let e=t[0].split(",");return{x:e[0],y:e[1],value:t[1],displayValue:t[1].toPrecision(3)}});const i={};return e.forEach(t=>{i[t.x]=!0,i[t.y]=!0}),e.concat(Object.keys(i).map(t=>({x:t,y:t,value:1,displayValue:"1"})))}(s[6]),t.data.qtlMap=[].concat(t.data.locusData.eqtl).concat(t.data.locusData.sqtl),Mu(t),function(t=Fu,e){if(function(t=Fu){t.height=Object.keys(t.panels).reduce((e,i)=>{let n=t.panels[i];return n.yPos=e,e+n.height},0)}(t),t.viz.svg=Iu(t.id,t.width,t.height,{left:0,top:0},void 0),t.viz.bmap=void 0,Hu(t),0==t.data.track.geneModel.length)return void Et("#gene-model-track").append("text").attr("x",0).attr("y",50).attr("fill","red").text(e+" is not included in the QTL analysis.");t.viz.lastTrack=Ou(t),zu(t),function(t){Et(".show-if-success").style("opacity",100);let e=Et("#"+t.infoId),i=t.data.queryGene,n=t.data;e.selectAll("*").remove(),e.append("div").text(`Query Gene: ${i.geneSymbol} (${i.gencodeId}), ${i.description}`),e.append("div").text(`Gene Location: ${i.chromosome}:${i.start} - ${i.end} (${i.strand})`),e.append("div").text("Total eQTLs: "+n.locusData.eqtl.length),e.append("div").text("Total sQTLs: "+n.locusData.sqtl.length)}(t),function(t,e){_u("qtl-violin-div","qtl-violin-dialog","QTL Violin Plot Dialog"),Et("#locus-browser-toolbar").style("opacity",100).style("display","block"),Et("#show-v-id").on("click",()=>{e.panels.qtlMap.showColumnLabel=!e.panels.qtlMap.showColumnLabel,e.panels.qtlMap.showColumnLabel?(Et("#"+e.id).select("svg").attr("height",e.height+80),Et("#show-v-id").text("Hide Variant ID")):(Et("#"+e.id).select("svg").attr("height",e.height),Et("#show-v-id").text("Show Variant ID")),Lu(e)}),Et("#change-qtl-map").on("click",()=>{"barmap"==e.panels.qtlMap.mapType?(e.panels.qtlMap.mapType="bubblemap",Pt(".bar-row").remove(),Et("#change-qtl-map").text("Use Bar Map")):(e.panels.qtlMap.mapType="barmap",Et("#change-qtl-map").text("Use Bubble Map")),function(t){let e=t.viz.bmap,i=e.xScale.domain();if(e.xScale.domain(e.fullXDomain),"barmap"==t.panels.qtlMap.mapType)e.renderBars(e.svg,e.svg.select(".clippedArea"),!1),e.svg.select("#dataMap-bubble-legend").remove(),e.svg.selectAll(".bubble-legend").remove();else{e.renderBubbles(e.svg.select(".clippedArea"),[0,10],!0);let t=Math.floor(e.rScale.domain()[1]);e.drawBubbleLegend(e.svg,"-log10(p-value)",{x:500,y:-60},[t,t/2,t/4,t/8].map(t=>parseInt(t)).reverse(),40,"h")}e.renderWithNewXDomain(e.svg,i,t.panels.qtlMap.mapType);const n=(s=Et("#miniBrowserBrush").node(),r=s.__brush,r?r.dim.output(r.selection):null);var s,r;Et("#miniBrowserBrush").call(t.brush.move,n),Eu(t)}(e)});const i=()=>{let t=e.viz.bmap,i=new Set(t.fullYDomain),n=(()=>{let t=document.getElementsByName("dataType"),e=[];return t.forEach(t=>{t.checked&&e.push(t.value)}),e})(),s=(()=>{let t=document.getElementsByName("tissueSite"),e=[];return t.forEach(t=>{t.checked&&e.push(t.value)}),e})(),r=[];n.forEach(t=>{s.forEach(e=>{let n=`${t}-${e}`;i.has(n)&&r.push(n)})});let a=t.yScale.range()[1],o=r.length*e.panels.qtlMap.rowHeight;e.height=e.height+(o-a),e.panels.qtlMap.showColumnLabel?Et("#"+e.id).select("svg").attr("height",e.height+80):Et("#"+e.id).select("svg").attr("height",e.height),t.yScale.domain(r).range([t.yScale.range()[0],o]),Pu(e)};Et("#modal-close-btn").on("click",i),Et("#modal-filter-btn").on("click",i),Et("#zoom-plus").on("click",()=>{e.genomicWindow=e.genomicWindow<=5e4?5e4:e.genomicWindow/2,Pu(e)}),Et("#zoom-minus").on("click",()=>{e.genomicWindow=e.genomicWindow>=1e6?1e6:2*e.genomicWindow,Pu(e)}),Et("#zoom-reset").on("click",()=>{e.genomicWindow=1e6,Pu(e)}),Nu(e)}(0,t),function(t){Et("#tissue-menu").selectAll("*").remove();let e=new Set(t.viz.bmap.yScale.domain().map(t=>t.replace("eQTL-","").replace("sQTL-","")).filter((t,e,i)=>!t.startsWith("GWAS")&&i.indexOf(t)===e));!function(t,e,i="modal-clear-tissues-btn",n="modal-all-tissues-btn"){Et("#"+e).selectAll("*").remove();let s=document.getElementById(e);t.forEach(t=>{let e=document.createElement("input");e.type="checkbox",e.value=t.tissueSiteDetailAbbr,e.name="tissueSite",e.checked=!0;let i=document.createElement("label");i.innerHTML=`${t.tissueSiteDetail} (${t.tissueSiteDetailAbbr}) `,i.classList.add("tissue-menu-item"),s.appendChild(e),s.appendChild(i),s.appendChild(document.createElement("br"))}),Et("#"+i).on("click",()=>{document.getElementsByName("tissueSite").forEach(t=>{t.checked=!1})}),Et("#"+n).on("click",()=>{document.getElementsByName("tissueSite").forEach(t=>{t.checked=!0})})}(Gl.filter(t=>e.has(t.tissueSiteDetailAbbr)),"tissue-menu")}(t),function(t){_o()("#variantInput").keypress((function(e){if(13==e.keyCode){e.preventDefault(),function(t,e){const i=new Set(t.replace(/\s/g,"").toUpperCase().split(",")),n={};[...i].forEach(t=>{n[t]=!1});const s={};e.viz.bmap.data.filter(t=>{let e=!1;return i.has(t.variantId.toUpperCase())?(e=!0,n[t.variantId.toUpperCase()]=!0):i.has(`${t.chromosome.toUpperCase()}_${t.pos}`)?(e=!0,n[`${t.chromosome.toUpperCase()}_${t.pos}`]=!0):null!==t.snpId&&i.has(t.snpId.toUpperCase())&&(e=!0,n[t.snpId.toUpperCase()]=!0),e}).forEach(t=>{s[t.variantId]={variantId:t.variantId,pos:t.pos,chr:t.chromosome,rsId:t.snpId}});const r=Object.keys(n).filter(t=>0==n[t]);r.length>0&&_o()("#locus-browser-error").text("Variants not found: "+r.join(", "));e.selectedVariants=Object.values(s),Au(e)}(_o()("#variantInput").val(),t)}}))}(t)}(t,e)})})}).catch(i=>{console.error(i),Mu(t),Et("#locus-browser-error").text(e.toUpperCase()+" cannot be rendered."),Et(".show-if-success").style("opacity",0),Et("#locus-browser-toolbar").style("opacity",0)})}(e,t),void 0!==e.callback&&e.callback(t)}function Au(t){const e=t.selectedVariants;void 0!==e&&(Pt(".found-variant").remove(),Pt(".found-variant-2").remove(),t.viz.lastTrack.dom.selectAll(".found-variant").data(e).enter().append("path").attr("d",bo().type(go).size(36)).attr("class","found-variant").attr("transform",e=>`translate(${t.viz.lastTrack.scale(e.pos)}, 25)`).attr("fill","#dcc30c").attr("stroke","white"),t.viz.bmap.svg.selectAll(".found-variant").data(e).enter().append("path").attr("d",bo().type(go)).attr("class","found-variant").attr("transform",e=>`translate(${t.viz.bmap.xScale(e.variantId)+t.viz.bmap.xScale.bandwidth()/2||0}, -20)`).attr("fill",e=>t.viz.bmap.xScale(e.variantId)?"#dcc30c":"white").attr("stroke","white").style("cursor","pointer").on("mouseover",(function(e){t.viz.bmap.tooltip.show(`Variant Id: ${e.variantId} <br> RS ID: ${e.rsId}`)})).on("mouseout",(function(){t.viz.bmap.tooltip.hide()})),t.viz.bmap.svg.selectAll(".found-variant-2").data(e).enter().append("path").attr("d",bo().type(go)).attr("class","found-variant-2").attr("transform",e=>`translate(${t.viz.bmap.xScale(e.variantId)+t.viz.bmap.xScale.bandwidth()/2||0}, ${t.viz.bmap.yScale.range()[1]})`).attr("fill",e=>t.viz.bmap.xScale(e.variantId)?"#dcc30c":"white").attr("stroke","white").style("cursor","pointer").on("mouseover",(function(e){t.viz.bmap.tooltip.show(`Variant Id: ${e.variantId} <br> RS ID: ${e.rsId}`)})).on("mouseout",(function(){t.viz.bmap.tooltip.hide()})))}function Mu(t){Et("#"+t.spinnerId).style("opacity",0)}function Iu(t,e,i,n,s){return Ol(t),void 0===s&&(s=t+"-svg"),void 0===n&&(n={top:0,left:0}),Et("#"+t).append("svg").attr("width",e).attr("height",i).attr("id",s).append("g").attr("transform",`translate(${n.left}, ${n.top})`)}function Eu(t){const e=e=>{_o()("#qtl-violin-dialog").dialog("open"),xu("qtl-violin-dialog",e,t.urls)};t.viz.bmap.svg.selectAll(".data-bar").on("click",e),t.viz.bmap.svg.selectAll(".map-bubble").on("click",e)}function Pu(t){Object.keys(t.panels).forEach(e=>{let i=t.panels[e];Et("#"+i.id).remove()}),Et("#"+t.ld.id).selectAll("*").remove(),Nu(t),Hu(t),t.viz.lastTrack=Ou(t),zu(t)}function Nu(t){Et("#zoom-size").text(`Current window: ${(2*t.genomicWindow/1e3).toLocaleString()} kb`)}function Hu(t=Fu){let e=function(t=Fu){t.data.genes=t.data.genes.sort((t,e)=>t.tss-e.tss);let e=t.data.genes.map(t=>t.geneSymbol),i=t.panels.geneMap,n=t.viz.svg,s=i.width-(i.margin.left+i.margin.right);if(0==s)throw"The inner height and width of the GWAS heatmap panel must be positive values. Check the height and margin configuration of this panel";let r=n.append("g").attr("id",i.id).attr("transform",`translate(${i.margin.left}, ${i.margin.top})`),a=Ie().domain(e).range([0,s]).padding(.05),o=t.data.queryGene;return r.selectAll(".exp-map-xlabel").data(e).enter().append("text").attr("class","exp-map-xlabel").attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").style("font-size",t=>t==o.geneSymbol?14:a.bandwidth()>10?10:a.bandwidth()).attr("transform",t=>`translate(${a(t)+5}, 0) rotate(90)`).text(t=>t),r.selectAll(".exp-map-xlabel").attr("fill",t=>t==o.geneSymbol?"red":"#cccccc").style("cursor","pointer").on("mouseover",(function(t){Et(this).attr("fill",t==o.geneSymbol?"red":"#000000"),Pt("."+t).style("stroke","#000000")})).on("mouseout",(function(t){let e=t==o.geneSymbol?"red":"#cccccc";Et(this).attr("fill",e),Pt("."+t).style("stroke",e)})).on("click",e=>{Et("#"+t.infoId).selectAll("*").remove(),Et("#"+t.id).selectAll("*").remove(),Et("#"+t.ld.id).selectAll("*").remove(),_o()("#geneInput").val(e),_o()("#variantInput").val(""),Tu(e,t)}),a}(t);!function(t,e,i){let n=t.panels.geneMap,s=t.panels.tssTrack,r=n.margin.left-s.margin.left+2,a=s.margin.top,o=s.height-(s.margin.top+s.margin.bottom),l=t.data.queryGene;const u=t=>t.geneSymbol==l.geneSymbol?"red":"#cccccc",h=(t,e)=>t.geneSymbol==l.geneSymbol?2:(e+1)%10==0?1:.5;let c=function(t,e){let i=t.filter(t=>((t,e,i)=>{const n=e.tss-i,s=e.tss+i;return t.chromosome==e.chromosome&&t.tss>=n&&t.tss<=s&&("protein coding"==t.type||"lincRNA"==t.type)})(t,e.data.queryGene,e.genomicWindow));return i.sort((t,e)=>parseInt(t.tss-parseInt(e.tss))),i}(t.data.track.tss,t);0==c.length&&console.error("Data error: now genes in window "+t.data.track.tss);i.svg.selectAll(".connect").remove(),i.svg.selectAll(".connect").data(c).enter().append("line").attr("class",t=>"connect "+t.geneSymbol).attr("x1",t=>e(t.geneSymbol)+r).attr("x2",t=>i.scale(t.tss)).attr("y1",o/2-a).attr("y2",o/2).style("stroke",u).style("stroke-width",h),i.svg.selectAll(".connect2").data(c).enter().append("line").attr("class",t=>"connect2 "+t.geneSymbol).attr("x1",t=>e(t.geneSymbol)+r).attr("x2",t=>e(t.geneSymbol)+r).attr("y1",o/2-a).attr("y2",o/2-n.margin.bottom-s.margin.top).attr("stroke",u).attr("stroke-width",h)}(t,e,function(t=Fu){let e=t.panels.tssTrack;const i=qu(t,e,t.data.track.tss,!1);let n=t.panels.geneModelTrack;return qu(t,n,t.data.track.geneModel,!0),i}(t))}function zu(t=Fu){let e=function(t=Fu){let e=t.panels.qtlMap,i=t.data.qtlMap,n=e.width-(e.margin.left+e.margin.right),s=[...new Set(i.map(t=>t.y))];t.height=t.height+(()=>{let t=e.height-(e.margin.top+e.margin.bottom),i=s.length*e.rowHeight;return e.height=i+(e.margin.top+e.margin.bottom),i-t})(),t.panels.qtlMap.showColumnLabel?Et("#"+t.id).select("svg").attr("height",t.height+80):Et(`#${t.id}-svg`).attr("height",t.height);t.viz.svg.select("#"+e.id).remove();let r=new zl(i,e.colorScheme);return r.svg=t.viz.svg.append("g").attr("id",e.id).attr("class","focus").attr("transform",`translate(${e.margin.left}, ${e.margin.top+e.yPos})`),r.setScales({w:n,h:s.length*e.rowHeight,top:0,left:0},void 0,s),r.addTooltip("locus-browser","locus-browser"),r.fullXDomain=r.xScale.domain(),r.fullYDomain=r.yScale.domain(),function(t,e){let i="+"==t.strand?t.start:t.end,n="+"==t.strand?t.end:t.start,s=e.fullXDomain;const r=t=>s.filter((e,i)=>{let n=parseFloat(e.split("_")[1]);if(n===t)return!0;if(void 0===s[i+1])return!1;let r=parseFloat(s[i+1].split("_")[1])||void 0;return(n-t)*(r-t)<0});let a=r(i),o=r(n);e.tss=a[0],e.tes=o[0]}(t.data.queryGene,r),r}(t);void 0!==t.viz.bmap&&(e.yScale=t.viz.bmap.yScale);let i={w:Math.abs(e.xScale.range()[1]-e.xScale.range()[0]),h:Math.abs(e.yScale.range()[1]-e.yScale.range()[0]),top:0,left:0};if(e.drawSvg(e.svg,i,t.panels.qtlMap.mapType,!1,wu,!0),e.drawColorLegend(e.svg,"Normalized Effect Size (NES)",{x:0,y:-60},{w:30,h:5},[-1,-.5,-.2,0,.2,.5,1],"h"),"bubblemap"==t.panels.qtlMap.mapType){let t=Math.floor(e.rScale.domain()[1]);e.drawBubbleLegend(e.svg,"-log10(p-value)",{x:500,y:-60},[t,t/2,t/4,t/8].map(t=>parseInt(t)).reverse(),40,"h")}t.viz.bmap=e,Eu(t),t.viz.ldMap=function(t,e){let i=t.ld,n=t.data.ld,s=new Ll(n,i.cutoff,!1,void 0,i.colorScheme,[0,1]);s.addTooltip("locus-browser");let r=Et("#"+i.id).append("canvas").attr("id",i.id+"-ld-canvas").attr("width",i.width).attr("height",i.width).style("position","absolute");r.node().getContext("2d").translate(i.margin.left,i.margin.top);let a=Iu(i.id,i.width,i.width,{top:i.margin.top,left:i.margin.left});a.attr("class","ld").attr("id","ldG");const o=Et(a.node().parentNode);s.drawColorLegend(o,{x:i.margin.left,y:100},10,"LD");const l={w:i.width-(i.margin.left+i.margin.right),top:0,left:0};return s.draw(r,a,l,[0,1],!1,void 0,e,e),s.saveSvgObj(a),s.saveCanvasObj(r),s.saveConfig(l),s}(t,e.xScale.domain()),Gu(e),function(t){let e=t.data.queryGene,i=t.viz.bmap,n=t.viz.ldMap,s=t.viz.lastTrack;const r=t.panels.qtlMap,a=t.panels.sqtlTrack;let o={w:t.width/10,h:20};const l=Ro.renderAxis(s.dom,s.scale,a.height+30,!0,(e,s,o,l)=>{let u=i.fullXDomain.filter(t=>{let e=parseInt(t.split("_")[1]);return e>=o&&e<=l});i.renderWithNewXDomain(i.svg,u,r.mapType),Gu(i),function(t,e){t.svg.selectAll(".bubble-map-ylabel").remove(),t.svg.select(".bar-map-y-axis").remove(),t.svg.select(".custom-map-y-axis").selectAll("*").remove(),t.svg.select(".custom-map-y-axis").remove();let i=jt(t.yScale).tickSize(0),n=t.svg.append("g").attr("class","custom-map-y-axis").attr("transform","translate(-2, 0)").call(i),s={};t.yScale.domain().forEach(t=>{let e=t.split("-")[0];s.hasOwnProperty(e)||(s[e]=0),s[e]++});const r=Object.keys(s).sort((t,e)=>t-e);t.svg.selectAll(".type-bar").remove();let a=t.svg.selectAll(".type-bar").data(r).enter().append("g").attr("class","type-bar");a.append("rect").attr("x",0).attr("y",2).attr("class",t=>t).attr("stroke","white").attr("width",10).attr("height",e=>t.yScale.step()*s[e]).attr("transform",(e,i)=>`translate(-100, ${0==i?0:t.yScale.step()*s[r[i-1]]})`),a.append("line").attr("x1",-100).attr("x2",100).attr("y1",2).attr("y2",2).attr("stroke-width",1).attr("class",t=>t).attr("transform",(e,i)=>`translate(-100, ${0==i?0:t.yScale.step()*s[r[i-1]]})`),a.append("text").attr("x",0).attr("y",2).attr("class",t=>t).text(t=>null==s[t]?"":t).style("text-anchor","end").style("font-size",12).attr("transform",(e,i)=>`translate(-105, ${0==i?15:t.yScale.step()*s[r[i-1]]+15})`),n.select("path").remove(),n.selectAll("text").attr("class","custom-map-y-label").attr("fill","#111111").style("cursor","pointer").text(t=>{let i=t.split("-")[0];const n=t.replace(i+"-","");let s=0;return e.hasOwnProperty(n)||console.error("Unrecognized "+n),e[n].hasOwnProperty("rnaSeqAndGenotypeSampleCount")&&(s=e[n].rnaSeqAndGenotypeSampleCount),`${n} (${s})`}).on("mouseover",(function(i){let n=i.split("-")[0];const s=i.replace(n+"-","");t.tooltip.show(""+e[s].tissueSiteDetail),Et(this).style("font-weight","bold")})).on("mouseout",(function(){t.tooltip.hide(),Et(this).style("font-weight","normal")})),t.svg.selectAll(".bar-row").select("line").style("stroke",(function(){let t=Et(this).attr("class");return"GWAS"==t?"#651b23":"sQTL"==t?"#0a3e7b":"#bdbdbd"})).style("stroke-width",.5)}(i,t.data.tissueMap),Lu(t),function(t){const e=t.viz.bmap;e.svg.select("#qtl-indies").selectAll("*").remove(),e.svg.select("#qtl-indies").remove();let i=e.svg.append("g").attr("id","qtl-indies");const n=t=>{let n=i.append("g").attr("x",0).attr("y",0).style("cursor","pointer").attr("transform",`translate(${e.xScale(t.x)+e.xScale.bandwidth()/2}, ${e.yScale(t.y)+e.yScale.step()-10})`);n.append("circle").attr("cx",0).attr("cy",0).attr("r",5).attr("stroke","black").attr("fill","none"),n.append("text").attr("x",-3).attr("y",3).text(t.rank).style("fill","blank").style("font-size","10px").style("font-weight","bold"),n.on("mouseover",(function(){e.tooltip.show(`Independent eQTL<br/> ${t.tissueId} <br/> ${t.variantId} <br/> rank: ${t.rank}`),Et(this).select("circle").style("stroke-width",2)})),n.on("mouseout",(function(){e.tooltip.hide(),Et(this).select("circle").style("stroke-width",1)}))};t.data.indies.eqtl.forEach(t=>{e.xScale(t.x)&&e.yScale(t.y)&&n(t)})}(t),Au(t),n.svg.selectAll("*").remove(),n.redraw(u,u,i.xScale.range()),Pt(".brushLine").remove(),Et(".brush").append("line").classed("brushLine",!0).attr("x1",e).attr("x2",i.xScale.range()[0]+r.margin.left-a.margin.left).attr("y1",5).attr("y2",t.panels.qtlMap.margin.top-20).style("stroke-width",1).style("stroke","#ababab"),Et(".brush").append("line").classed("brushLine",!0).attr("x1",s).attr("x2",i.xScale.range()[1]+r.margin.left-a.margin.left).attr("y1",5).attr("y2",t.panels.qtlMap.margin.top-20).style("stroke-width",1).style("stroke","#ababab")},o,e.tss);t.brush=l}(t)}function Lu(t){let e=t.viz.bmap;e.svg.selectAll(".bubble-map-xlabel").remove(),e.svg.selectAll(".bar-map-x-axis").remove(),e.svg.selectAll(".custom-map-x-axis").remove();let i=Wt(e.xScale).tickSize(0),n=e.yScale.range()[1]+2*e.yScale.step(),s=e.svg.append("g").attr("class","custom-map-x-axis").attr("transform",`translate(${-e.xScale.bandwidth()/2}, ${n})`).call(i);if(s.select("path").remove(),t.panels.qtlMap.showColumnLabel){let i={};void 0!==t.selectedVariants&&t.selectedVariants.forEach(t=>{i[t.variantId]=t}),s.selectAll("text").attr("y",-e.xScale.bandwidth()/2).attr("x",0).attr("class",(t,e)=>"custom-map-x-label x"+e).attr("dy",".35em").attr("transform","rotate(90)").style("fill",t=>i.hasOwnProperty(t)?"red":"black").style("text-anchor","start").text(t=>(t=t.replace("chr","")).split("_").splice(0,2).join("_"))}else s.selectAll("text").remove();s.selectAll(".tick").append("rect").attr("class","anno-box").attr("x",0).attr("y",2*-e.yScale.bandwidth()).attr("rx",2).attr("width",e.xScale.bandwidth()).attr("height",.75*e.yScale.bandwidth()).style("fill",e=>{if(void 0===t.data.functionAnnotationDict)return"none";let i=t.data.functionAnnotationDict[e];return void 0===i?"#ffffff":1==i.length?Du[i[0]]:"black"}).style("opacity",.5).style("stroke","#eeeeee").style("stoke-width",1).on("mouseover",(function(i){let n=t.data.functionAnnotationDict[i];void 0!==n&&(e.tooltip.show(`Variant: ${i} <br/> Annotations: ${n.join(", ").replace(/_d/g,"")}`),Et(this).style("stroke","#f53956"))})).on("mouseout",(function(){e.tooltip.hide(),Et(this).style("stroke","#eeeeee")})),s.append("text").attr("class","anno-row-label").attr("x",-5).attr("y",2*-e.yScale.bandwidth()+e.yScale.bandwidth()/2).style("fill","black").style("text-anchor","end").text("Functional Annotations")}function Ou(t=Fu,e=30){let i=t.panels.eqtlTrack,n=t.panels.sqtlTrack;return qu(t,i,t.data.track.eqtl,!1,!0,e),qu(t,n,t.data.track.sqtl,!1,!0,e)}function qu(t=Fu.panels,e=Fu.panels.tssTrack,i,n,s=!1,r){let a=t.data.queryGene.tss,o=t.viz.svg,l=t.genomicWindow,u=e.width-(e.margin.left+e.margin.right),h=e.height-(e.margin.top+e.margin.bottom),c=o.append("g").attr("id",e.id).attr("transform",`translate(${e.margin.left}, ${e.margin.top+e.yPos})`),d=new Ro(i,a,l);return d.render(c,u,h,n,e.label,e.color.background,e.color.feature,s,r),d.svg=c,d}function Gu(t){let e=t.svg;if(Et("#siteMarkers").empty()){let i=e.append("g").attr("id","siteMarkers");if(t.tss&&t.xScale(t.tss)){let e=i.append("g").attr("id","tssMarker").attr("transform",()=>`translate(${t.xScale(t.tss)+t.xScale.bandwidth()}, -10)`);e.append("line").attr("x1",0).attr("x2",0).attr("y1",0).attr("y2",t.yScale.range()[1]).style("stroke","#94a8b8").style("stroke-width",2),e.append("text").text("TSS").attr("x",-t.xScale.bandwidth()/2).attr("y",-2).attr("text-anchor","center").style("font-size","12px")}if(t.tes&&t.xScale(t.tes)){let e=i.append("g").attr("id","tesMarker").attr("transform",()=>`translate(${t.xScale(t.tes)+t.xScale.bandwidth()}, -10)`);e.append("line").attr("x1",0).attr("x2",0).attr("y1",0).attr("y2",t.yScale.range()[1]).style("stroke","#748797").style("stroke-width",2),e.append("text").text("TES").attr("x",-t.xScale.bandwidth()/2).attr("y",-2).attr("text-anchor","center").style("font-size","12px")}}else t.xScale(t.tss)?Et("#tssMarker").attr("transform",()=>`translate(${t.xScale(t.tss)+t.xScale.bandwidth()}, -10)`).attr("visibility","visible"):Et("#tssMarker").attr("visibility","hidden"),t.xScale(t.tes)?Et("#tesMarker").attr("transform",()=>`translate(${t.xScale(t.tes)+t.xScale.bandwidth()}, -10)`).attr("visibility","visible"):Et("#tesMarker").attr("visibility","hidden")}const Ru=window.innerWidth,Fu={id:"locus-browser",ldId:"ld-browser",width:Ru,height:null,genomicWindow:1e6,data:Su,urls:ku,panels:{geneMap:{id:"gene-map",data:null,useLog:!0,logBase:null,margin:{top:0,right:100,bottom:0,left:80},width:Ru,height:100,colorScheme:"YlGnBu",cornerRadius:2,columnLabel:{angle:90,adjust:10},rowLabel:{width:100}},tssTrack:{id:"tss-track",label:"TSS location",data:null,yPos:null,margin:{top:50,right:50,bottom:0,left:80},width:Ru,height:70,color:{background:"#ffffff",feature:"#ababab"}},geneModelTrack:{id:"gene-model-track",label:"Gene model",yPos:null,margin:{top:0,right:50,bottom:10,left:80},width:Ru,height:30,color:{background:"#ffffff",feature:"#910807"}},eqtlTrack:{id:"eqtl-track",label:"eQTL summary",data:null,yPos:null,margin:{top:0,right:50,bottom:0,left:80},width:Ru,height:20,color:{background:"#ffffff",feature:"#ababab"}},sqtlTrack:{id:"sqtl-track",label:"sQTL summary",data:null,yPos:null,margin:{top:0,right:50,bottom:0,left:80},width:Ru,height:20,color:{background:"#ffffff",feature:"#ababab"}},qtlMap:{id:"qtl-map",width:Ru,data:null,yPos:null,margin:{top:100,right:100,bottom:120,left:200},height:500,colorScheme:"RdBu",colorScaleDomain:[-1,1],useLog:!1,logBase:null,label:{column:{show:!0,angle:90,adjust:10,location:"bottom",textAlign:"left"},row:{show:!0,width:150,angle:0,adjust:0,location:"left",textAlign:"right"}}}},ld:{id:"ld-browser",data:[],cutoff:.1,width:Ru,margin:{top:10,right:100,bottom:0,left:200},colorScheme:"Greys"}}},8:function(t,e,i){(function(i){var n,s,r;s=[],void 0===(r="function"==typeof(n=function(){"use strict";function e(t,e,i){var n=new XMLHttpRequest;n.open("GET",t),n.responseType="blob",n.onload=function(){a(n.response,e,i)},n.onerror=function(){console.error("could not download file")},n.send()}function n(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function s(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(i){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var r="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof i&&i.global===i?i:void 0,a=r.saveAs||("object"!=typeof window||window!==r?function(){}:"download"in HTMLAnchorElement.prototype?function(t,i,a){var o=r.URL||r.webkitURL,l=document.createElement("a");i=i||t.name||"download",l.download=i,l.rel="noopener","string"==typeof t?(l.href=t,l.origin===location.origin?s(l):n(l.href)?e(t,i,a):s(l,l.target="_blank")):(l.href=o.createObjectURL(t),setTimeout((function(){o.revokeObjectURL(l.href)}),4e4),setTimeout((function(){s(l)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,i,r){if(i=i||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,r),i);else if(n(t))e(t,i,r);else{var a=document.createElement("a");a.href=t,a.target="_blank",setTimeout((function(){s(a)}))}}:function(t,i,n,s){if((s=s||open("","_blank"))&&(s.document.title=s.document.body.innerText="downloading..."),"string"==typeof t)return e(t,i,n);var a="application/octet-stream"===t.type,o=/constructor/i.test(r.HTMLElement)||r.safari,l=/CriOS\/[\d]+/.test(navigator.userAgent);if((l||a&&o)&&"object"==typeof FileReader){var u=new FileReader;u.onloadend=function(){var t=u.result;t=l?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),s?s.location.href=t:location=t,s=null},u.readAsDataURL(t)}else{var h=r.URL||r.webkitURL,c=h.createObjectURL(t);s?s.location=c:location.href=c,s=null,setTimeout((function(){h.revokeObjectURL(c)}),4e4)}});r.saveAs=a.saveAs=a,t.exports=a})?n.apply(e,s):n)||(t.exports=r)}).call(this,i(23))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,