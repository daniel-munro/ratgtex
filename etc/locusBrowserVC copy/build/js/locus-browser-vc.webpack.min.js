var LocusBrowserVC=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=17)}({0:function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var a=[],o=Object.getPrototypeOf,s=a.slice,l=a.flat?function(e){return a.flat.call(e)}:function(e){return a.concat.apply([],e)},u=a.push,c=a.indexOf,f={},d=f.toString,h=f.hasOwnProperty,p=h.toString,g=p.call(Object),m={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},b=n.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function S(e,t,n){var r,i,a=(n=n||b).createElement("script");if(a.text=e,t)for(r in x)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&a.setAttribute(r,i);n.head.appendChild(a).parentNode.removeChild(a)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[d.call(e)]||"object":typeof e}var _=function(e,t){return new _.fn.init(e,t)};function C(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}_.fn=_.prototype={jquery:"3.6.0",constructor:_,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=_.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return _.each(this,e)},map:function(e){return this.pushStack(_.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(_.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(_.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:a.sort,splice:a.splice},_.extend=_.fn.extend=function(){var e,t,n,r,i,a,o=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[s]||{},s++),"object"==typeof o||v(o)||(o={}),s===l&&(o=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&o!==r&&(u&&r&&(_.isPlainObject(r)||(i=Array.isArray(r)))?(n=o[t],a=i&&!Array.isArray(n)?[]:i||_.isPlainObject(n)?n:{},i=!1,o[t]=_.extend(u,a,r)):void 0!==r&&(o[t]=r));return o},_.extend({expando:"jQuery"+("3.6.0"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=o(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&p.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){S(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?_.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,a=e.length,o=!n;i<a;i++)!t(e[i],i)!==o&&r.push(e[i]);return r},map:function(e,t,n){var r,i,a=0,o=[];if(C(e))for(r=e.length;a<r;a++)null!=(i=t(e[a],a,n))&&o.push(i);else for(a in e)null!=(i=t(e[a],a,n))&&o.push(i);return l(o)},guid:1,support:m}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=a[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){f["[object "+t+"]"]=t.toLowerCase()}));var A=
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
function(e){var t,n,r,i,a,o,s,l,u,c,f,d,h,p,g,m,v,y,b,x="sizzle"+1*new Date,S=e.document,w=0,_=0,C=le(),A=le(),T=le(),k=le(),E=function(e,t){return e===t&&(f=!0),0},M={}.hasOwnProperty,D=[],I=D.pop,G=D.push,N=D.push,q=D.slice,L=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},B="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",H="(?:\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",P="\\["+R+"*("+H+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+R+"*\\]",j=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",$=new RegExp(R+"+","g"),F=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),O=new RegExp("^"+R+"*,"+R+"*"),U=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),V=new RegExp(R+"|>"),z=new RegExp(j),W=new RegExp("^"+H+"$"),Y={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+j),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+B+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=function(){d()},oe=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{N.apply(D=q.call(S.childNodes),S.childNodes),D[S.childNodes.length].nodeType}catch(e){N={apply:D.length?function(e,t){G.apply(e,q.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,i){var a,s,u,c,f,p,v,y=t&&t.ownerDocument,S=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==S&&9!==S&&11!==S)return r;if(!i&&(d(t),t=t||h,g)){if(11!==S&&(f=J.exec(e)))if(a=f[1]){if(9===S){if(!(u=t.getElementById(a)))return r;if(u.id===a)return r.push(u),r}else if(y&&(u=y.getElementById(a))&&b(t,u)&&u.id===a)return r.push(u),r}else{if(f[2])return N.apply(r,t.getElementsByTagName(e)),r;if((a=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return N.apply(r,t.getElementsByClassName(a)),r}if(n.qsa&&!k[e+" "]&&(!m||!m.test(e))&&(1!==S||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===S&&(V.test(e)||U.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(re,ie):t.setAttribute("id",c=x)),s=(p=o(e)).length;s--;)p[s]=(c?"#"+c:":scope")+" "+be(p[s]);v=p.join(",")}try{return N.apply(r,y.querySelectorAll(v)),r}catch(t){k(e,!0)}finally{c===x&&t.removeAttribute("id")}}}return l(e.replace(F,"$1"),t,r,i)}function le(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ue(e){return e[x]=!0,e}function ce(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ue((function(t){return t=+t,ue((function(n,r){for(var i,a=e([],n.length,t),o=a.length;o--;)n[i=a[o]]&&(n[i]=!(r[i]=n[i]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},a=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!X.test(t||n&&n.nodeName||"HTML")},d=se.setDocument=function(e){var t,i,o=e?e.ownerDocument||e:S;return o!=h&&9===o.nodeType&&o.documentElement?(p=(h=o).documentElement,g=!a(h),S!=h&&(i=h.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ae,!1):i.attachEvent&&i.attachEvent("onunload",ae)),n.scope=ce((function(e){return p.appendChild(e).appendChild(h.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Z.test(h.getElementsByClassName),n.getById=ce((function(e){return p.appendChild(e).id=x,!h.getElementsByName||!h.getElementsByName(x).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,a=t.getElementById(e);if(a){if((n=a.getAttributeNode("id"))&&n.value===e)return[a];for(i=t.getElementsByName(e),r=0;a=i[r++];)if((n=a.getAttributeNode("id"))&&n.value===e)return[a]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,a=t.getElementsByTagName(e);if("*"===e){for(;n=a[i++];)1===n.nodeType&&r.push(n);return r}return a},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=Z.test(h.querySelectorAll))&&(ce((function(e){var t;p.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+R+"*(?:value|"+B+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),(t=h.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+R+"*name"+R+"*="+R+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+R+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=Z.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",j)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=Z.test(p.compareDocumentPosition),b=t||Z.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},E=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==h||e.ownerDocument==S&&b(S,e)?-1:t==h||t.ownerDocument==S&&b(S,t)?1:c?L(c,e)-L(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,a=t.parentNode,o=[e],s=[t];if(!i||!a)return e==h?-1:t==h?1:i?-1:a?1:c?L(c,e)-L(c,t):0;if(i===a)return de(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;o[r]===s[r];)r++;return r?de(o[r],s[r]):o[r]==S?-1:s[r]==S?1:0},h):h},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(d(e),n.matchesSelector&&g&&!k[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){k(t,!0)}return se(t,h,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=h&&d(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=h&&d(e);var i=r.attrHandle[t.toLowerCase()],a=i&&M.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==a?a:n.attributes||!g?e.getAttribute(t):(a=e.getAttributeNode(t))&&a.specified?a.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],i=0,a=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(E),f){for(;t=e[a++];)t===e[a]&&(i=r.push(a));for(;i--;)e.splice(r[i],1)}return c=null,e},i=se.getText=function(e){var t,n="",r=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ue,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&C(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=se.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace($," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var a="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,f,d,h,p,g=a!==o?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(m){if(a){for(;g;){for(d=t;d=d[g];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;p=g="only"===e&&!p&&"nextSibling"}return!0}if(p=[o?m.firstChild:m.lastChild],o&&y){for(b=(h=(u=(c=(f=(d=m)[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===w&&u[1])&&u[2],d=h&&m.childNodes[h];d=++h&&d&&d[g]||(b=h=0)||p.pop();)if(1===d.nodeType&&++b&&d===t){c[e]=[w,h,b];break}}else if(y&&(b=h=(u=(c=(f=(d=t)[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===w&&u[1]),!1===b)for(;(d=++h&&d&&d[g]||(b=h=0)||p.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(y&&((c=(f=d[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[w,b]),d!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[x]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var r,a=i(e,t),o=a.length;o--;)e[r=L(e,a[o])]=!(n[r]=a[o])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ue((function(e){var t=[],n=[],r=s(e.replace(F,"$1"));return r[x]?ue((function(e,t,n,i){for(var a,o=r(e,null,i,[]),s=e.length;s--;)(a=o[s])&&(e[s]=!(t[s]=a))})):function(e,i,a){return t[0]=e,r(t,null,a,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return se(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ue((function(e){return W.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ye(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function xe(e,t,n){var r=t.dir,i=t.next,a=i||r,o=n&&"parentNode"===a,s=_++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||o)return e(t,n,i);return!1}:function(t,n,l){var u,c,f,d=[w,s];if(l){for(;t=t[r];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||o)if(c=(f=t[x]||(t[x]={}))[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=c[a])&&u[0]===w&&u[1]===s)return d[2]=u[2];if(c[a]=d,d[2]=e(t,n,l))return!0}return!1}}function Se(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function we(e,t,n,r,i){for(var a,o=[],s=0,l=e.length,u=null!=t;s<l;s++)(a=e[s])&&(n&&!n(a,r,i)||(o.push(a),u&&t.push(s)));return o}function _e(e,t,n,r,i,a){return r&&!r[x]&&(r=_e(r)),i&&!i[x]&&(i=_e(i,a)),ue((function(a,o,s,l){var u,c,f,d=[],h=[],p=o.length,g=a||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!a&&t?g:we(g,d,e,s,l),v=n?i||(a?e:p||r)?[]:o:m;if(n&&n(m,v,s,l),r)for(u=we(v,h),r(u,[],s,l),c=u.length;c--;)(f=u[c])&&(v[h[c]]=!(m[h[c]]=f));if(a){if(i||e){if(i){for(u=[],c=v.length;c--;)(f=v[c])&&u.push(m[c]=f);i(null,v=[],u,l)}for(c=v.length;c--;)(f=v[c])&&(u=i?L(a,f):d[c])>-1&&(a[u]=!(o[u]=f))}}else v=we(v===o?v.splice(p,v.length):v),i?i(null,o,v,l):N.apply(o,v)}))}function Ce(e){for(var t,n,i,a=e.length,o=r.relative[e[0].type],s=o||r.relative[" "],l=o?1:0,c=xe((function(e){return e===t}),s,!0),f=xe((function(e){return L(t,e)>-1}),s,!0),d=[function(e,n,r){var i=!o&&(r||n!==u)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,i}];l<a;l++)if(n=r.relative[e[l].type])d=[xe(Se(d),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[x]){for(i=++l;i<a&&!r.relative[e[i].type];i++);return _e(l>1&&Se(d),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(F,"$1"),n,l<i&&Ce(e.slice(l,i)),i<a&&Ce(e=e.slice(i)),i<a&&be(e))}d.push(n)}return Se(d)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,o=se.tokenize=function(e,t){var n,i,a,o,s,l,u,c=A[e+" "];if(c)return t?0:c.slice(0);for(s=e,l=[],u=r.preFilter;s;){for(o in n&&!(i=O.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(a=[])),n=!1,(i=U.exec(s))&&(n=i.shift(),a.push({value:n,type:i[0].replace(F," ")}),s=s.slice(n.length)),r.filter)!(i=Y[o].exec(s))||u[o]&&!(i=u[o](i))||(n=i.shift(),a.push({value:n,type:o,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):A(e,l).slice(0)},s=se.compile=function(e,t){var n,i=[],a=[],s=T[e+" "];if(!s){for(t||(t=o(e)),n=t.length;n--;)(s=Ce(t[n]))[x]?i.push(s):a.push(s);(s=T(e,function(e,t){var n=t.length>0,i=e.length>0,a=function(a,o,s,l,c){var f,p,m,v=0,y="0",b=a&&[],x=[],S=u,_=a||i&&r.find.TAG("*",c),C=w+=null==S?1:Math.random()||.1,A=_.length;for(c&&(u=o==h||o||c);y!==A&&null!=(f=_[y]);y++){if(i&&f){for(p=0,o||f.ownerDocument==h||(d(f),s=!g);m=e[p++];)if(m(f,o||h,s)){l.push(f);break}c&&(w=C)}n&&((f=!m&&f)&&v--,a&&b.push(f))}if(v+=y,n&&y!==v){for(p=0;m=t[p++];)m(b,x,o,s);if(a){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=I.call(l));x=we(x)}N.apply(l,x),c&&!a&&x.length>0&&v+t.length>1&&se.uniqueSort(l)}return c&&(w=C,u=S),b};return n?ue(a):a}(a,i))).selector=e}return s},l=se.select=function(e,t,n,i){var a,l,u,c,f,d="function"==typeof e&&e,h=!i&&o(e=d.selector||e);if(n=n||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&g&&r.relative[l[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(a=Y.needsContext.test(e)?0:l.length;a--&&(u=l[a],!r.relative[c=u.type]);)if((f=r.find[c])&&(i=f(u.matches[0].replace(te,ne),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(a,1),!(e=i.length&&be(l)))return N.apply(n,i),n;break}}return(d||s(e,h))(i,t,!g,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=x.split("").sort(E).join("")===x,n.detectDuplicates=!!f,d(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||fe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||fe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||fe(B,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(n);_.find=A,_.expr=A.selectors,_.expr[":"]=_.expr.pseudos,_.uniqueSort=_.unique=A.uniqueSort,_.text=A.getText,_.isXMLDoc=A.isXML,_.contains=A.contains,_.escapeSelector=A.escape;var T=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&_(e).is(n))break;r.push(e)}return r},k=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},E=_.expr.match.needsContext;function M(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(e,t,n){return v(t)?_.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?_.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?_.grep(e,(function(e){return c.call(t,e)>-1!==n})):_.filter(t,e,n)}_.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?_.find.matchesSelector(r,e)?[r]:[]:_.find.matches(e,_.grep(t,(function(e){return 1===e.nodeType})))},_.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(_(e).filter((function(){for(t=0;t<r;t++)if(_.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)_.find(e,i[t],n);return r>1?_.uniqueSort(n):n},filter:function(e){return this.pushStack(I(this,e||[],!1))},not:function(e){return this.pushStack(I(this,e||[],!0))},is:function(e){return!!I(this,"string"==typeof e&&E.test(e)?_(e):e||[],!1).length}});var G,N=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(_.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||G,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:N.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof _?t[0]:t,_.merge(this,_.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),D.test(r[1])&&_.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=b.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(_):_.makeArray(e,this)}).prototype=_.fn,G=_(b);var q=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function B(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}_.fn.extend({has:function(e){var t=_(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(_.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,a=[],o="string"!=typeof e&&_(e);if(!E.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&_.find.matchesSelector(n,e))){a.push(n);break}return this.pushStack(a.length>1?_.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?c.call(_(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),_.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return B(e,"nextSibling")},prev:function(e){return B(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return null!=e.contentDocument&&o(e.contentDocument)?e.contentDocument:(M(e,"template")&&(e=e.content||e),_.merge([],e.childNodes))}},(function(e,t){_.fn[e]=function(n,r){var i=_.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=_.filter(r,i)),this.length>1&&(L[e]||_.uniqueSort(i),q.test(e)&&i.reverse()),this.pushStack(i)}}));var R=/[^\x20\t\r\n\f]+/g;function H(e){return e}function P(e){throw e}function j(e,t,n,r){var i;try{e&&v(i=e.promise)?i.call(e).done(t).fail(n):e&&v(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}_.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return _.each(e.match(R)||[],(function(e,n){t[n]=!0})),t}(e):_.extend({},e);var t,n,r,i,a=[],o=[],s=-1,l=function(){for(i=i||e.once,r=t=!0;o.length;s=-1)for(n=o.shift();++s<a.length;)!1===a[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=a.length,n=!1);e.memory||(n=!1),t=!1,i&&(a=n?[]:"")},u={add:function(){return a&&(n&&!t&&(s=a.length-1,o.push(n)),function t(n){_.each(n,(function(n,r){v(r)?e.unique&&u.has(r)||a.push(r):r&&r.length&&"string"!==w(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return _.each(arguments,(function(e,t){for(var n;(n=_.inArray(t,a,n))>-1;)a.splice(n,1),n<=s&&s--})),this},has:function(e){return e?_.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return i=o=[],a=n="",this},disabled:function(){return!a},lock:function(){return i=o=[],n||t||(a=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},_.extend({Deferred:function(e){var t=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return _.Deferred((function(n){_.each(t,(function(t,r){var i=v(e[r[4]])&&e[r[4]];a[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,i){var a=0;function o(e,t,r,i){return function(){var s=this,l=arguments,u=function(){var n,u;if(!(e<a)){if((n=r.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(u)?i?u.call(n,o(a,t,H,i),o(a,t,P,i)):(a++,u.call(n,o(a,t,H,i),o(a,t,P,i),o(a,t,H,t.notifyWith))):(r!==H&&(s=void 0,l=[n]),(i||t.resolveWith)(s,l))}},c=i?u:function(){try{u()}catch(n){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(n,c.stackTrace),e+1>=a&&(r!==P&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?c():(_.Deferred.getStackHook&&(c.stackTrace=_.Deferred.getStackHook()),n.setTimeout(c))}}return _.Deferred((function(n){t[0][3].add(o(0,n,v(i)?i:H,n.notifyWith)),t[1][3].add(o(0,n,v(e)?e:H)),t[2][3].add(o(0,n,v(r)?r:P))})).promise()},promise:function(e){return null!=e?_.extend(e,i):i}},a={};return _.each(t,(function(e,n){var o=n[2],s=n[5];i[n[1]]=o.add,s&&o.add((function(){r=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(n[3].fire),a[n[0]]=function(){return a[n[0]+"With"](this===a?void 0:this,arguments),this},a[n[0]+"With"]=o.fireWith})),i.promise(a),e&&e.call(a,a),a},when:function(e){var t=arguments.length,n=t,r=Array(n),i=s.call(arguments),a=_.Deferred(),o=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?s.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&(j(e,a.done(o(n)).resolve,a.reject,!t),"pending"===a.state()||v(i[n]&&i[n].then)))return a.then();for(;n--;)j(i[n],o(n),a.reject);return a.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&$.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},_.readyException=function(e){n.setTimeout((function(){throw e}))};var F=_.Deferred();function O(){b.removeEventListener("DOMContentLoaded",O),n.removeEventListener("load",O),_.ready()}_.fn.ready=function(e){return F.then(e).catch((function(e){_.readyException(e)})),this},_.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--_.readyWait:_.isReady)||(_.isReady=!0,!0!==e&&--_.readyWait>0||F.resolveWith(b,[_]))}}),_.ready.then=F.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?n.setTimeout(_.ready):(b.addEventListener("DOMContentLoaded",O),n.addEventListener("load",O));var U=function(e,t,n,r,i,a,o){var s=0,l=e.length,u=null==n;if("object"===w(n))for(s in i=!0,n)U(e,t,s,n[s],!0,a,o);else if(void 0!==r&&(i=!0,v(r)||(o=!0),u&&(o?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(_(e),n)})),t))for(;s<l;s++)t(e[s],n,o?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):a},V=/^-ms-/,z=/-([a-z])/g;function W(e,t){return t.toUpperCase()}function Y(e){return e.replace(V,"ms-").replace(z,W)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=_.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[Y(t)]=n;else for(r in t)i[Y(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in r?[t]:t.match(R)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||_.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!_.isEmptyObject(t)}};var K=new Q,Z=new Q,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:J.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}_.extend({hasData:function(e){return Z.hasData(e)||K.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),_.fn.extend({data:function(e,t){var n,r,i,a=this[0],o=a&&a.attributes;if(void 0===e){if(this.length&&(i=Z.get(a),1===a.nodeType&&!K.get(a,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(r=o[n].name).indexOf("data-")&&(r=Y(r.slice(5)),te(a,r,i[r]));K.set(a,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){Z.set(this,e)})):U(this,(function(t){var n;if(a&&void 0===t)return void 0!==(n=Z.get(a,e))?n:void 0!==(n=te(a,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),_.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=K.get(e,t),n&&(!r||Array.isArray(n)?r=K.access(e,t,_.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=_.queue(e,t),r=n.length,i=n.shift(),a=_._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete a.stop,i.call(e,(function(){_.dequeue(e,t)}),a)),!r&&a&&a.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:_.Callbacks("once memory").add((function(){K.remove(e,[t+"queue",n])}))})}}),_.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?_.queue(this[0],e):void 0===t?this:this.each((function(){var n=_.queue(this,e,t);_._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&_.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){_.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=_.Deferred(),a=this,o=this.length,s=function(){--r||i.resolveWith(a,[a])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=K.get(a[o],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ae=b.documentElement,oe=function(e){return _.contains(e.ownerDocument,e)},se={composed:!0};ae.getRootNode&&(oe=function(e){return _.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===_.css(e,"display")};function ue(e,t,n,r){var i,a,o=20,s=r?function(){return r.cur()}:function(){return _.css(e,t,"")},l=s(),u=n&&n[3]||(_.cssNumber[t]?"":"px"),c=e.nodeType&&(_.cssNumber[t]||"px"!==u&&+l)&&re.exec(_.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;o--;)_.style(e,t,c+u),(1-a)*(1-(a=s()/l||.5))<=0&&(o=0),c/=a;c*=2,_.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var ce={};function fe(e){var t,n=e.ownerDocument,r=e.nodeName,i=ce[r];return i||(t=n.body.appendChild(n.createElement(r)),i=_.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),ce[r]=i,i)}function de(e,t){for(var n,r,i=[],a=0,o=e.length;a<o;a++)(r=e[a]).style&&(n=r.style.display,t?("none"===n&&(i[a]=K.get(r,"display")||null,i[a]||(r.style.display="")),""===r.style.display&&le(r)&&(i[a]=fe(r))):"none"!==n&&(i[a]="none",K.set(r,"display",n)));for(a=0;a<o;a++)null!=i[a]&&(e[a].style.display=i[a]);return e}_.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?_(this).show():_(this).hide()}))}});var he,pe,ge=/^(?:checkbox|radio)$/i,me=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;he=b.createDocumentFragment().appendChild(b.createElement("div")),(pe=b.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),he.appendChild(pe),m.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",m.option=!!he.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&M(e,t)?_.merge([e],n):n}function xe(e,t){for(var n=0,r=e.length;n<r;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,m.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var Se=/<|&#?\w+;/;function we(e,t,n,r,i){for(var a,o,s,l,u,c,f=t.createDocumentFragment(),d=[],h=0,p=e.length;h<p;h++)if((a=e[h])||0===a)if("object"===w(a))_.merge(d,a.nodeType?[a]:a);else if(Se.test(a)){for(o=o||f.appendChild(t.createElement("div")),s=(me.exec(a)||["",""])[1].toLowerCase(),l=ye[s]||ye._default,o.innerHTML=l[1]+_.htmlPrefilter(a)+l[2],c=l[0];c--;)o=o.lastChild;_.merge(d,o.childNodes),(o=f.firstChild).textContent=""}else d.push(t.createTextNode(a));for(f.textContent="",h=0;a=d[h++];)if(r&&_.inArray(a,r)>-1)i&&i.push(a);else if(u=oe(a),o=be(f.appendChild(a),"script"),u&&xe(o),n)for(c=0;a=o[c++];)ve.test(a.type||"")&&n.push(a);return f}var _e=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function Ae(){return!1}function Te(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function ke(e,t,n,r,i,a){var o,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)ke(e,s,n,r,t[s],a);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ae;else if(!i)return e;return 1===a&&(o=i,(i=function(e){return _().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=_.guid++)),e.each((function(){_.event.add(this,t,i,r,n)}))}function Ee(e,t,n){n?(K.set(e,t,!1),_.event.add(e,t,{namespace:!1,handler:function(e){var r,i,a=K.get(this,t);if(1&e.isTrigger&&this[t]){if(a.length)(_.event.special[t]||{}).delegateType&&e.stopPropagation();else if(a=s.call(arguments),K.set(this,t,a),r=n(this,t),this[t](),a!==(i=K.get(this,t))||r?K.set(this,t,!1):i={},a!==i)return e.stopImmediatePropagation(),e.preventDefault(),i&&i.value}else a.length&&(K.set(this,t,{value:_.event.trigger(_.extend(a[0],_.Event.prototype),a.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,t)&&_.event.add(e,t,Ce)}_.event={global:{},add:function(e,t,n,r,i){var a,o,s,l,u,c,f,d,h,p,g,m=K.get(e);if(X(e))for(n.handler&&(n=(a=n).handler,i=a.selector),i&&_.find.matchesSelector(ae,i),n.guid||(n.guid=_.guid++),(l=m.events)||(l=m.events=Object.create(null)),(o=m.handle)||(o=m.handle=function(t){return void 0!==_&&_.event.triggered!==t.type?_.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(R)||[""]).length;u--;)h=g=(s=_e.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),h&&(f=_.event.special[h]||{},h=(i?f.delegateType:f.bindType)||h,f=_.event.special[h]||{},c=_.extend({type:h,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&_.expr.match.needsContext.test(i),namespace:p.join(".")},a),(d=l[h])||((d=l[h]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,p,o)||e.addEventListener&&e.addEventListener(h,o)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),_.event.global[h]=!0)},remove:function(e,t,n,r,i){var a,o,s,l,u,c,f,d,h,p,g,m=K.hasData(e)&&K.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(R)||[""]).length;u--;)if(h=g=(s=_e.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),h){for(f=_.event.special[h]||{},d=l[h=(r?f.delegateType:f.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=a=d.length;a--;)c=d[a],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(a,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));o&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,p,m.handle)||_.removeEvent(e,h,m.handle),delete l[h])}else for(h in l)_.event.remove(e,h+t[u],n,r,!0);_.isEmptyObject(l)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,a,o,s=new Array(arguments.length),l=_.event.fix(e),u=(K.get(this,"events")||Object.create(null))[l.type]||[],c=_.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(o=_.event.handlers.call(this,l,u),t=0;(i=o[t++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(a=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(r=((_.event.special[a.origType]||{}).handle||a.handler).apply(i.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,i,a,o,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(a=[],o={},n=0;n<l;n++)void 0===o[i=(r=t[n]).selector+" "]&&(o[i]=r.needsContext?_(i,this).index(u)>-1:_.find(i,this,null,[u]).length),o[i]&&a.push(r);a.length&&s.push({elem:u,handlers:a})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(_.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[_.expando]?e:new _.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&M(t,"input")&&Ee(t,"click",Ce),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&M(t,"input")&&Ee(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&M(t,"input")&&K.get(t,"click")||M(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},_.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},_.Event=function(e,t){if(!(this instanceof _.Event))return new _.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:Ae,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&_.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:Ae,isPropagationStopped:Ae,isImmediatePropagationStopped:Ae,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},_.event.addProp),_.each({focus:"focusin",blur:"focusout"},(function(e,t){_.event.special[e]={setup:function(){return Ee(this,e,Te),!1},trigger:function(){return Ee(this,e),!0},_default:function(){return!0},delegateType:t}})),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){_.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,a=e.handleObj;return i&&(i===r||_.contains(r,i))||(e.type=a.origType,n=a.handler.apply(this,arguments),e.type=t),n}}})),_.fn.extend({on:function(e,t,n,r){return ke(this,e,t,n,r)},one:function(e,t,n,r){return ke(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,_(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ae),this.each((function(){_.event.remove(this,e,n,t)}))}});var Me=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ge(e,t){return M(e,"table")&&M(11!==t.nodeType?t:t.firstChild,"tr")&&_(e).children("tbody")[0]||e}function Ne(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function qe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Le(e,t){var n,r,i,a,o,s;if(1===t.nodeType){if(K.hasData(e)&&(s=K.get(e).events))for(i in K.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)_.event.add(t,i,s[i][n]);Z.hasData(e)&&(a=Z.access(e),o=_.extend({},a),Z.set(t,o))}}function Be(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Re(e,t,n,r){t=l(t);var i,a,o,s,u,c,f=0,d=e.length,h=d-1,p=t[0],g=v(p);if(g||d>1&&"string"==typeof p&&!m.checkClone&&De.test(p))return e.each((function(i){var a=e.eq(i);g&&(t[0]=p.call(this,i,a.html())),Re(a,t,n,r)}));if(d&&(a=(i=we(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=a),a||r)){for(s=(o=_.map(be(i,"script"),Ne)).length;f<d;f++)u=i,f!==h&&(u=_.clone(u,!0,!0),s&&_.merge(o,be(u,"script"))),n.call(e[f],u,f);if(s)for(c=o[o.length-1].ownerDocument,_.map(o,qe),f=0;f<s;f++)u=o[f],ve.test(u.type||"")&&!K.access(u,"globalEval")&&_.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?_._evalUrl&&!u.noModule&&_._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):S(u.textContent.replace(Ie,""),u,c))}return e}function He(e,t,n){for(var r,i=t?_.filter(t,e):e,a=0;null!=(r=i[a]);a++)n||1!==r.nodeType||_.cleanData(be(r)),r.parentNode&&(n&&oe(r)&&xe(be(r,"script")),r.parentNode.removeChild(r));return e}_.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,a,o,s=e.cloneNode(!0),l=oe(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||_.isXMLDoc(e)))for(o=be(s),r=0,i=(a=be(e)).length;r<i;r++)Be(a[r],o[r]);if(t)if(n)for(a=a||be(e),o=o||be(s),r=0,i=a.length;r<i;r++)Le(a[r],o[r]);else Le(e,s);return(o=be(s,"script")).length>0&&xe(o,!l&&be(e,"script")),s},cleanData:function(e){for(var t,n,r,i=_.event.special,a=0;void 0!==(n=e[a]);a++)if(X(n)){if(t=n[K.expando]){if(t.events)for(r in t.events)i[r]?_.event.remove(n,r):_.removeEvent(n,r,t.handle);n[K.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),_.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return U(this,(function(e){return void 0===e?_.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Re(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ge(this,e).appendChild(e)}))},prepend:function(){return Re(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ge(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(_.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return _.clone(this,e,t)}))},html:function(e){return U(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Me.test(e)&&!ye[(me.exec(e)||["",""])[1].toLowerCase()]){e=_.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(_.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,(function(t){var n=this.parentNode;_.inArray(this,e)<0&&(_.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){_.fn[e]=function(e){for(var n,r=[],i=_(e),a=i.length-1,o=0;o<=a;o++)n=o===a?this:this.clone(!0),_(i[o])[t](n),u.apply(r,n.get());return this.pushStack(r)}}));var Pe=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),je=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},$e=function(e,t,n){var r,i,a={};for(i in t)a[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=a[i];return r},Fe=new RegExp(ie.join("|"),"i");function Oe(e,t,n){var r,i,a,o,s=e.style;return(n=n||je(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||oe(e)||(o=_.style(e,t)),!m.pixelBoxStyles()&&Pe.test(o)&&Fe.test(t)&&(r=s.width,i=s.minWidth,a=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=r,s.minWidth=i,s.maxWidth=a)),void 0!==o?o+"":o}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(u).appendChild(c);var e=n.getComputedStyle(c);r="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",o=36===t(e.right),i=36===t(e.width),c.style.position="absolute",a=12===t(c.offsetWidth/3),ae.removeChild(u),c=null}}function t(e){return Math.round(parseFloat(e))}var r,i,a,o,s,l,u=b.createElement("div"),c=b.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===c.style.backgroundClip,_.extend(m,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),a},reliableTrDimensions:function(){var e,t,r,i;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),r=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",r.style.height="9px",r.style.display="block",ae.appendChild(e).appendChild(t).appendChild(r),i=n.getComputedStyle(t),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===t.offsetHeight,ae.removeChild(e)),s}}))}();var Ve=["Webkit","Moz","ms"],ze=b.createElement("div").style,We={};function Ye(e){var t=_.cssProps[e]||We[e];return t||(e in ze?e:We[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ve.length;n--;)if((e=Ve[n]+t)in ze)return e}(e)||e)}var Xe=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Ke={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"};function Je(e,t,n){var r=re.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function et(e,t,n,r,i,a){var o="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=_.css(e,n+ie[o],!0,i)),r?("content"===n&&(l-=_.css(e,"padding"+ie[o],!0,i)),"margin"!==n&&(l-=_.css(e,"border"+ie[o]+"Width",!0,i))):(l+=_.css(e,"padding"+ie[o],!0,i),"padding"!==n?l+=_.css(e,"border"+ie[o]+"Width",!0,i):s+=_.css(e,"border"+ie[o]+"Width",!0,i));return!r&&a>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-l-s-.5))||0),l}function tt(e,t,n){var r=je(e),i=(!m.boxSizingReliable()||n)&&"border-box"===_.css(e,"boxSizing",!1,r),a=i,o=Oe(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Pe.test(o)){if(!n)return o;o="auto"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&M(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===_.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===_.css(e,"boxSizing",!1,r),(a=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+et(e,t,n||(i?"border":"content"),a,r,o)+"px"}function nt(e,t,n,r,i){return new nt.prototype.init(e,t,n,r,i)}_.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Oe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,a,o,s=Y(t),l=Qe.test(t),u=e.style;if(l||(t=Ye(s)),o=_.cssHooks[t]||_.cssHooks[s],void 0===n)return o&&"get"in o&&void 0!==(i=o.get(e,!1,r))?i:u[t];"string"===(a=typeof n)&&(i=re.exec(n))&&i[1]&&(n=ue(e,t,i),a="number"),null!=n&&n==n&&("number"!==a||l||(n+=i&&i[3]||(_.cssNumber[s]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,a,o,s=Y(t);return Qe.test(t)||(t=Ye(s)),(o=_.cssHooks[t]||_.cssHooks[s])&&"get"in o&&(i=o.get(e,!0,n)),void 0===i&&(i=Oe(e,t,r)),"normal"===i&&t in Ze&&(i=Ze[t]),""===n||n?(a=parseFloat(i),!0===n||isFinite(a)?a||0:i):i}}),_.each(["height","width"],(function(e,t){_.cssHooks[t]={get:function(e,n,r){if(n)return!Xe.test(_.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?tt(e,t,r):$e(e,Ke,(function(){return tt(e,t,r)}))},set:function(e,n,r){var i,a=je(e),o=!m.scrollboxSize()&&"absolute"===a.position,s=(o||r)&&"border-box"===_.css(e,"boxSizing",!1,a),l=r?et(e,t,r,s,a):0;return s&&o&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(a[t])-et(e,t,"border",!1,a)-.5)),l&&(i=re.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=_.css(e,t)),Je(0,n,l)}}})),_.cssHooks.marginLeft=Ue(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Oe(e,"marginLeft"))||e.getBoundingClientRect().left-$e(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),_.each({margin:"",padding:"",border:"Width"},(function(e,t){_.cssHooks[e+t]={expand:function(n){for(var r=0,i={},a="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+ie[r]+t]=a[r]||a[r-2]||a[0];return i}},"margin"!==e&&(_.cssHooks[e+t].set=Je)})),_.fn.extend({css:function(e,t){return U(this,(function(e,t,n){var r,i,a={},o=0;if(Array.isArray(t)){for(r=je(e),i=t.length;o<i;o++)a[t[o]]=_.css(e,t[o],!1,r);return a}return void 0!==n?_.style(e,t,n):_.css(e,t)}),e,t,arguments.length>1)}}),_.Tween=nt,nt.prototype={constructor:nt,init:function(e,t,n,r,i,a){this.elem=e,this.prop=n,this.easing=i||_.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=a||(_.cssNumber[n]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,n=nt.propHooks[this.prop];return this.options.duration?this.pos=t=_.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):nt.propHooks._default.set(this),this}},nt.prototype.init.prototype=nt.prototype,nt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=_.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){_.fx.step[e.prop]?_.fx.step[e.prop](e):1!==e.elem.nodeType||!_.cssHooks[e.prop]&&null==e.elem.style[Ye(e.prop)]?e.elem[e.prop]=e.now:_.style(e.elem,e.prop,e.now+e.unit)}}},nt.propHooks.scrollTop=nt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},_.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},_.fx=nt.prototype.init,_.fx.step={};var rt,it,at=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function st(){it&&(!1===b.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(st):n.setTimeout(st,_.fx.interval),_.fx.tick())}function lt(){return n.setTimeout((function(){rt=void 0})),rt=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=ie[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function ct(e,t,n){for(var r,i=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),a=0,o=i.length;a<o;a++)if(r=i[a].call(n,t,e))return r}function ft(e,t,n){var r,i,a=0,o=ft.prefilters.length,s=_.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var t=rt||lt(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),a=0,o=u.tweens.length;a<o;a++)u.tweens[a].run(r);return s.notifyWith(e,[u,r,n]),r<1&&o?n:(o||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:_.extend({},t),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},n),originalProperties:t,originalOptions:n,startTime:rt||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=_.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(!function(e,t){var n,r,i,a,o;for(n in e)if(i=t[r=Y(n)],a=e[n],Array.isArray(a)&&(i=a[1],a=e[n]=a[0]),n!==r&&(e[r]=a,delete e[n]),(o=_.cssHooks[r])&&"expand"in o)for(n in a=o.expand(a),delete e[r],a)n in e||(e[n]=a[n],t[n]=i);else t[r]=i}(c,u.opts.specialEasing);a<o;a++)if(r=ft.prefilters[a].call(u,e,c,u.opts))return v(r.stop)&&(_._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return _.map(c,ct,u),v(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),_.fx.timer(_.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}_.Animation=_.extend(ft,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(R);for(var n,r=0,i=e.length;r<i;r++)n=e[r],ft.tweeners[n]=ft.tweeners[n]||[],ft.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,a,o,s,l,u,c,f="width"in t||"height"in t,d=this,h={},p=e.style,g=e.nodeType&&le(e),m=K.get(e,"fxshow");for(r in n.queue||(null==(o=_._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,d.always((function(){d.always((function(){o.unqueued--,_.queue(e,"fx").length||o.empty.fire()}))}))),t)if(i=t[r],at.test(i)){if(delete t[r],a=a||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;g=!0}h[r]=m&&m[r]||_.style(e,r)}if((l=!_.isEmptyObject(t))||!_.isEmptyObject(h))for(r in f&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=m&&m.display)&&(u=K.get(e,"display")),"none"===(c=_.css(e,"display"))&&(u?c=u:(de([e],!0),u=e.style.display||u,c=_.css(e,"display"),de([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===_.css(e,"float")&&(l||(d.done((function(){p.display=u})),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,h)l||(m?"hidden"in m&&(g=m.hidden):m=K.access(e,"fxshow",{display:u}),a&&(m.hidden=!g),g&&de([e],!0),d.done((function(){for(r in g||de([e]),K.remove(e,"fxshow"),h)_.style(e,r,h[r])}))),l=ct(g?m[r]:0,r,d),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ft.prefilters.unshift(e):ft.prefilters.push(e)}}),_.speed=function(e,t,n){var r=e&&"object"==typeof e?_.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return _.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in _.fx.speeds?r.duration=_.fx.speeds[r.duration]:r.duration=_.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&_.dequeue(this,r.queue)},r},_.fn.extend({fadeTo:function(e,t,n,r){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=_.isEmptyObject(e),a=_.speed(t,n,r),o=function(){var t=ft(this,_.extend({},e),a);(i||K.get(this,"finish"))&&t.stop(!0)};return o.finish=o,i||!1===a.queue?this.each(o):this.queue(a.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",a=_.timers,o=K.get(this);if(i)o[i]&&o[i].stop&&r(o[i]);else for(i in o)o[i]&&o[i].stop&&ot.test(i)&&r(o[i]);for(i=a.length;i--;)a[i].elem!==this||null!=e&&a[i].queue!==e||(a[i].anim.stop(n),t=!1,a.splice(i,1));!t&&n||_.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=K.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],a=_.timers,o=r?r.length:0;for(n.finish=!0,_.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=a.length;t--;)a[t].elem===this&&a[t].queue===e&&(a[t].anim.stop(!0),a.splice(t,1));for(t=0;t<o;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),_.each(["toggle","show","hide"],(function(e,t){var n=_.fn[t];_.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}})),_.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){_.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),_.timers=[],_.fx.tick=function(){var e,t=0,n=_.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||_.fx.stop(),rt=void 0},_.fx.timer=function(e){_.timers.push(e),_.fx.start()},_.fx.interval=13,_.fx.start=function(){it||(it=!0,st())},_.fx.stop=function(){it=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(e,t){return e=_.fx&&_.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var dt,ht=_.expr.attrHandle;_.fn.extend({attr:function(e,t){return U(this,_.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){_.removeAttr(this,e)}))}}),_.extend({attr:function(e,t,n){var r,i,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?_.prop(e,t,n):(1===a&&_.isXMLDoc(e)||(i=_.attrHooks[t.toLowerCase()]||(_.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void _.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=_.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&M(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(R);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?_.removeAttr(e,n):e.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||_.find.attr;ht[t]=function(e,t,r){var i,a,o=t.toLowerCase();return r||(a=ht[o],ht[o]=i,i=null!=n(e,t,r)?o:null,ht[o]=a),i}}));var pt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function mt(e){return(e.match(R)||[]).join(" ")}function vt(e){return e.getAttribute&&e.getAttribute("class")||""}function yt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}_.fn.extend({prop:function(e,t){return U(this,_.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[_.propFix[e]||e]}))}}),_.extend({prop:function(e,t,n){var r,i,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&_.isXMLDoc(e)||(t=_.propFix[t]||t,i=_.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=_.find.attr(e,"tabindex");return t?parseInt(t,10):pt.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(_.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){_.propFix[this.toLowerCase()]=this})),_.fn.extend({addClass:function(e){var t,n,r,i,a,o,s,l=0;if(v(e))return this.each((function(t){_(this).addClass(e.call(this,t,vt(this)))}));if((t=yt(e)).length)for(;n=this[l++];)if(i=vt(n),r=1===n.nodeType&&" "+mt(i)+" "){for(o=0;a=t[o++];)r.indexOf(" "+a+" ")<0&&(r+=a+" ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,a,o,s,l=0;if(v(e))return this.each((function(t){_(this).removeClass(e.call(this,t,vt(this)))}));if(!arguments.length)return this.attr("class","");if((t=yt(e)).length)for(;n=this[l++];)if(i=vt(n),r=1===n.nodeType&&" "+mt(i)+" "){for(o=0;a=t[o++];)for(;r.indexOf(" "+a+" ")>-1;)r=r.replace(" "+a+" "," ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){_(this).toggleClass(e.call(this,n,vt(this),t),t)})):this.each((function(){var t,i,a,o;if(r)for(i=0,a=_(this),o=yt(e);t=o[i++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else void 0!==e&&"boolean"!==n||((t=vt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+mt(vt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;_.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=v(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,_(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=_.map(i,(function(e){return null==e?"":e+""}))),(t=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=_.valHooks[i.type]||_.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(bt,""):null==n?"":n:void 0}}),_.extend({valHooks:{option:{get:function(e){var t=_.find.attr(e,"value");return null!=t?t:mt(_.text(e))}},select:{get:function(e){var t,n,r,i=e.options,a=e.selectedIndex,o="select-one"===e.type,s=o?null:[],l=o?a+1:i.length;for(r=a<0?l:o?a:0;r<l;r++)if(((n=i[r]).selected||r===a)&&!n.disabled&&(!n.parentNode.disabled||!M(n.parentNode,"optgroup"))){if(t=_(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,a=_.makeArray(t),o=i.length;o--;)((r=i[o]).selected=_.inArray(_.valHooks.option.get(r),a)>-1)&&(n=!0);return n||(e.selectedIndex=-1),a}}}}),_.each(["radio","checkbox"],(function(){_.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=_.inArray(_(e).val(),t)>-1}},m.checkOn||(_.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in n;var xt=/^(?:focusinfocus|focusoutblur)$/,St=function(e){e.stopPropagation()};_.extend(_.event,{trigger:function(e,t,r,i){var a,o,s,l,u,c,f,d,p=[r||b],g=h.call(e,"type")?e.type:e,m=h.call(e,"namespace")?e.namespace.split("."):[];if(o=d=s=r=r||b,3!==r.nodeType&&8!==r.nodeType&&!xt.test(g+_.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),u=g.indexOf(":")<0&&"on"+g,(e=e[_.expando]?e:new _.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:_.makeArray(t,[e]),f=_.event.special[g]||{},i||!f.trigger||!1!==f.trigger.apply(r,t))){if(!i&&!f.noBubble&&!y(r)){for(l=f.delegateType||g,xt.test(l+g)||(o=o.parentNode);o;o=o.parentNode)p.push(o),s=o;s===(r.ownerDocument||b)&&p.push(s.defaultView||s.parentWindow||n)}for(a=0;(o=p[a++])&&!e.isPropagationStopped();)d=o,e.type=a>1?l:f.bindType||g,(c=(K.get(o,"events")||Object.create(null))[e.type]&&K.get(o,"handle"))&&c.apply(o,t),(c=u&&o[u])&&c.apply&&X(o)&&(e.result=c.apply(o,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(p.pop(),t)||!X(r)||u&&v(r[g])&&!y(r)&&((s=r[u])&&(r[u]=null),_.event.triggered=g,e.isPropagationStopped()&&d.addEventListener(g,St),r[g](),e.isPropagationStopped()&&d.removeEventListener(g,St),_.event.triggered=void 0,s&&(r[u]=s)),e.result}},simulate:function(e,t,n){var r=_.extend(new _.Event,n,{type:e,isSimulated:!0});_.event.trigger(r,null,t)}}),_.fn.extend({trigger:function(e,t){return this.each((function(){_.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return _.event.trigger(e,t,n,!0)}}),m.focusin||_.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){_.event.simulate(t,e.target,_.event.fix(e))};_.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=K.access(r,t);i||r.addEventListener(e,n,!0),K.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=K.access(r,t)-1;i?K.access(r,t,i):(r.removeEventListener(e,n,!0),K.remove(r,t))}}}));var wt=n.location,_t={guid:Date.now()},Ct=/\?/;_.parseXML=function(e){var t,r;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){}return r=t&&t.getElementsByTagName("parsererror")[0],t&&!r||_.error("Invalid XML: "+(r?_.map(r.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var At=/\[\]$/,Tt=/\r?\n/g,kt=/^(?:submit|button|image|reset|file)$/i,Et=/^(?:input|select|textarea|keygen)/i;function Mt(e,t,n,r){var i;if(Array.isArray(t))_.each(t,(function(t,i){n||At.test(e)?r(e,i):Mt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==w(t))r(e,t);else for(i in t)Mt(e+"["+i+"]",t[i],n,r)}_.param=function(e,t){var n,r=[],i=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!_.isPlainObject(e))_.each(e,(function(){i(this.name,this.value)}));else for(n in e)Mt(n,e[n],t,i);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=_.prop(this,"elements");return e?_.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!_(this).is(":disabled")&&Et.test(this.nodeName)&&!kt.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,(function(e){return{name:t.name,value:e.replace(Tt,"\r\n")}})):{name:t.name,value:n.replace(Tt,"\r\n")}})).get()}});var Dt=/%20/g,It=/#.*$/,Gt=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,qt=/^(?:GET|HEAD)$/,Lt=/^\/\//,Bt={},Rt={},Ht="*/".concat("*"),Pt=b.createElement("a");function jt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,a=t.toLowerCase().match(R)||[];if(v(n))for(;r=a[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function $t(e,t,n,r){var i={},a=e===Rt;function o(s){var l;return i[s]=!0,_.each(e[s]||[],(function(e,s){var u=s(t,n,r);return"string"!=typeof u||a||i[u]?a?!(l=u):void 0:(t.dataTypes.unshift(u),o(u),!1)})),l}return o(t.dataTypes[0])||!i["*"]&&o("*")}function Ft(e,t){var n,r,i=_.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&_.extend(!0,e,r),e}Pt.href=wt.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ft(Ft(e,_.ajaxSettings),t):Ft(_.ajaxSettings,e)},ajaxPrefilter:jt(Bt),ajaxTransport:jt(Rt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,a,o,s,l,u,c,f,d,h=_.ajaxSetup({},t),p=h.context||h,g=h.context&&(p.nodeType||p.jquery)?_(p):_.event,m=_.Deferred(),v=_.Callbacks("once memory"),y=h.statusCode||{},x={},S={},w="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(u){if(!o)for(o={};t=Nt.exec(a);)o[t[1].toLowerCase()+" "]=(o[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=o[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?a:null},setRequestHeader:function(e,t){return null==u&&(e=S[e.toLowerCase()]=S[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)C.always(e[C.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||w;return r&&r.abort(t),A(0,t),this}};if(m.promise(C),h.url=((e||h.url||wt.href)+"").replace(Lt,wt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(R)||[""],null==h.crossDomain){l=b.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Pt.protocol+"//"+Pt.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=_.param(h.data,h.traditional)),$t(Bt,h,t,C),u)return C;for(f in(c=_.event&&h.global)&&0==_.active++&&_.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!qt.test(h.type),i=h.url.replace(It,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Dt,"+")):(d=h.url.slice(i.length),h.data&&(h.processData||"string"==typeof h.data)&&(i+=(Ct.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(Gt,"$1"),d=(Ct.test(i)?"&":"?")+"_="+_t.guid+++d),h.url=i+d),h.ifModified&&(_.lastModified[i]&&C.setRequestHeader("If-Modified-Since",_.lastModified[i]),_.etag[i]&&C.setRequestHeader("If-None-Match",_.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ht+"; q=0.01":""):h.accepts["*"]),h.headers)C.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(p,C,h)||u))return C.abort();if(w="abort",v.add(h.complete),C.done(h.success),C.fail(h.error),r=$t(Rt,h,t,C)){if(C.readyState=1,c&&g.trigger("ajaxSend",[C,h]),u)return C;h.async&&h.timeout>0&&(s=n.setTimeout((function(){C.abort("timeout")}),h.timeout));try{u=!1,r.send(x,A)}catch(e){if(u)throw e;A(-1,e)}}else A(-1,"No Transport");function A(e,t,o,l){var f,d,b,x,S,w=t;u||(u=!0,s&&n.clearTimeout(s),r=void 0,a=l||"",C.readyState=e>0?4:0,f=e>=200&&e<300||304===e,o&&(x=function(e,t,n){for(var r,i,a,o,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)a=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){a=i;break}o||(o=i)}a=a||o}if(a)return a!==l[0]&&l.unshift(a),n[a]}(h,C,o)),!f&&_.inArray("script",h.dataTypes)>-1&&_.inArray("json",h.dataTypes)<0&&(h.converters["text script"]=function(){}),x=function(e,t,n,r){var i,a,o,s,l,u={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(a=c.shift();a;)if(e.responseFields[a]&&(n[e.responseFields[a]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=c.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(o=u[l+" "+a]||u["* "+a]))for(i in u)if((s=i.split(" "))[1]===a&&(o=u[l+" "+s[0]]||u["* "+s[0]])){!0===o?o=u[i]:!0!==u[i]&&(a=s[0],c.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}(h,x,C,f),f?(h.ifModified&&((S=C.getResponseHeader("Last-Modified"))&&(_.lastModified[i]=S),(S=C.getResponseHeader("etag"))&&(_.etag[i]=S)),204===e||"HEAD"===h.type?w="nocontent":304===e?w="notmodified":(w=x.state,d=x.data,f=!(b=x.error))):(b=w,!e&&w||(w="error",e<0&&(e=0))),C.status=e,C.statusText=(t||w)+"",f?m.resolveWith(p,[d,w,C]):m.rejectWith(p,[C,w,b]),C.statusCode(y),y=void 0,c&&g.trigger(f?"ajaxSuccess":"ajaxError",[C,h,f?d:b]),v.fireWith(p,[C,w]),c&&(g.trigger("ajaxComplete",[C,h]),--_.active||_.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return _.get(e,t,n,"json")},getScript:function(e,t){return _.get(e,void 0,t,"script")}}),_.each(["get","post"],(function(e,t){_[t]=function(e,n,r,i){return v(n)&&(i=i||r,r=n,n=void 0),_.ajax(_.extend({url:e,type:t,dataType:i,data:n,success:r},_.isPlainObject(e)&&e))}})),_.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),_._evalUrl=function(e,t,n){return _.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){_.globalEval(e,t,n)}})},_.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=_(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){_(this).wrapInner(e.call(this,t))})):this.each((function(){var t=_(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){_(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){_(this).replaceWith(this.childNodes)})),this}}),_.expr.pseudos.hidden=function(e){return!_.expr.pseudos.visible(e)},_.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ot={0:200,1223:204},Ut=_.ajaxSettings.xhr();m.cors=!!Ut&&"withCredentials"in Ut,m.ajax=Ut=!!Ut,_.ajaxTransport((function(e){var t,r;if(m.cors||Ut&&!e.crossDomain)return{send:function(i,a){var o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];for(o in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(o,i[o]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?a(0,"error"):a(s.status,s.statusText):a(Ot[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),_.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return _.globalEval(e),e}}}),_.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),_.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=_("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Vt,zt=[],Wt=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=zt.pop()||_.expando+"_"+_t.guid++;return this[e]=!0,e}}),_.ajaxPrefilter("json jsonp",(function(e,t,r){var i,a,o,s=!1!==e.jsonp&&(Wt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Wt,"$1"+i):!1!==e.jsonp&&(e.url+=(Ct.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return o||_.error(i+" was not called"),o[0]},e.dataTypes[0]="json",a=n[i],n[i]=function(){o=arguments},r.always((function(){void 0===a?_(n).removeProp(i):n[i]=a,e[i]&&(e.jsonpCallback=t.jsonpCallback,zt.push(i)),o&&v(a)&&a(o[0]),o=a=void 0})),"script"})),m.createHTMLDocument=((Vt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Vt.childNodes.length),_.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),a=!n&&[],(i=D.exec(e))?[t.createElement(i[1])]:(i=we([e],t,a),a&&a.length&&_(a).remove(),_.merge([],i.childNodes)));var r,i,a},_.fn.load=function(e,t,n){var r,i,a,o=this,s=e.indexOf(" ");return s>-1&&(r=mt(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),o.length>0&&_.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){a=arguments,o.html(r?_("<div>").append(_.parseHTML(e)).find(r):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,a||[e.responseText,t,e])}))}),this},_.expr.pseudos.animated=function(e){return _.grep(_.timers,(function(t){return e===t.elem})).length},_.offset={setOffset:function(e,t,n){var r,i,a,o,s,l,u=_.css(e,"position"),c=_(e),f={};"static"===u&&(e.style.position="relative"),s=c.offset(),a=_.css(e,"top"),l=_.css(e,"left"),("absolute"===u||"fixed"===u)&&(a+l).indexOf("auto")>-1?(o=(r=c.position()).top,i=r.left):(o=parseFloat(a)||0,i=parseFloat(l)||0),v(t)&&(t=t.call(e,n,_.extend({},s))),null!=t.top&&(f.top=t.top-s.top+o),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):c.css(f)}},_.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){_.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===_.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===_.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=_(e).offset()).top+=_.css(e,"borderTopWidth",!0),i.left+=_.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-_.css(r,"marginTop",!0),left:t.left-i.left-_.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===_.css(e,"position");)e=e.offsetParent;return e||ae}))}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;_.fn[e]=function(r){return U(this,(function(e,r,i){var a;if(y(e)?a=e:9===e.nodeType&&(a=e.defaultView),void 0===i)return a?a[t]:e[r];a?a.scrollTo(n?a.pageXOffset:i,n?i:a.pageYOffset):e[r]=i}),e,r,arguments.length)}})),_.each(["top","left"],(function(e,t){_.cssHooks[t]=Ue(m.pixelPosition,(function(e,n){if(n)return n=Oe(e,t),Pe.test(n)?_(e).position()[t]+"px":n}))})),_.each({Height:"height",Width:"width"},(function(e,t){_.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){_.fn[r]=function(i,a){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===a?"margin":"border");return U(this,(function(t,n,i){var a;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])):void 0===i?_.css(t,n,s):_.style(t,n,i,s)}),t,o?i:void 0,o)}}))})),_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){_.fn[t]=function(e){return this.on(t,e)}})),_.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){_.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Yt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;_.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||_.guid++,i},_.holdReady=function(e){e?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=M,_.isFunction=v,_.isWindow=y,_.camelCase=Y,_.type=w,_.now=Date.now,_.isNumeric=function(e){var t=_.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},_.trim=function(e){return null==e?"":(e+"").replace(Yt,"")},void 0===(r=function(){return _}.apply(t,[]))||(e.exports=r);var Xt=n.jQuery,Qt=n.$;return _.noConflict=function(e){return n.$===_&&(n.$=Qt),e&&n.jQuery===_&&(n.jQuery=Xt),_},void 0===i&&(n.jQuery=n.$=_),_}))},17:function(e,t,n){const r=n(26);e.exports=r},23:function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},24:function(e,t,n){var r,i,a;
/*!
 * jQuery UI Widget 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */i=[n(0),n(25)],void 0===(a="function"==typeof(r=function(e){var t,n=0,r=Array.prototype.slice;return e.cleanData=(t=e.cleanData,function(n){var r,i,a;for(a=0;null!=(i=n[a]);a++)try{(r=e._data(i,"events"))&&r.remove&&e(i).triggerHandler("remove")}catch(e){}t(n)}),e.widget=function(t,n,r){var i,a,o,s={},l=t.split(".")[0],u=l+"-"+(t=t.split(".")[1]);return r||(r=n,n=e.Widget),e.isArray(r)&&(r=e.extend.apply(null,[{}].concat(r))),e.expr[":"][u.toLowerCase()]=function(t){return!!e.data(t,u)},e[l]=e[l]||{},i=e[l][t],a=e[l][t]=function(e,t){if(!this._createWidget)return new a(e,t);arguments.length&&this._createWidget(e,t)},e.extend(a,i,{version:r.version,_proto:e.extend({},r),_childConstructors:[]}),(o=new n).options=e.widget.extend({},o.options),e.each(r,(function(t,r){e.isFunction(r)?s[t]=function(){function e(){return n.prototype[t].apply(this,arguments)}function i(e){return n.prototype[t].apply(this,e)}return function(){var t,n=this._super,a=this._superApply;return this._super=e,this._superApply=i,t=r.apply(this,arguments),this._super=n,this._superApply=a,t}}():s[t]=r})),a.prototype=e.widget.extend(o,{widgetEventPrefix:i&&o.widgetEventPrefix||t},s,{constructor:a,namespace:l,widgetName:t,widgetFullName:u}),i?(e.each(i._childConstructors,(function(t,n){var r=n.prototype;e.widget(r.namespace+"."+r.widgetName,a,n._proto)})),delete i._childConstructors):n._childConstructors.push(a),e.widget.bridge(t,a),a},e.widget.extend=function(t){for(var n,i,a=r.call(arguments,1),o=0,s=a.length;o<s;o++)for(n in a[o])i=a[o][n],a[o].hasOwnProperty(n)&&void 0!==i&&(e.isPlainObject(i)?t[n]=e.isPlainObject(t[n])?e.widget.extend({},t[n],i):e.widget.extend({},i):t[n]=i);return t},e.widget.bridge=function(t,n){var i=n.prototype.widgetFullName||t;e.fn[t]=function(a){var o="string"==typeof a,s=r.call(arguments,1),l=this;return o?this.length||"instance"!==a?this.each((function(){var n,r=e.data(this,i);return"instance"===a?(l=r,!1):r?e.isFunction(r[a])&&"_"!==a.charAt(0)?(n=r[a].apply(r,s))!==r&&void 0!==n?(l=n&&n.jquery?l.pushStack(n.get()):n,!1):void 0:e.error("no such method '"+a+"' for "+t+" widget instance"):e.error("cannot call methods on "+t+" prior to initialization; attempted to call method '"+a+"'")})):l=void 0:(s.length&&(a=e.widget.extend.apply(null,[a].concat(s))),this.each((function(){var t=e.data(this,i);t?(t.option(a||{}),t._init&&t._init()):e.data(this,i,new n(a,this))}))),l}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(t,r){r=e(r||this.defaultElement||this)[0],this.element=e(r),this.uuid=n++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=e(),this.hoverable=e(),this.focusable=e(),this.classesElementLookup={},r!==this&&(e.data(r,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===r&&this.destroy()}}),this.document=e(r.style?r.ownerDocument:r.document||r),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){var t=this;this._destroy(),e.each(this.classesElementLookup,(function(e,n){t._removeClass(n,e)})),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:e.noop,widget:function(){return this.element},option:function(t,n){var r,i,a,o=t;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof t)if(o={},r=t.split("."),t=r.shift(),r.length){for(i=o[t]=e.widget.extend({},this.options[t]),a=0;a<r.length-1;a++)i[r[a]]=i[r[a]]||{},i=i[r[a]];if(t=r.pop(),1===arguments.length)return void 0===i[t]?null:i[t];i[t]=n}else{if(1===arguments.length)return void 0===this.options[t]?null:this.options[t];o[t]=n}return this._setOptions(o),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return"classes"===e&&this._setOptionClasses(t),this.options[e]=t,"disabled"===e&&this._setOptionDisabled(t),this},_setOptionClasses:function(t){var n,r,i;for(n in t)i=this.classesElementLookup[n],t[n]!==this.options.classes[n]&&i&&i.length&&(r=e(i.get()),this._removeClass(i,n),r.addClass(this._classes({element:r,keys:n,classes:t,add:!0})))},_setOptionDisabled:function(e){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!e),e&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(t){var n=[],r=this;function i(i,a){var o,s;for(s=0;s<i.length;s++)o=r.classesElementLookup[i[s]]||e(),o=t.add?e(e.unique(o.get().concat(t.element.get()))):e(o.not(t.element).get()),r.classesElementLookup[i[s]]=o,n.push(i[s]),a&&t.classes[i[s]]&&n.push(t.classes[i[s]])}return t=e.extend({element:this.element,classes:this.options.classes||{}},t),this._on(t.element,{remove:"_untrackClassesElement"}),t.keys&&i(t.keys.match(/\S+/g)||[],!0),t.extra&&i(t.extra.match(/\S+/g)||[]),n.join(" ")},_untrackClassesElement:function(t){var n=this;e.each(n.classesElementLookup,(function(r,i){-1!==e.inArray(t.target,i)&&(n.classesElementLookup[r]=e(i.not(t.target).get()))}))},_removeClass:function(e,t,n){return this._toggleClass(e,t,n,!1)},_addClass:function(e,t,n){return this._toggleClass(e,t,n,!0)},_toggleClass:function(e,t,n,r){r="boolean"==typeof r?r:n;var i="string"==typeof e||null===e,a={extra:i?t:n,keys:i?e:t,element:i?this.element:e,add:r};return a.element.toggleClass(this._classes(a),r),this},_on:function(t,n,r){var i,a=this;"boolean"!=typeof t&&(r=n,n=t,t=!1),r?(n=i=e(n),this.bindings=this.bindings.add(n)):(r=n,n=this.element,i=this.widget()),e.each(r,(function(r,o){function s(){if(t||!0!==a.options.disabled&&!e(this).hasClass("ui-state-disabled"))return("string"==typeof o?a[o]:o).apply(a,arguments)}"string"!=typeof o&&(s.guid=o.guid=o.guid||s.guid||e.guid++);var l=r.match(/^([\w:-]*)\s*(.*)$/),u=l[1]+a.eventNamespace,c=l[2];c?i.on(u,c,s):n.on(u,s)}))},_off:function(t,n){n=(n||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,t.off(n).off(n),this.bindings=e(this.bindings.not(t).get()),this.focusable=e(this.focusable.not(t).get()),this.hoverable=e(this.hoverable.not(t).get())},_delay:function(e,t){var n=this;return setTimeout((function(){return("string"==typeof e?n[e]:e).apply(n,arguments)}),t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){this._addClass(e(t.currentTarget),null,"ui-state-hover")},mouseleave:function(t){this._removeClass(e(t.currentTarget),null,"ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){this._addClass(e(t.currentTarget),null,"ui-state-focus")},focusout:function(t){this._removeClass(e(t.currentTarget),null,"ui-state-focus")}})},_trigger:function(t,n,r){var i,a,o=this.options[t];if(r=r||{},(n=e.Event(n)).type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),n.target=this.element[0],a=n.originalEvent)for(i in a)i in n||(n[i]=a[i]);return this.element.trigger(n,r),!(e.isFunction(o)&&!1===o.apply(this.element[0],[n].concat(r))||n.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},(function(t,n){e.Widget.prototype["_"+t]=function(r,i,a){var o;"string"==typeof i&&(i={effect:i});var s=i?!0===i||"number"==typeof i?n:i.effect||n:t;"number"==typeof(i=i||{})&&(i={duration:i}),o=!e.isEmptyObject(i),i.complete=a,i.delay&&r.delay(i.delay),o&&e.effects&&e.effects.effect[s]?r[t](i):s!==t&&r[s]?r[s](i.duration,i.easing,a):r.queue((function(n){e(this)[t](),a&&a.call(r[0]),n()}))}})),e.widget})?r.apply(t,i):r)||(e.exports=a)},25:function(e,t,n){var r,i,a;i=[n(0)],void 0===(a="function"==typeof(r=function(e){return e.ui=e.ui||{},e.ui.version="1.12.1"})?r.apply(t,i):r)||(e.exports=a)},26:function(e,t,n){"use strict";n.r(t);var r={},i={};function a(e){return new Function("d","return {"+e.map((function(e,t){return JSON.stringify(e)+": d["+t+'] || ""'})).join(",")+"}")}function o(e){var t=Object.create(null),n=[];return e.forEach((function(e){for(var r in e)r in t||n.push(t[r]=r)})),n}function s(e,t){var n=e+"",r=n.length;return r<t?new Array(t-r+1).join(0)+n:n}function l(e){var t,n=e.getUTCHours(),r=e.getUTCMinutes(),i=e.getUTCSeconds(),a=e.getUTCMilliseconds();return isNaN(e)?"Invalid Date":((t=e.getUTCFullYear())<0?"-"+s(-t,6):t>9999?"+"+s(t,6):s(t,4))+"-"+s(e.getUTCMonth()+1,2)+"-"+s(e.getUTCDate(),2)+(a?"T"+s(n,2)+":"+s(r,2)+":"+s(i,2)+"."+s(a,3)+"Z":i?"T"+s(n,2)+":"+s(r,2)+":"+s(i,2)+"Z":r||n?"T"+s(n,2)+":"+s(r,2)+"Z":"")}var u=function(e){var t=new RegExp('["'+e+"\n\r]"),n=e.charCodeAt(0);function s(e,t){var a,o=[],s=e.length,l=0,u=0,c=s<=0,f=!1;function d(){if(c)return i;if(f)return f=!1,r;var t,a,o=l;if(34===e.charCodeAt(o)){for(;l++<s&&34!==e.charCodeAt(l)||34===e.charCodeAt(++l););return(t=l)>=s?c=!0:10===(a=e.charCodeAt(l++))?f=!0:13===a&&(f=!0,10===e.charCodeAt(l)&&++l),e.slice(o+1,t-1).replace(/""/g,'"')}for(;l<s;){if(10===(a=e.charCodeAt(t=l++)))f=!0;else if(13===a)f=!0,10===e.charCodeAt(l)&&++l;else if(a!==n)continue;return e.slice(o,t)}return c=!0,e.slice(o,s)}for(10===e.charCodeAt(s-1)&&--s,13===e.charCodeAt(s-1)&&--s;(a=d())!==i;){for(var h=[];a!==r&&a!==i;)h.push(a),a=d();t&&null==(h=t(h,u++))||o.push(h)}return o}function u(t,n){return t.map((function(t){return n.map((function(e){return f(t[e])})).join(e)}))}function c(t){return t.map(f).join(e)}function f(e){return null==e?"":e instanceof Date?l(e):t.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,r,i=s(e,(function(e,i){if(n)return n(e,i-1);r=e,n=t?function(e,t){var n=a(e);return function(r,i){return t(n(r),i,e)}}(e,t):a(e)}));return i.columns=r||[],i},parseRows:s,format:function(t,n){return null==n&&(n=o(t)),[n.map(f).join(e)].concat(u(t,n)).join("\n")},formatBody:function(e,t){return null==t&&(t=o(e)),u(e,t).join("\n")},formatRows:function(e){return e.map(c).join("\n")},formatRow:c,formatValue:f}},c=u(","),f=c.parse,d=(c.parseRows,c.format,c.formatBody,c.formatRows,c.formatRow,c.formatValue,u("\t")),h=d.parse;d.parseRows,d.format,d.formatBody,d.formatRows,d.formatRow,d.formatValue;function p(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.text()}var g=function(e,t){return fetch(e,t).then(p)};function m(e){return function(t,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),g(t,n).then((function(t){return e(t,r)}))}}m(f),m(h);function v(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.json()}var y=function(e,t){return fetch(e,t).then(v)};function b(e){return function(t,n){return g(t,n).then((function(t){return(new DOMParser).parseFromString(t,e)}))}}b("application/xml"),b("text/html"),b("image/svg+xml");var x=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN},S=function(e){var t;return 1===e.length&&(t=e,e=function(e,n){return x(t(e),n)}),{left:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var a=r+i>>>1;e(t[a],n)<0?r=a+1:i=a}return r},right:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var a=r+i>>>1;e(t[a],n)>0?i=a:r=a+1}return r}}};var w=S(x),_=w.right,C=(w.left,_);var A=function(e,t){var n,r,i,a=e.length,o=-1;if(null==t){for(;++o<a;)if(null!=(n=e[o])&&n>=n)for(r=i=n;++o<a;)null!=(n=e[o])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++o<a;)if(null!=(n=t(e[o],o,e))&&n>=n)for(r=i=n;++o<a;)null!=(n=t(e[o],o,e))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},T=Array.prototype,k=(T.slice,T.map,function(e,t,n){e=+e,t=+t,n=(i=arguments.length)<2?(t=e,e=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((t-e)/n)),a=new Array(i);++r<i;)a[r]=e+r*n;return a}),E=Math.sqrt(50),M=Math.sqrt(10),D=Math.sqrt(2),I=function(e,t,n){var r,i,a,o,s=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((r=t<e)&&(i=e,e=t,t=i),0===(o=G(e,t,n))||!isFinite(o))return[];if(o>0)for(e=Math.ceil(e/o),t=Math.floor(t/o),a=new Array(i=Math.ceil(t-e+1));++s<i;)a[s]=(e+s)*o;else for(e=Math.floor(e*o),t=Math.ceil(t*o),a=new Array(i=Math.ceil(e-t+1));++s<i;)a[s]=(e-s)/o;return r&&a.reverse(),a};function G(e,t,n){var r=(t-e)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=E?10:a>=M?5:a>=D?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=E?10:a>=M?5:a>=D?2:1)}function N(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=E?i*=10:a>=M?i*=5:a>=D&&(i*=2),t<e?-i:i}var q=function(e,t){var n,r,i=e.length,a=-1;if(null==t){for(;++a<i;)if(null!=(n=e[a])&&n>=n)for(r=n;++a<i;)null!=(n=e[a])&&n>r&&(r=n)}else for(;++a<i;)if(null!=(n=t(e[a],a,e))&&n>=n)for(r=n;++a<i;)null!=(n=t(e[a],a,e))&&n>r&&(r=n);return r},L=function(e,t){var n,r,i=e.length,a=-1;if(null==t){for(;++a<i;)if(null!=(n=e[a])&&n>=n)for(r=n;++a<i;)null!=(n=e[a])&&r>n&&(r=n)}else for(;++a<i;)if(null!=(n=t(e[a],a,e))&&n>=n)for(r=n;++a<i;)null!=(n=t(e[a],a,e))&&r>n&&(r=n);return r};function B(){}var R=function(e){return null==e?B:function(){return this.querySelector(e)}};function H(){return[]}var P=function(e){return null==e?H:function(){return this.querySelectorAll(e)}},j=function(e){return function(){return this.matches(e)}},$=function(e){return new Array(e.length)};function F(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}F.prototype={constructor:F,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};function O(e,t,n,r,i,a){for(var o,s=0,l=t.length,u=a.length;s<u;++s)(o=t[s])?(o.__data__=a[s],r[s]=o):n[s]=new F(e,a[s]);for(;s<l;++s)(o=t[s])&&(i[s]=o)}function U(e,t,n,r,i,a,o){var s,l,u,c={},f=t.length,d=a.length,h=new Array(f);for(s=0;s<f;++s)(l=t[s])&&(h[s]=u="$"+o.call(l,l.__data__,s,t),u in c?i[s]=l:c[u]=l);for(s=0;s<d;++s)(l=c[u="$"+o.call(e,a[s],s,a)])?(r[s]=l,l.__data__=a[s],c[u]=null):n[s]=new F(e,a[s]);for(s=0;s<f;++s)(l=t[s])&&c[h[s]]===l&&(i[s]=l)}function V(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}var z="http://www.w3.org/1999/xhtml",W={svg:"http://www.w3.org/2000/svg",xhtml:z,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Y=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),W.hasOwnProperty(t)?{space:W[t],local:e}:e};function X(e){return function(){this.removeAttribute(e)}}function Q(e){return function(){this.removeAttributeNS(e.space,e.local)}}function K(e,t){return function(){this.setAttribute(e,t)}}function Z(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function J(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function ee(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}var te=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView};function ne(e){return function(){this.style.removeProperty(e)}}function re(e,t,n){return function(){this.style.setProperty(e,t,n)}}function ie(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function ae(e,t){return e.style.getPropertyValue(t)||te(e).getComputedStyle(e,null).getPropertyValue(t)}function oe(e){return function(){delete this[e]}}function se(e,t){return function(){this[e]=t}}function le(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function ue(e){return e.trim().split(/^|\s+/)}function ce(e){return e.classList||new fe(e)}function fe(e){this._node=e,this._names=ue(e.getAttribute("class")||"")}function de(e,t){for(var n=ce(e),r=-1,i=t.length;++r<i;)n.add(t[r])}function he(e,t){for(var n=ce(e),r=-1,i=t.length;++r<i;)n.remove(t[r])}function pe(e){return function(){de(this,e)}}function ge(e){return function(){he(this,e)}}function me(e,t){return function(){(t.apply(this,arguments)?de:he)(this,e)}}fe.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};function ve(){this.textContent=""}function ye(e){return function(){this.textContent=e}}function be(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function xe(){this.innerHTML=""}function Se(e){return function(){this.innerHTML=e}}function we(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function _e(){this.nextSibling&&this.parentNode.appendChild(this)}function Ce(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ae(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===z&&t.documentElement.namespaceURI===z?t.createElement(e):t.createElementNS(n,e)}}function Te(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}var ke=function(e){var t=Y(e);return(t.local?Te:Ae)(t)};function Ee(){return null}function Me(){var e=this.parentNode;e&&e.removeChild(this)}function De(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function Ie(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}var Ge={},Ne=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Ge={mouseenter:"mouseover",mouseleave:"mouseout"}));function qe(e,t,n){return e=Le(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function Le(e,t,n){return function(r){var i=Ne;Ne=r;try{e.call(this,this.__data__,t,n)}finally{Ne=i}}}function Be(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function Re(e){return function(){var t=this.__on;if(t){for(var n,r=0,i=-1,a=t.length;r<a;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?t.length=i:delete this.__on}}}function He(e,t,n){var r=Ge.hasOwnProperty(e.type)?qe:Le;return function(i,a,o){var s,l=this.__on,u=r(t,a,o);if(l)for(var c=0,f=l.length;c<f;++c)if((s=l[c]).type===e.type&&s.name===e.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=u,s.capture=n),void(s.value=t);this.addEventListener(e.type,u,n),s={type:e.type,name:e.name,value:t,listener:u,capture:n},l?l.push(s):this.__on=[s]}}function Pe(e,t,n,r){var i=Ne;e.sourceEvent=Ne,Ne=e;try{return t.apply(n,r)}finally{Ne=i}}function je(e,t,n){var r=te(e),i=r.CustomEvent;"function"==typeof i?i=new i(t,n):(i=r.document.createEvent("Event"),n?(i.initEvent(t,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(t,!1,!1)),e.dispatchEvent(i)}function $e(e,t){return function(){return je(this,e,t)}}function Fe(e,t){return function(){return je(this,e,t.apply(this,arguments))}}var Oe=[null];function Ue(e,t){this._groups=e,this._parents=t}function Ve(){return new Ue([[document.documentElement]],Oe)}Ue.prototype=Ve.prototype={constructor:Ue,select:function(e){"function"!=typeof e&&(e=R(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var a,o,s=t[i],l=s.length,u=r[i]=new Array(l),c=0;c<l;++c)(a=s[c])&&(o=e.call(a,a.__data__,c,s))&&("__data__"in a&&(o.__data__=a.__data__),u[c]=o);return new Ue(r,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=P(e));for(var t=this._groups,n=t.length,r=[],i=[],a=0;a<n;++a)for(var o,s=t[a],l=s.length,u=0;u<l;++u)(o=s[u])&&(r.push(e.call(o,o.__data__,u,s)),i.push(o));return new Ue(r,i)},filter:function(e){"function"!=typeof e&&(e=j(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var a,o=t[i],s=o.length,l=r[i]=[],u=0;u<s;++u)(a=o[u])&&e.call(a,a.__data__,u,o)&&l.push(a);return new Ue(r,this._parents)},data:function(e,t){if(!e)return p=new Array(this.size()),c=-1,this.each((function(e){p[++c]=e})),p;var n,r=t?U:O,i=this._parents,a=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var o=a.length,s=new Array(o),l=new Array(o),u=new Array(o),c=0;c<o;++c){var f=i[c],d=a[c],h=d.length,p=e.call(f,f&&f.__data__,c,i),g=p.length,m=l[c]=new Array(g),v=s[c]=new Array(g);r(f,d,m,v,u[c]=new Array(h),p,t);for(var y,b,x=0,S=0;x<g;++x)if(y=m[x]){for(x>=S&&(S=x+1);!(b=v[S])&&++S<g;);y._next=b||null}}return(s=new Ue(s,i))._enter=l,s._exit=u,s},enter:function(){return new Ue(this._enter||this._groups.map($),this._parents)},exit:function(){return new Ue(this._exit||this._groups.map($),this._parents)},join:function(e,t,n){var r=this.enter(),i=this,a=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(i=t(i)),null==n?a.remove():n(a),r&&i?r.merge(i).order():i},merge:function(e){for(var t=this._groups,n=e._groups,r=t.length,i=n.length,a=Math.min(r,i),o=new Array(r),s=0;s<a;++s)for(var l,u=t[s],c=n[s],f=u.length,d=o[s]=new Array(f),h=0;h<f;++h)(l=u[h]||c[h])&&(d[h]=l);for(;s<r;++s)o[s]=t[s];return new Ue(o,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,i=e[t],a=i.length-1,o=i[a];--a>=0;)(r=i[a])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=V);for(var n=this._groups,r=n.length,i=new Array(r),a=0;a<r;++a){for(var o,s=n[a],l=s.length,u=i[a]=new Array(l),c=0;c<l;++c)(o=s[c])&&(u[c]=o);u.sort(t)}return new Ue(i,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each((function(){e[++t]=this})),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],i=0,a=r.length;i<a;++i){var o=r[i];if(o)return o}return null},size:function(){var e=0;return this.each((function(){++e})),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var i,a=t[n],o=0,s=a.length;o<s;++o)(i=a[o])&&e.call(i,i.__data__,o,a);return this},attr:function(e,t){var n=Y(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?Q:X:"function"==typeof t?n.local?ee:J:n.local?Z:K)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?ne:"function"==typeof t?ie:re)(e,t,null==n?"":n)):ae(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?oe:"function"==typeof t?le:se)(e,t)):this.node()[e]},classed:function(e,t){var n=ue(e+"");if(arguments.length<2){for(var r=ce(this.node()),i=-1,a=n.length;++i<a;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof t?me:t?pe:ge)(n,t))},text:function(e){return arguments.length?this.each(null==e?ve:("function"==typeof e?be:ye)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?xe:("function"==typeof e?we:Se)(e)):this.node().innerHTML},raise:function(){return this.each(_e)},lower:function(){return this.each(Ce)},append:function(e){var t="function"==typeof e?e:ke(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:ke(e),r=null==t?Ee:"function"==typeof t?t:R(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Me)},clone:function(e){return this.select(e?Ie:De)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,i,a=Be(e+""),o=a.length;if(!(arguments.length<2)){for(s=t?He:Re,null==n&&(n=!1),r=0;r<o;++r)this.each(s(a[r],t,n));return this}var s=this.node().__on;if(s)for(var l,u=0,c=s.length;u<c;++u)for(r=0,l=s[u];r<o;++r)if((i=a[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(e,t){return this.each(("function"==typeof t?Fe:$e)(e,t))}};var ze=Ve,We=function(e){return"string"==typeof e?new Ue([[document.querySelector(e)]],[document.documentElement]):new Ue([[e]],Oe)},Ye=function(e){return"string"==typeof e?new Ue([document.querySelectorAll(e)],[document.documentElement]):new Ue([null==e?[]:e],Oe)},Xe=n(0),Qe=n.n(Xe);function Ke(e){if(We(`#${e}`).empty()){let t=`Input Error: DOM ID ${e} is not found.`;throw console.warn(t),t}}function Ze(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}function Je(e,t){switch(arguments.length){case 0:break;case 1:this.interpolator(e);break;default:this.interpolator(t).domain(e)}return this}function et(){}function tt(e,t){var n=new et;if(e instanceof et)e.each((function(e,t){n.set(t,e)}));else if(Array.isArray(e)){var r,i=-1,a=e.length;if(null==t)for(;++i<a;)n.set(i,e[i]);else for(;++i<a;)n.set(t(r=e[i],i,e),r)}else if(e)for(var o in e)n.set(o,e[o]);return n}et.prototype=tt.prototype={constructor:et,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var nt=tt,rt=function(){var e,t,n,r=[],i=[];function a(n,i,o,s){if(i>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var l,u,c,f=-1,d=n.length,h=r[i++],p=nt(),g=o();++f<d;)(c=p.get(l=h(u=n[f])+""))?c.push(u):p.set(l,[u]);return p.each((function(e,t){s(g,t,a(e,i,o,s))})),g}return n={object:function(e){return a(e,0,it,at)},map:function(e){return a(e,0,ot,st)},entries:function(e){return function e(n,a){if(++a>r.length)return n;var o,s=i[a-1];return null!=t&&a>=r.length?o=n.entries():(o=[],n.each((function(t,n){o.push({key:n,values:e(t,a)})}))),null!=s?o.sort((function(e,t){return s(e.key,t.key)})):o}(a(e,0,ot,st),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return i[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function it(){return{}}function at(e,t,n){e[t]=n}function ot(){return nt()}function st(e,t,n){e.set(t,n)}function lt(){}var ut=nt.prototype;function ct(e,t){var n=new lt;if(e instanceof lt)e.each((function(e){n.add(e)}));else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)n.add(e[r]);else for(;++r<i;)n.add(t(e[r],r,e))}return n}lt.prototype=ct.prototype={constructor:lt,has:ut.has,add:function(e){return this["$"+(e+="")]=e,this},remove:ut.remove,clear:ut.clear,values:ut.keys,size:ut.size,empty:ut.empty,each:ut.each};var ft=Array.prototype,dt=ft.map,ht=ft.slice,pt={name:"implicit"};function gt(){var e=nt(),t=[],n=[],r=pt;function i(i){var a=i+"",o=e.get(a);if(!o){if(r!==pt)return r;e.set(a,o=t.push(i))}return n[(o-1)%n.length]}return i.domain=function(n){if(!arguments.length)return t.slice();t=[],e=nt();for(var r,a,o=-1,s=n.length;++o<s;)e.has(a=(r=n[o])+"")||e.set(a,t.push(r));return i},i.range=function(e){return arguments.length?(n=ht.call(e),i):n.slice()},i.unknown=function(e){return arguments.length?(r=e,i):r},i.copy=function(){return gt(t,n).unknown(r)},Ze.apply(i,arguments),i}function mt(){var e,t,n=gt().unknown(void 0),r=n.domain,i=n.range,a=[0,1],o=!1,s=0,l=0,u=.5;function c(){var n=r().length,c=a[1]<a[0],f=a[c-0],d=a[1-c];e=(d-f)/Math.max(1,n-s+2*l),o&&(e=Math.floor(e)),f+=(d-f-e*(n-s))*u,t=e*(1-s),o&&(f=Math.round(f),t=Math.round(t));var h=k(n).map((function(t){return f+e*t}));return i(c?h.reverse():h)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),c()):r()},n.range=function(e){return arguments.length?(a=[+e[0],+e[1]],c()):a.slice()},n.rangeRound=function(e){return a=[+e[0],+e[1]],o=!0,c()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(o=!!e,c()):o},n.padding=function(e){return arguments.length?(s=Math.min(1,l=+e),c()):s},n.paddingInner=function(e){return arguments.length?(s=Math.min(1,e),c()):s},n.paddingOuter=function(e){return arguments.length?(l=+e,c()):l},n.align=function(e){return arguments.length?(u=Math.max(0,Math.min(1,e)),c()):u},n.copy=function(){return mt(r(),a).round(o).paddingInner(s).paddingOuter(l).align(u)},Ze.apply(c(),arguments)}var vt=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e};function yt(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function bt(){}var xt="\\s*([+-]?\\d+)\\s*",St="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",wt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",_t=/^#([0-9a-f]{3,8})$/,Ct=new RegExp("^rgb\\("+[xt,xt,xt]+"\\)$"),At=new RegExp("^rgb\\("+[wt,wt,wt]+"\\)$"),Tt=new RegExp("^rgba\\("+[xt,xt,xt,St]+"\\)$"),kt=new RegExp("^rgba\\("+[wt,wt,wt,St]+"\\)$"),Et=new RegExp("^hsl\\("+[St,wt,wt]+"\\)$"),Mt=new RegExp("^hsla\\("+[St,wt,wt,St]+"\\)$"),Dt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function It(){return this.rgb().formatHex()}function Gt(){return this.rgb().formatRgb()}function Nt(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=_t.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?qt(t):3===n?new Ht(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?new Ht(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?new Ht(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=Ct.exec(e))?new Ht(t[1],t[2],t[3],1):(t=At.exec(e))?new Ht(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=Tt.exec(e))?Lt(t[1],t[2],t[3],t[4]):(t=kt.exec(e))?Lt(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=Et.exec(e))?Ft(t[1],t[2]/100,t[3]/100,1):(t=Mt.exec(e))?Ft(t[1],t[2]/100,t[3]/100,t[4]):Dt.hasOwnProperty(e)?qt(Dt[e]):"transparent"===e?new Ht(NaN,NaN,NaN,0):null}function qt(e){return new Ht(e>>16&255,e>>8&255,255&e,1)}function Lt(e,t,n,r){return r<=0&&(e=t=n=NaN),new Ht(e,t,n,r)}function Bt(e){return e instanceof bt||(e=Nt(e)),e?new Ht((e=e.rgb()).r,e.g,e.b,e.opacity):new Ht}function Rt(e,t,n,r){return 1===arguments.length?Bt(e):new Ht(e,t,n,null==r?1:r)}function Ht(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function Pt(){return"#"+$t(this.r)+$t(this.g)+$t(this.b)}function jt(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function $t(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function Ft(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Ut(e,t,n,r)}function Ot(e){if(e instanceof Ut)return new Ut(e.h,e.s,e.l,e.opacity);if(e instanceof bt||(e=Nt(e)),!e)return new Ut;if(e instanceof Ut)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,i=Math.min(t,n,r),a=Math.max(t,n,r),o=NaN,s=a-i,l=(a+i)/2;return s?(o=t===a?(n-r)/s+6*(n<r):n===a?(r-t)/s+2:(t-n)/s+4,s/=l<.5?a+i:2-a-i,o*=60):s=l>0&&l<1?0:o,new Ut(o,s,l,e.opacity)}function Ut(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function Vt(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}function zt(e,t,n,r,i){var a=e*e,o=a*e;return((1-3*e+3*a-o)*t+(4-6*a+3*o)*n+(1+3*e+3*a-3*o)*r+o*i)/6}vt(bt,Nt,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:It,formatHex:It,formatHsl:function(){return Ot(this).formatHsl()},formatRgb:Gt,toString:Gt}),vt(Ht,Rt,yt(bt,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Ht(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Ht(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Pt,formatHex:Pt,formatRgb:jt,toString:jt})),vt(Ut,(function(e,t,n,r){return 1===arguments.length?Ot(e):new Ut(e,t,n,null==r?1:r)}),yt(bt,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Ut(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Ut(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,i=2*n-r;return new Ht(Vt(e>=240?e-240:e+120,i,r),Vt(e,i,r),Vt(e<120?e+240:e-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}));var Wt=function(e){return function(){return e}};function Yt(e,t){return function(n){return e+n*t}}function Xt(e){return 1==(e=+e)?Qt:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):Wt(isNaN(t)?n:t)}}function Qt(e,t){var n=t-e;return n?Yt(e,n):Wt(isNaN(e)?t:e)}var Kt=function e(t){var n=Xt(t);function r(e,t){var r=n((e=Rt(e)).r,(t=Rt(t)).r),i=n(e.g,t.g),a=n(e.b,t.b),o=Qt(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=i(t),e.b=a(t),e.opacity=o(t),e+""}}return r.gamma=e,r}(1);function Zt(e){return function(t){var n,r,i=t.length,a=new Array(i),o=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=Rt(t[n]),a[n]=r.r||0,o[n]=r.g||0,s[n]=r.b||0;return a=e(a),o=e(o),s=e(s),r.opacity=1,function(e){return r.r=a(e),r.g=o(e),r.b=s(e),r+""}}}var Jt=Zt((function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),i=e[r],a=e[r+1],o=r>0?e[r-1]:2*i-a,s=r<t-1?e[r+2]:2*a-i;return zt((n-r/t)*t,o,i,a,s)}})),en=(Zt((function(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),i=e[(r+t-1)%t],a=e[r%t],o=e[(r+1)%t],s=e[(r+2)%t];return zt((n-r/t)*t,i,a,o,s)}})),function(e,t){t||(t=[]);var n,r=e?Math.min(t.length,e.length):0,i=t.slice();return function(a){for(n=0;n<r;++n)i[n]=e[n]*(1-a)+t[n]*a;return i}});function tn(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}function nn(e,t){var n,r=t?t.length:0,i=e?Math.min(r,e.length):0,a=new Array(i),o=new Array(r);for(n=0;n<i;++n)a[n]=cn(e[n],t[n]);for(;n<r;++n)o[n]=t[n];return function(e){for(n=0;n<i;++n)o[n]=a[n](e);return o}}var rn=function(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}},an=function(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}},on=function(e,t){var n,r={},i={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=cn(e[n],t[n]):i[n]=t[n];return function(e){for(n in r)i[n]=r[n](e);return i}},sn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ln=new RegExp(sn.source,"g");var un=function(e,t){var n,r,i,a=sn.lastIndex=ln.lastIndex=0,o=-1,s=[],l=[];for(e+="",t+="";(n=sn.exec(e))&&(r=ln.exec(t));)(i=r.index)>a&&(i=t.slice(a,i),s[o]?s[o]+=i:s[++o]=i),(n=n[0])===(r=r[0])?s[o]?s[o]+=r:s[++o]=r:(s[++o]=null,l.push({i:o,x:an(n,r)})),a=ln.lastIndex;return a<t.length&&(i=t.slice(a),s[o]?s[o]+=i:s[++o]=i),s.length<2?l[0]?function(e){return function(t){return e(t)+""}}(l[0].x):function(e){return function(){return e}}(t):(t=l.length,function(e){for(var n,r=0;r<t;++r)s[(n=l[r]).i]=n.x(e);return s.join("")})},cn=function(e,t){var n,r=typeof t;return null==t||"boolean"===r?Wt(t):("number"===r?an:"string"===r?(n=Nt(t))?(t=n,Kt):un:t instanceof Nt?Kt:t instanceof Date?rn:tn(t)?en:Array.isArray(t)?nn:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?on:an)(e,t)},fn=function(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}},dn=function(e){return+e},hn=[0,1];function pn(e){return e}function gn(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:(n=isNaN(t)?NaN:.5,function(){return n});var n}function mn(e){var t,n=e[0],r=e[e.length-1];return n>r&&(t=n,n=r,r=t),function(e){return Math.max(n,Math.min(r,e))}}function vn(e,t,n){var r=e[0],i=e[1],a=t[0],o=t[1];return i<r?(r=gn(i,r),a=n(o,a)):(r=gn(r,i),a=n(a,o)),function(e){return a(r(e))}}function yn(e,t,n){var r=Math.min(e.length,t.length)-1,i=new Array(r),a=new Array(r),o=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++o<r;)i[o]=gn(e[o],e[o+1]),a[o]=n(t[o],t[o+1]);return function(t){var n=C(e,t,1,r)-1;return a[n](i[n](t))}}function bn(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function xn(){var e,t,n,r,i,a,o=hn,s=hn,l=cn,u=pn;function c(){return r=Math.min(o.length,s.length)>2?yn:vn,i=a=null,f}function f(t){return isNaN(t=+t)?n:(i||(i=r(o.map(e),s,l)))(e(u(t)))}return f.invert=function(n){return u(t((a||(a=r(s,o.map(e),an)))(n)))},f.domain=function(e){return arguments.length?(o=dt.call(e,dn),u===pn||(u=mn(o)),c()):o.slice()},f.range=function(e){return arguments.length?(s=ht.call(e),c()):s.slice()},f.rangeRound=function(e){return s=ht.call(e),l=fn,c()},f.clamp=function(e){return arguments.length?(u=e?mn(o):pn,f):u!==pn},f.interpolate=function(e){return arguments.length?(l=e,c()):l},f.unknown=function(e){return arguments.length?(n=e,f):n},function(n,r){return e=n,t=r,c()}}function Sn(e,t){return xn()(e,t)}var wn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function _n(e){if(!(t=wn.exec(e)))throw new Error("invalid format: "+e);var t;return new Cn({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function Cn(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}_n.prototype=Cn.prototype,Cn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var An,Tn,kn,En,Mn=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]},Dn=function(e){return(e=Mn(Math.abs(e)))?e[1]:NaN},In=function(e,t){var n=Mn(e,t);if(!n)return e+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Gn={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return In(100*e,t)},r:In,s:function(e,t){var n=Mn(e,t);if(!n)return e+"";var r=n[0],i=n[1],a=i-(An=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return a===o?r:a>o?r+new Array(a-o+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+Mn(e,Math.max(0,t+a-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}},Nn=function(e){return e},qn=Array.prototype.map,Ln=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];Tn=function(e){var t,n,r=void 0===e.grouping||void 0===e.thousands?Nn:(t=qn.call(e.grouping,Number),n=e.thousands+"",function(e,r){for(var i=e.length,a=[],o=0,s=t[0],l=0;i>0&&s>0&&(l+s+1>r&&(s=Math.max(1,r-l)),a.push(e.substring(i-=s,i+s)),!((l+=s+1)>r));)s=t[o=(o+1)%t.length];return a.reverse().join(n)}),i=void 0===e.currency?"":e.currency[0]+"",a=void 0===e.currency?"":e.currency[1]+"",o=void 0===e.decimal?".":e.decimal+"",s=void 0===e.numerals?Nn:function(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}(qn.call(e.numerals,String)),l=void 0===e.percent?"%":e.percent+"",u=void 0===e.minus?"-":e.minus+"",c=void 0===e.nan?"NaN":e.nan+"";function f(e){var t=(e=_n(e)).fill,n=e.align,f=e.sign,d=e.symbol,h=e.zero,p=e.width,g=e.comma,m=e.precision,v=e.trim,y=e.type;"n"===y?(g=!0,y="g"):Gn[y]||(void 0===m&&(m=12),v=!0,y="g"),(h||"0"===t&&"="===n)&&(h=!0,t="0",n="=");var b="$"===d?i:"#"===d&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",x="$"===d?a:/[%p]/.test(y)?l:"",S=Gn[y],w=/[defgprs%]/.test(y);function _(e){var i,a,l,d=b,_=x;if("c"===y)_=S(e)+_,e="";else{var C=(e=+e)<0;if(e=isNaN(e)?c:S(Math.abs(e),m),v&&(e=function(e){e:for(var t,n=e.length,r=1,i=-1;r<n;++r)switch(e[r]){case".":i=t=r;break;case"0":0===i&&(i=r),t=r;break;default:if(!+e[r])break e;i>0&&(i=0)}return i>0?e.slice(0,i)+e.slice(t+1):e}(e)),C&&0==+e&&(C=!1),d=(C?"("===f?f:u:"-"===f||"("===f?"":f)+d,_=("s"===y?Ln[8+An/3]:"")+_+(C&&"("===f?")":""),w)for(i=-1,a=e.length;++i<a;)if(48>(l=e.charCodeAt(i))||l>57){_=(46===l?o+e.slice(i+1):e.slice(i))+_,e=e.slice(0,i);break}}g&&!h&&(e=r(e,1/0));var A=d.length+e.length+_.length,T=A<p?new Array(p-A+1).join(t):"";switch(g&&h&&(e=r(T+e,T.length?p-_.length:1/0),T=""),n){case"<":e=d+e+_+T;break;case"=":e=d+T+e+_;break;case"^":e=T.slice(0,A=T.length>>1)+d+e+_+T.slice(A);break;default:e=T+d+e+_}return s(e)}return m=void 0===m?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),_.toString=function(){return e+""},_}return{format:f,formatPrefix:function(e,t){var n=f(((e=_n(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(Dn(t)/3))),i=Math.pow(10,-r),a=Ln[8+r/3];return function(e){return n(i*e)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),kn=Tn.format,En=Tn.formatPrefix;var Bn=function(e,t,n,r){var i,a=N(e,t,n);switch((r=_n(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(e),Math.abs(t));return null!=r.precision||isNaN(i=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Dn(t)/3)))-Dn(Math.abs(e)))}(a,o))||(r.precision=i),En(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,Dn(t)-Dn(e))+1}(a,Math.max(Math.abs(e),Math.abs(t))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(e){return Math.max(0,-Dn(Math.abs(e)))}(a))||(r.precision=i-2*("%"===r.type))}return kn(r)};function Rn(e){var t=e.domain;return e.ticks=function(e){var n=t();return I(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return Bn(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var r,i=t(),a=0,o=i.length-1,s=i[a],l=i[o];return l<s&&(r=s,s=l,l=r,r=a,a=o,o=r),(r=G(s,l,n))>0?r=G(s=Math.floor(s/r)*r,l=Math.ceil(l/r)*r,n):r<0&&(r=G(s=Math.ceil(s*r)/r,l=Math.floor(l*r)/r,n)),r>0?(i[a]=Math.floor(s/r)*r,i[o]=Math.ceil(l/r)*r,t(i)):r<0&&(i[a]=Math.ceil(s*r)/r,i[o]=Math.floor(l*r)/r,t(i)),e},e}function Hn(){var e=Sn(pn,pn);return e.copy=function(){return bn(e,Hn())},Ze.apply(e,arguments),Rn(e)}function Pn(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}function jn(e){return e<0?-Math.sqrt(-e):Math.sqrt(e)}function $n(e){return e<0?-e*e:e*e}function Fn(e){var t=e(pn,pn),n=1;function r(){return 1===n?e(pn,pn):.5===n?e(jn,$n):e(Pn(n),Pn(1/n))}return t.exponent=function(e){return arguments.length?(n=+e,r()):n},Rn(t)}function On(){var e=Fn(xn());return e.copy=function(){return bn(e,On()).exponent(e.exponent())},Ze.apply(e,arguments),e}function Un(){return On.apply(null,arguments).exponent(.5)}var Vn=new Date,zn=new Date;function Wn(e,t,n,r){function i(t){return e(t=0===arguments.length?new Date:new Date(+t)),t}return i.floor=function(t){return e(t=new Date(+t)),t},i.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},i.round=function(e){var t=i(e),n=i.ceil(e);return e-t<n-e?t:n},i.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},i.range=function(n,r,a){var o,s=[];if(n=i.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return s;do{s.push(o=new Date(+n)),t(n,a),e(n)}while(o<n&&n<r);return s},i.filter=function(n){return Wn((function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),(function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););}))},n&&(i.count=function(t,r){return Vn.setTime(+t),zn.setTime(+r),e(Vn),e(zn),Math.floor(n(Vn,zn))},i.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?i.filter(r?function(t){return r(t)%e==0}:function(t){return i.count(0,t)%e==0}):i:null}),i}var Yn=Wn((function(e){e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,t){e.setFullYear(e.getFullYear()+t)}),(function(e,t){return t.getFullYear()-e.getFullYear()}),(function(e){return e.getFullYear()}));Yn.every=function(e){return isFinite(e=Math.floor(e))&&e>0?Wn((function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n*e)})):null};var Xn=Yn,Qn=(Yn.range,Wn((function(e){e.setDate(1),e.setHours(0,0,0,0)}),(function(e,t){e.setMonth(e.getMonth()+t)}),(function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())}),(function(e){return e.getMonth()})));Qn.range;function Kn(e){return Wn((function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+7*t)}),(function(e,t){return(t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/6048e5}))}var Zn=Kn(0),Jn=Kn(1),er=Kn(2),tr=Kn(3),nr=Kn(4),rr=Kn(5),ir=Kn(6),ar=(Zn.range,Jn.range,er.range,tr.range,nr.range,rr.range,ir.range,Wn((function(e){e.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+t)}),(function(e,t){return(t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/864e5}),(function(e){return e.getDate()-1}))),or=ar,sr=(ar.range,Wn((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds()-6e4*e.getMinutes())}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getHours()}))),lr=(sr.range,Wn((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds())}),(function(e,t){e.setTime(+e+6e4*t)}),(function(e,t){return(t-e)/6e4}),(function(e){return e.getMinutes()}))),ur=(lr.range,Wn((function(e){e.setTime(e-e.getMilliseconds())}),(function(e,t){e.setTime(+e+1e3*t)}),(function(e,t){return(t-e)/1e3}),(function(e){return e.getUTCSeconds()}))),cr=(ur.range,Wn((function(){}),(function(e,t){e.setTime(+e+t)}),(function(e,t){return t-e})));cr.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?Wn((function(t){t.setTime(Math.floor(t/e)*e)}),(function(t,n){t.setTime(+t+n*e)}),(function(t,n){return(n-t)/e})):cr:null};cr.range;function fr(e){return Wn((function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+7*t)}),(function(e,t){return(t-e)/6048e5}))}var dr=fr(0),hr=fr(1),pr=fr(2),gr=fr(3),mr=fr(4),vr=fr(5),yr=fr(6),br=(dr.range,hr.range,pr.range,gr.range,mr.range,vr.range,yr.range,Wn((function(e){e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+t)}),(function(e,t){return(t-e)/864e5}),(function(e){return e.getUTCDate()-1}))),xr=br,Sr=(br.range,Wn((function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)}),(function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()}),(function(e){return e.getUTCFullYear()})));Sr.every=function(e){return isFinite(e=Math.floor(e))&&e>0?Wn((function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null};var wr=Sr;Sr.range;function _r(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function Cr(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function Ar(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}var Tr,kr={"-":"",_:" ",0:"0"},Er=/^\s*\d+/,Mr=/^%/,Dr=/[\\^$*+?|[\]().{}]/g;function Ir(e,t,n){var r=e<0?"-":"",i=(r?-e:e)+"",a=i.length;return r+(a<n?new Array(n-a+1).join(t)+i:i)}function Gr(e){return e.replace(Dr,"\\$&")}function Nr(e){return new RegExp("^(?:"+e.map(Gr).join("|")+")","i")}function qr(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function Lr(e,t,n){var r=Er.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function Br(e,t,n){var r=Er.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function Rr(e,t,n){var r=Er.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function Hr(e,t,n){var r=Er.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function Pr(e,t,n){var r=Er.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function jr(e,t,n){var r=Er.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function $r(e,t,n){var r=Er.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Fr(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Or(e,t,n){var r=Er.exec(t.slice(n,n+1));return r?(e.q=3*r[0]-3,n+r[0].length):-1}function Ur(e,t,n){var r=Er.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function Vr(e,t,n){var r=Er.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function zr(e,t,n){var r=Er.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function Wr(e,t,n){var r=Er.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function Yr(e,t,n){var r=Er.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function Xr(e,t,n){var r=Er.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function Qr(e,t,n){var r=Er.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function Kr(e,t,n){var r=Er.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Zr(e,t,n){var r=Mr.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function Jr(e,t,n){var r=Er.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function ei(e,t,n){var r=Er.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function ti(e,t){return Ir(e.getDate(),t,2)}function ni(e,t){return Ir(e.getHours(),t,2)}function ri(e,t){return Ir(e.getHours()%12||12,t,2)}function ii(e,t){return Ir(1+or.count(Xn(e),e),t,3)}function ai(e,t){return Ir(e.getMilliseconds(),t,3)}function oi(e,t){return ai(e,t)+"000"}function si(e,t){return Ir(e.getMonth()+1,t,2)}function li(e,t){return Ir(e.getMinutes(),t,2)}function ui(e,t){return Ir(e.getSeconds(),t,2)}function ci(e){var t=e.getDay();return 0===t?7:t}function fi(e,t){return Ir(Zn.count(Xn(e)-1,e),t,2)}function di(e,t){var n=e.getDay();return e=n>=4||0===n?nr(e):nr.ceil(e),Ir(nr.count(Xn(e),e)+(4===Xn(e).getDay()),t,2)}function hi(e){return e.getDay()}function pi(e,t){return Ir(Jn.count(Xn(e)-1,e),t,2)}function gi(e,t){return Ir(e.getFullYear()%100,t,2)}function mi(e,t){return Ir(e.getFullYear()%1e4,t,4)}function vi(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+Ir(t/60|0,"0",2)+Ir(t%60,"0",2)}function yi(e,t){return Ir(e.getUTCDate(),t,2)}function bi(e,t){return Ir(e.getUTCHours(),t,2)}function xi(e,t){return Ir(e.getUTCHours()%12||12,t,2)}function Si(e,t){return Ir(1+xr.count(wr(e),e),t,3)}function wi(e,t){return Ir(e.getUTCMilliseconds(),t,3)}function _i(e,t){return wi(e,t)+"000"}function Ci(e,t){return Ir(e.getUTCMonth()+1,t,2)}function Ai(e,t){return Ir(e.getUTCMinutes(),t,2)}function Ti(e,t){return Ir(e.getUTCSeconds(),t,2)}function ki(e){var t=e.getUTCDay();return 0===t?7:t}function Ei(e,t){return Ir(dr.count(wr(e)-1,e),t,2)}function Mi(e,t){var n=e.getUTCDay();return e=n>=4||0===n?mr(e):mr.ceil(e),Ir(mr.count(wr(e),e)+(4===wr(e).getUTCDay()),t,2)}function Di(e){return e.getUTCDay()}function Ii(e,t){return Ir(hr.count(wr(e)-1,e),t,2)}function Gi(e,t){return Ir(e.getUTCFullYear()%100,t,2)}function Ni(e,t){return Ir(e.getUTCFullYear()%1e4,t,4)}function qi(){return"+0000"}function Li(){return"%"}function Bi(e){return+e}function Ri(e){return Math.floor(+e/1e3)}!function(e){Tr=function(e){var t=e.dateTime,n=e.date,r=e.time,i=e.periods,a=e.days,o=e.shortDays,s=e.months,l=e.shortMonths,u=Nr(i),c=qr(i),f=Nr(a),d=qr(a),h=Nr(o),p=qr(o),g=Nr(s),m=qr(s),v=Nr(l),y=qr(l),b={a:function(e){return o[e.getDay()]},A:function(e){return a[e.getDay()]},b:function(e){return l[e.getMonth()]},B:function(e){return s[e.getMonth()]},c:null,d:ti,e:ti,f:oi,H:ni,I:ri,j:ii,L:ai,m:si,M:li,p:function(e){return i[+(e.getHours()>=12)]},q:function(e){return 1+~~(e.getMonth()/3)},Q:Bi,s:Ri,S:ui,u:ci,U:fi,V:di,w:hi,W:pi,x:null,X:null,y:gi,Y:mi,Z:vi,"%":Li},x={a:function(e){return o[e.getUTCDay()]},A:function(e){return a[e.getUTCDay()]},b:function(e){return l[e.getUTCMonth()]},B:function(e){return s[e.getUTCMonth()]},c:null,d:yi,e:yi,f:_i,H:bi,I:xi,j:Si,L:wi,m:Ci,M:Ai,p:function(e){return i[+(e.getUTCHours()>=12)]},q:function(e){return 1+~~(e.getUTCMonth()/3)},Q:Bi,s:Ri,S:Ti,u:ki,U:Ei,V:Mi,w:Di,W:Ii,x:null,X:null,y:Gi,Y:Ni,Z:qi,"%":Li},S={a:function(e,t,n){var r=h.exec(t.slice(n));return r?(e.w=p[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=f.exec(t.slice(n));return r?(e.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=v.exec(t.slice(n));return r?(e.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=g.exec(t.slice(n));return r?(e.m=m[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return C(e,t,n,r)},d:Vr,e:Vr,f:Kr,H:Wr,I:Wr,j:zr,L:Qr,m:Ur,M:Yr,p:function(e,t,n){var r=u.exec(t.slice(n));return r?(e.p=c[r[0].toLowerCase()],n+r[0].length):-1},q:Or,Q:Jr,s:ei,S:Xr,u:Br,U:Rr,V:Hr,w:Lr,W:Pr,x:function(e,t,r){return C(e,n,t,r)},X:function(e,t,n){return C(e,r,t,n)},y:$r,Y:jr,Z:Fr,"%":Zr};function w(e,t){return function(n){var r,i,a,o=[],s=-1,l=0,u=e.length;for(n instanceof Date||(n=new Date(+n));++s<u;)37===e.charCodeAt(s)&&(o.push(e.slice(l,s)),null!=(i=kr[r=e.charAt(++s)])?r=e.charAt(++s):i="e"===r?" ":"0",(a=t[r])&&(r=a(n,i)),o.push(r),l=s+1);return o.push(e.slice(l,s)),o.join("")}}function _(e,t){return function(n){var r,i,a=Ar(1900,void 0,1);if(C(a,e,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("s"in a)return new Date(1e3*a.s+("L"in a?a.L:0));if(!t||"Z"in a||(a.Z=0),"p"in a&&(a.H=a.H%12+12*a.p),void 0===a.m&&(a.m="q"in a?a.q:0),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=Cr(Ar(a.y,0,1))).getUTCDay(),r=i>4||0===i?hr.ceil(r):hr(r),r=xr.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=_r(Ar(a.y,0,1))).getDay(),r=i>4||0===i?Jn.ceil(r):Jn(r),r=or.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?Cr(Ar(a.y,0,1)).getUTCDay():_r(Ar(a.y,0,1)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,Cr(a)):_r(a)}}function C(e,t,n,r){for(var i,a,o=0,s=t.length,l=n.length;o<s;){if(r>=l)return-1;if(37===(i=t.charCodeAt(o++))){if(i=t.charAt(o++),!(a=S[i in kr?t.charAt(o++):i])||(r=a(e,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return(b.x=w(n,b),b.X=w(r,b),b.c=w(t,b),x.x=w(n,x),x.X=w(r,x),x.c=w(t,x),{format:function(e){var t=w(e+="",b);return t.toString=function(){return e},t},parse:function(e){var t=_(e+="",!1);return t.toString=function(){return e},t},utcFormat:function(e){var t=w(e+="",x);return t.toString=function(){return e},t},utcParse:function(e){var t=_(e+="",!0);return t.toString=function(){return e},t}})}(e),Tr.format,Tr.parse,Tr.utcFormat,Tr.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Hi=Wn((function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCMonth(e.getUTCMonth()+t)}),(function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())}),(function(e){return e.getUTCMonth()})),Pi=(Hi.range,Wn((function(e){e.setUTCMinutes(0,0,0)}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getUTCHours()}))),ji=(Pi.range,Wn((function(e){e.setUTCSeconds(0,0)}),(function(e,t){e.setTime(+e+6e4*t)}),(function(e,t){return(t-e)/6e4}),(function(e){return e.getUTCMinutes()})));ji.range;function $i(){var e,t,n,r,i,a=0,o=1,s=pn,l=!1;function u(t){return isNaN(t=+t)?i:s(0===n?.5:(t=(r(t)-e)*n,l?Math.max(0,Math.min(1,t)):t))}return u.domain=function(i){return arguments.length?(e=r(a=+i[0]),t=r(o=+i[1]),n=e===t?0:1/(t-e),u):[a,o]},u.clamp=function(e){return arguments.length?(l=!!e,u):l},u.interpolator=function(e){return arguments.length?(s=e,u):s},u.unknown=function(e){return arguments.length?(i=e,u):i},function(i){return r=i,e=i(a),t=i(o),n=e===t?0:1/(t-e),u}}function Fi(e,t){return t.domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown())}var Oi=function(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n},Ui=function(e){return Jt(e[e.length-1])},Vi=Ui(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Oi)),zi=Ui(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Oi)),Wi=Ui(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Oi)),Yi=Ui(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Oi)),Xi=Ui(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Oi)),Qi=Ui(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Oi)),Ki=Ui(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Oi)),Zi=Ui(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Oi)),Ji=Ui(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Oi)),ea=Ui(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Oi)),ta=Ui(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Oi)),na=Ui(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Oi)),ra=Ui(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Oi)),ia=Ui(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Oi)),aa=Ui(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Oi));function oa(e,t="YlGnBu",n,r,i=!1){e=e.filter(e=>isFinite(e)),r=void 0===r?q(e):r,n=void 0===n?L(e):n;const a=function e(){var t=Rn($i()(pn));return t.copy=function(){return Fi(t,e())},Je.apply(t,arguments)}(function(e){const t={BuGn:Vi,OrRd:zi,PuBu:Wi,YlGnBu:Yi,Blues:Xi,Oranges:Qi,Greens:Ki,Purples:Zi,Reds:Ji,Greys:ea,Grays:ea,RdBu:ta,RdGy:na,PiYG:ra,PuOr:ia,RdYlBu:aa};if(!t.hasOwnProperty(e)){const t="Unrecognized color: "+e;throw alert(t),t}return t[e]}(t));return i?a.domain([r,n]):a.domain([n,r]),a}function sa(e,t,n,r,i,a=10,o=10,s={h:10,w:40},l="h",u=!1){let c=[];if(u){let e=[...Array(a+1).keys()],t=n.domain()[1]/a;c=e.map(e=>e*t),c=c.concat(e.filter(e=>0!=e).map(e=>0-e*t)).sort((e,t)=>e<t?-1:e>t?1:e>=t?0:NaN)}else{let e=[...Array(a+1).keys()],t=n.domain()[1]/a;c=e.map(e=>e*t)}const f=t.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(c).enter().append("g").classed("legend",!0);"h"==l?(t.append("text").attr("class","color-legend").text(e).attr("x",-10).attr("text-anchor","end").attr("y",s.h).attr("transform",`translate(${r.x}, ${r.y})`),f.append("rect").attr("x",(e,t)=>s.w*t).attr("y",5).attr("width",s.w).attr("height",s.h).style("fill",n),f.append("text").attr("class","color-legend").text(e=>i?(Math.pow(o,e)-1).toPrecision(2):e.toPrecision(2)).attr("x",(e,t)=>s.w*t).attr("y",0).style("font-size",10)):(t.append("text").attr("class","color-legend").text(e).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+s.h*c.length})rotate(90)`),f.append("rect").attr("x",0).attr("y",(e,t)=>s.h*t).attr("width",s.w).attr("height",s.h).style("fill",n),f.append("text").attr("class","color-legend").text(e=>i?(Math.pow(o,e)-1).toPrecision(2):e.toPrecision(2)).attr("x",15).attr("y",(e,t)=>s.h*t+s.h/2))}var la=n(7);function ua(e){for(var t="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var i=n[r].cssRules,a=0;a<i.length;a++){var o=i[a];if(void 0!==o.style){var s,l=void 0===o.selectorText?o.selectorText:o.selectorText.replace(`#${e[0].id} `,"");try{s=Qe()(e).find(l)}catch(e){s=[]}s.length>0&&(t+=o.selectorText+" { "+o.style.cssText+" }\n")}}}catch(e){if("SecurityError"!==e.name)throw e;continue}var u=document.createElement("style");return u.setAttribute("type","text/css"),u.innerHTML="<![CDATA[\n"+t+"\n]]>",u}class ca{constructor(e,t,n=!1){Qe()(`#${e}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=Qe()("<div/>").addClass(r).appendTo(`#${e}`),this.buttons={},this.tooltip=t}createDownloadSvgButton(e,t,n,r,i="fa-download"){this.createButton(e,i),We(`#${e}`).on("click",()=>{this.downloadSvg(t,n,r)}).on("mouseover",()=>{this.tooltip.show("Download the plot")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(e,t,n="fa-expand-arrows-alt"){this.createButton(e,n),We(`#${e}`).on("click",t).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(e,t="fa-download",n="need to define",r){const i=Qe()("<a/>").attr("id",e).addClass("btn btn-default btn-light btn-sm").appendTo(this.bar);return t.startsWith("fa-")?Qe()("<i/>").addClass(`fa ${t}`).appendTo(i):i.text(t),this.buttons[e]=i,"foo"!=e&&We(`#${e}`).on("click",()=>{void 0===r?alert("need to define the click event"):r()}).on("mouseover",()=>{this.tooltip.show(n)}).on("mouseout",()=>{this.tooltip.hide()}),i}attachTooltip(e){this.tooltip=e}downloadSvg(e,t,n){console.log(e,t,n);let r=Qe()(Qe()(Qe()(`${"#"+e}`))[0]),i=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),a=ua(r.get());i.prepend(a),Qe()("#"+n).html("").hide();let o=Qe()(`#${n}`).append(i).html(),s=new Blob([o],{type:"image/svg+xml"});Object(la.saveAs)(s,t),Qe()(`#${n}`).html("").hide()}}var fa=Array.prototype.slice,da=function(e){return e};function ha(e){return"translate("+(e+.5)+",0)"}function pa(e){return"translate(0,"+(e+.5)+")"}function ga(e){return function(t){return+e(t)}}function ma(e){var t=Math.max(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}function va(){return!this.__axis}function ya(e,t){var n=[],r=null,i=null,a=6,o=6,s=3,l=1===e||4===e?-1:1,u=4===e||2===e?"x":"y",c=1===e||3===e?ha:pa;function f(f){var d=null==r?t.ticks?t.ticks.apply(t,n):t.domain():r,h=null==i?t.tickFormat?t.tickFormat.apply(t,n):da:i,p=Math.max(a,0)+s,g=t.range(),m=+g[0]+.5,v=+g[g.length-1]+.5,y=(t.bandwidth?ma:ga)(t.copy()),b=f.selection?f.selection():f,x=b.selectAll(".domain").data([null]),S=b.selectAll(".tick").data(d,t).order(),w=S.exit(),_=S.enter().append("g").attr("class","tick"),C=S.select("line"),A=S.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),S=S.merge(_),C=C.merge(_.append("line").attr("stroke","currentColor").attr(u+"2",l*a)),A=A.merge(_.append("text").attr("fill","currentColor").attr(u,l*p).attr("dy",1===e?"0em":3===e?"0.71em":"0.32em")),f!==b&&(x=x.transition(f),S=S.transition(f),C=C.transition(f),A=A.transition(f),w=w.transition(f).attr("opacity",1e-6).attr("transform",(function(e){return isFinite(e=y(e))?c(e):this.getAttribute("transform")})),_.attr("opacity",1e-6).attr("transform",(function(e){var t=this.parentNode.__axis;return c(t&&isFinite(t=t(e))?t:y(e))}))),w.remove(),x.attr("d",4===e||2==e?o?"M"+l*o+","+m+"H0.5V"+v+"H"+l*o:"M0.5,"+m+"V"+v:o?"M"+m+","+l*o+"V0.5H"+v+"V"+l*o:"M"+m+",0.5H"+v),S.attr("opacity",1).attr("transform",(function(e){return c(y(e))})),C.attr(u+"2",l*a),A.attr(u,l*p).text(h),b.filter(va).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===e?"start":4===e?"end":"middle"),b.each((function(){this.__axis=y}))}return f.scale=function(e){return arguments.length?(t=e,f):t},f.ticks=function(){return n=fa.call(arguments),f},f.tickArguments=function(e){return arguments.length?(n=null==e?[]:fa.call(e),f):n.slice()},f.tickValues=function(e){return arguments.length?(r=null==e?null:fa.call(e),f):r&&r.slice()},f.tickFormat=function(e){return arguments.length?(i=e,f):i},f.tickSize=function(e){return arguments.length?(a=o=+e,f):a},f.tickSizeInner=function(e){return arguments.length?(a=+e,f):a},f.tickSizeOuter=function(e){return arguments.length?(o=+e,f):o},f.tickPadding=function(e){return arguments.length?(s=+e,f):s},f}function ba(e){return ya(1,e)}function xa(e){return ya(2,e)}function Sa(e){return ya(3,e)}function wa(e){return ya(4,e)}var _a={value:function(){}};function Ca(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new Aa(r)}function Aa(e){this._=e}function Ta(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}function ka(e,t){for(var n,r=0,i=e.length;r<i;++r)if((n=e[r]).name===t)return n.value}function Ea(e,t,n){for(var r=0,i=e.length;r<i;++r)if(e[r].name===t){e[r]=_a,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}Aa.prototype=Ca.prototype={constructor:Aa,on:function(e,t){var n,r=this._,i=Ta(e+"",r),a=-1,o=i.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++a<o;)if(n=(e=i[a]).type)r[n]=Ea(r[n],e.name,t);else if(null==t)for(n in r)r[n]=Ea(r[n],e.name,null);return this}for(;++a<o;)if((n=(e=i[a]).type)&&(n=ka(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new Aa(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),a=0;a<n;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(a=0,n=(r=this._[e]).length;a<n;++a)r[a].value.apply(t,i)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],i=0,a=r.length;i<a;++i)r[i].value.apply(t,n)}};var Ma=Ca;var Da=function(){Ne.preventDefault(),Ne.stopImmediatePropagation()},Ia=function(e){var t=e.document.documentElement,n=We(e).on("dragstart.drag",Da,!0);"onselectstart"in t?n.on("selectstart.drag",Da,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")};function Ga(e,t){var n=e.document.documentElement,r=We(e).on("dragstart.drag",null);t&&(r.on("click.drag",Da,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var Na,qa,La=function(){for(var e,t=Ne;e=t.sourceEvent;)t=e;return t},Ba=function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var i=e.getBoundingClientRect();return[t.clientX-i.left-e.clientLeft,t.clientY-i.top-e.clientTop]},Ra=function(e,t,n){arguments.length<3&&(n=t,t=La().changedTouches);for(var r,i=0,a=t?t.length:0;i<a;++i)if((r=t[i]).identifier===n)return Ba(e,r);return null},Ha=function(e){var t=La();return t.changedTouches&&(t=t.changedTouches[0]),Ba(e,t)},Pa=0,ja=0,$a=0,Fa=0,Oa=0,Ua=0,Va="object"==typeof performance&&performance.now?performance:Date,za="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function Wa(){return Oa||(za(Ya),Oa=Va.now()+Ua)}function Ya(){Oa=0}function Xa(){this._call=this._time=this._next=null}function Qa(e,t,n){var r=new Xa;return r.restart(e,t,n),r}function Ka(){Oa=(Fa=Va.now())+Ua,Pa=ja=0;try{!function(){Wa(),++Pa;for(var e,t=Na;t;)(e=Oa-t._time)>=0&&t._call.call(null,e),t=t._next;--Pa}()}finally{Pa=0,function(){var e,t,n=Na,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:Na=t);qa=e,Ja(r)}(),Oa=0}}function Za(){var e=Va.now(),t=e-Fa;t>1e3&&(Ua-=t,Fa=e)}function Ja(e){Pa||(ja&&(ja=clearTimeout(ja)),e-Oa>24?(e<1/0&&(ja=setTimeout(Ka,e-Va.now()-Ua)),$a&&($a=clearInterval($a))):($a||(Fa=Va.now(),$a=setInterval(Za,1e3)),Pa=1,za(Ka)))}Xa.prototype=Qa.prototype={constructor:Xa,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?Wa():+n)+(null==t?0:+t),this._next||qa===this||(qa?qa._next=this:Na=this,qa=this),this._call=e,this._time=n,Ja()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ja())}};var eo=function(e,t,n){var r=new Xa;return t=null==t?0:+t,r.restart((function(n){r.stop(),e(n+t)}),t,n),r},to=Ma("start","end","cancel","interrupt"),no=[],ro=function(e,t,n,r,i,a){var o=e.__transition;if(o){if(n in o)return}else e.__transition={};!function(e,t,n){var r,i=e.__transition;function a(l){var u,c,f,d;if(1!==n.state)return s();for(u in i)if((d=i[u]).name===n.name){if(3===d.state)return eo(a);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete i[u]):+u<t&&(d.state=6,d.timer.stop(),d.on.call("cancel",e,e.__data__,d.index,d.group),delete i[u])}if(eo((function(){3===n.state&&(n.state=4,n.timer.restart(o,n.delay,n.time),o(l))})),n.state=2,n.on.call("start",e,e.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),u=0,c=-1;u<f;++u)(d=n.tween[u].value.call(e,e.__data__,n.index,n.group))&&(r[++c]=d);r.length=c+1}}function o(t){for(var i=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(s),n.state=5,1),a=-1,o=r.length;++a<o;)r[a].call(e,i);5===n.state&&(n.on.call("end",e,e.__data__,n.index,n.group),s())}function s(){for(var r in n.state=6,n.timer.stop(),delete i[t],i)return;delete e.__transition}i[t]=n,n.timer=Qa((function(e){n.state=1,n.timer.restart(a,n.delay,n.time),n.delay<=e&&a(e-n.delay)}),0,n.time)}(e,n,{name:t,index:r,group:i,on:to,tween:no,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:0})};function io(e,t){var n=oo(e,t);if(n.state>0)throw new Error("too late; already scheduled");return n}function ao(e,t){var n=oo(e,t);if(n.state>3)throw new Error("too late; already running");return n}function oo(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}var so,lo,uo,co,fo=function(e,t){var n,r,i,a=e.__transition,o=!0;if(a){for(i in t=null==t?null:t+"",a)(n=a[i]).name===t?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete a[i]):o=!1;o&&delete e.__transition}},ho=180/Math.PI,po={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},go=function(e,t,n,r,i,a){var o,s,l;return(o=Math.sqrt(e*e+t*t))&&(e/=o,t/=o),(l=e*n+t*r)&&(n-=e*l,r-=t*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),e*r<t*n&&(e=-e,t=-t,l=-l,o=-o),{translateX:i,translateY:a,rotate:Math.atan2(t,e)*ho,skewX:Math.atan(l)*ho,scaleX:o,scaleY:s}};function mo(e,t,n,r){function i(e){return e.length?e.pop()+" ":""}return function(a,o){var s=[],l=[];return a=e(a),o=e(o),function(e,r,i,a,o,s){if(e!==i||r!==a){var l=o.push("translate(",null,t,null,n);s.push({i:l-4,x:an(e,i)},{i:l-2,x:an(r,a)})}else(i||a)&&o.push("translate("+i+t+a+n)}(a.translateX,a.translateY,o.translateX,o.translateY,s,l),function(e,t,n,a){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),a.push({i:n.push(i(n)+"rotate(",null,r)-2,x:an(e,t)})):t&&n.push(i(n)+"rotate("+t+r)}(a.rotate,o.rotate,s,l),function(e,t,n,a){e!==t?a.push({i:n.push(i(n)+"skewX(",null,r)-2,x:an(e,t)}):t&&n.push(i(n)+"skewX("+t+r)}(a.skewX,o.skewX,s,l),function(e,t,n,r,a,o){if(e!==n||t!==r){var s=a.push(i(a)+"scale(",null,",",null,")");o.push({i:s-4,x:an(e,n)},{i:s-2,x:an(t,r)})}else 1===n&&1===r||a.push(i(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,s,l),a=o=null,function(e){for(var t,n=-1,r=l.length;++n<r;)s[(t=l[n]).i]=t.x(e);return s.join("")}}}var vo=mo((function(e){return"none"===e?po:(so||(so=document.createElement("DIV"),lo=document.documentElement,uo=document.defaultView),so.style.transform=e,e=uo.getComputedStyle(lo.appendChild(so),null).getPropertyValue("transform"),lo.removeChild(so),e=e.slice(7,-1).split(","),go(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))}),"px, ","px)","deg)"),yo=mo((function(e){return null==e?po:(co||(co=document.createElementNS("http://www.w3.org/2000/svg","g")),co.setAttribute("transform",e),(e=co.transform.baseVal.consolidate())?(e=e.matrix,go(e.a,e.b,e.c,e.d,e.e,e.f)):po)}),", ",")",")");function bo(e,t){var n,r;return function(){var i=ao(this,e),a=i.tween;if(a!==n)for(var o=0,s=(r=n=a).length;o<s;++o)if(r[o].name===t){(r=r.slice()).splice(o,1);break}i.tween=r}}function xo(e,t,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var a=ao(this,e),o=a.tween;if(o!==r){i=(r=o).slice();for(var s={name:t,value:n},l=0,u=i.length;l<u;++l)if(i[l].name===t){i[l]=s;break}l===u&&i.push(s)}a.tween=i}}function So(e,t,n){var r=e._id;return e.each((function(){var e=ao(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return oo(e,r).value[t]}}var wo=function(e,t){var n;return("number"==typeof t?an:t instanceof Nt?Kt:(n=Nt(t))?(t=n,Kt):un)(e,t)};function _o(e){return function(){this.removeAttribute(e)}}function Co(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Ao(e,t,n){var r,i,a=n+"";return function(){var o=this.getAttribute(e);return o===a?null:o===r?i:i=t(r=o,n)}}function To(e,t,n){var r,i,a=n+"";return function(){var o=this.getAttributeNS(e.space,e.local);return o===a?null:o===r?i:i=t(r=o,n)}}function ko(e,t,n){var r,i,a;return function(){var o,s,l=n(this);if(null!=l)return(o=this.getAttribute(e))===(s=l+"")?null:o===r&&s===i?a:(i=s,a=t(r=o,l));this.removeAttribute(e)}}function Eo(e,t,n){var r,i,a;return function(){var o,s,l=n(this);if(null!=l)return(o=this.getAttributeNS(e.space,e.local))===(s=l+"")?null:o===r&&s===i?a:(i=s,a=t(r=o,l));this.removeAttributeNS(e.space,e.local)}}function Mo(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}function Do(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}function Io(e,t){var n,r;function i(){var i=t.apply(this,arguments);return i!==r&&(n=(r=i)&&Do(e,i)),n}return i._value=t,i}function Go(e,t){var n,r;function i(){var i=t.apply(this,arguments);return i!==r&&(n=(r=i)&&Mo(e,i)),n}return i._value=t,i}function No(e,t){return function(){io(this,e).delay=+t.apply(this,arguments)}}function qo(e,t){return t=+t,function(){io(this,e).delay=t}}function Lo(e,t){return function(){ao(this,e).duration=+t.apply(this,arguments)}}function Bo(e,t){return t=+t,function(){ao(this,e).duration=t}}function Ro(e,t){if("function"!=typeof t)throw new Error;return function(){ao(this,e).ease=t}}function Ho(e,t,n){var r,i,a=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?io:ao;return function(){var o=a(this,e),s=o.on;s!==r&&(i=(r=s).copy()).on(t,n),o.on=i}}var Po=ze.prototype.constructor;function jo(e){return function(){this.style.removeProperty(e)}}function $o(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}function Fo(e,t,n){var r,i;function a(){var a=t.apply(this,arguments);return a!==i&&(r=(i=a)&&$o(e,a,n)),r}return a._value=t,a}function Oo(e){return function(t){this.textContent=e.call(this,t)}}function Uo(e){var t,n;function r(){var r=e.apply(this,arguments);return r!==n&&(t=(n=r)&&Oo(r)),t}return r._value=e,r}var Vo=0;function zo(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function Wo(){return++Vo}var Yo=ze.prototype;zo.prototype=function(e){return ze().transition(e)}.prototype={constructor:zo,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=R(e));for(var r=this._groups,i=r.length,a=new Array(i),o=0;o<i;++o)for(var s,l,u=r[o],c=u.length,f=a[o]=new Array(c),d=0;d<c;++d)(s=u[d])&&(l=e.call(s,s.__data__,d,u))&&("__data__"in s&&(l.__data__=s.__data__),f[d]=l,ro(f[d],t,n,d,f,oo(s,n)));return new zo(a,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=P(e));for(var r=this._groups,i=r.length,a=[],o=[],s=0;s<i;++s)for(var l,u=r[s],c=u.length,f=0;f<c;++f)if(l=u[f]){for(var d,h=e.call(l,l.__data__,f,u),p=oo(l,n),g=0,m=h.length;g<m;++g)(d=h[g])&&ro(d,t,n,g,h,p);a.push(h),o.push(l)}return new zo(a,o,t,n)},filter:function(e){"function"!=typeof e&&(e=j(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var a,o=t[i],s=o.length,l=r[i]=[],u=0;u<s;++u)(a=o[u])&&e.call(a,a.__data__,u,o)&&l.push(a);return new zo(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,i=n.length,a=Math.min(r,i),o=new Array(r),s=0;s<a;++s)for(var l,u=t[s],c=n[s],f=u.length,d=o[s]=new Array(f),h=0;h<f;++h)(l=u[h]||c[h])&&(d[h]=l);for(;s<r;++s)o[s]=t[s];return new zo(o,this._parents,this._name,this._id)},selection:function(){return new Po(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=Wo(),r=this._groups,i=r.length,a=0;a<i;++a)for(var o,s=r[a],l=s.length,u=0;u<l;++u)if(o=s[u]){var c=oo(o,t);ro(o,e,n,u,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new zo(r,this._parents,e,n)},call:Yo.call,nodes:Yo.nodes,node:Yo.node,size:Yo.size,empty:Yo.empty,each:Yo.each,on:function(e,t){var n=this._id;return arguments.length<2?oo(this.node(),n).on.on(e):this.each(Ho(n,e,t))},attr:function(e,t){var n=Y(e),r="transform"===n?yo:wo;return this.attrTween(e,"function"==typeof t?(n.local?Eo:ko)(n,r,So(this,"attr."+e,t)):null==t?(n.local?Co:_o)(n):(n.local?To:Ao)(n,r,t))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=Y(e);return this.tween(n,(r.local?Io:Go)(r,t))},style:function(e,t,n){var r="transform"==(e+="")?vo:wo;return null==t?this.styleTween(e,function(e,t){var n,r,i;return function(){var a=ae(this,e),o=(this.style.removeProperty(e),ae(this,e));return a===o?null:a===n&&o===r?i:i=t(n=a,r=o)}}(e,r)).on("end.style."+e,jo(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,i,a;return function(){var o=ae(this,e),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(e),l=s=ae(this,e)),o===l?null:o===r&&l===i?a:(i=l,a=t(r=o,s))}}(e,r,So(this,"style."+e,t))).each(function(e,t){var n,r,i,a,o="style."+t,s="end."+o;return function(){var l=ao(this,e),u=l.on,c=null==l.value[o]?a||(a=jo(t)):void 0;u===n&&i===c||(r=(n=u).copy()).on(s,i=c),l.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,i,a=n+"";return function(){var o=ae(this,e);return o===a?null:o===r?i:i=t(r=o,n)}}(e,r,t),n).on("end.style."+e,null)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,Fo(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(So(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},textTween:function(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,Uo(e))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,i=oo(this.node(),n).tween,a=0,o=i.length;a<o;++a)if((r=i[a]).name===e)return r.value;return null}return this.each((null==t?bo:xo)(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?No:qo)(t,e)):oo(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Lo:Bo)(t,e)):oo(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(Ro(t,e)):oo(this.node(),t).ease},end:function(){var e,t,n=this,r=n._id,i=n.size();return new Promise((function(a,o){var s={value:o},l={value:function(){0==--i&&a()}};n.each((function(){var n=ao(this,r),i=n.on;i!==e&&((t=(e=i).copy())._.cancel.push(s),t._.interrupt.push(s),t._.end.push(l)),n.on=t}))}))}};var Xo={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function Qo(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return Xo.time=Wa(),Xo;return n}ze.prototype.interrupt=function(e){return this.each((function(){fo(this,e)}))},ze.prototype.transition=function(e){var t,n;e instanceof zo?(t=e._id,e=e._name):(t=Wo(),(n=Xo).time=Wa(),e=null==e?null:e+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var o,s=r[a],l=s.length,u=0;u<l;++u)(o=s[u])&&ro(o,e,t,u,s,n||Qo(o,t));return new zo(r,this._parents,e,t)};var Ko=function(e){return function(){return e}},Zo=function(e,t,n){this.target=e,this.type=t,this.selection=n};function Jo(){Ne.stopImmediatePropagation()}var es=function(){Ne.preventDefault(),Ne.stopImmediatePropagation()},ts={name:"drag"},ns={name:"space"},rs={name:"handle"},is={name:"center"};function as(e){return[+e[0],+e[1]]}function os(e){return[as(e[0]),as(e[1])]}function ss(e){return function(t){return Ra(t,Ne.touches,e)}}var ls={name:"x",handles:["w","e"].map(gs),input:function(e,t){return null==e?null:[[+e[0],t[0][1]],[+e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},us={name:"y",handles:["n","s"].map(gs),input:function(e,t){return null==e?null:[[t[0][0],+e[0]],[t[1][0],+e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},cs=(["n","w","e","s","nw","ne","sw","se"].map(gs),{overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"}),fs={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},ds={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},hs={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},ps={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function gs(e){return{type:e}}function ms(){return!Ne.ctrlKey&&!Ne.button}function vs(){var e=this.ownerSVGElement||this;return e.hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function ys(){return navigator.maxTouchPoints||"ontouchstart"in this}function bs(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function xs(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}function Ss(){return ws(ls)}function ws(e){var t,n=vs,r=ms,i=ys,a=!0,o=Ma("start","brush","end"),s=6;function l(t){var n=t.property("__brush",g).selectAll(".overlay").data([gs("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",cs.overlay).merge(n).each((function(){var e=bs(this).extent;We(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])})),t.selectAll(".selection").data([gs("selection")]).enter().append("rect").attr("class","selection").attr("cursor",cs.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=t.selectAll(".handle").data(e.handles,(function(e){return e.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(e){return"handle handle--"+e.type})).attr("cursor",(function(e){return cs[e.type]})),t.each(u).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",d).filter(i).on("touchstart.brush",d).on("touchmove.brush",h).on("touchend.brush touchcancel.brush",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function u(){var e=We(this),t=bs(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",(function(e){return"e"===e.type[e.type.length-1]?t[1][0]-s/2:t[0][0]-s/2})).attr("y",(function(e){return"s"===e.type[0]?t[1][1]-s/2:t[0][1]-s/2})).attr("width",(function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+s:s})).attr("height",(function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+s:s}))):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(e,t,n){return!n&&e.__brush.emitter||new f(e,t)}function f(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function d(){if((!t||Ne.touches)&&r.apply(this,arguments)){var n,i,o,s,l,f,d,h,p,g,m,v=this,y=Ne.target.__data__.type,b="selection"===(a&&Ne.metaKey?y="overlay":y)?ts:a&&Ne.altKey?is:rs,x=e===us?null:hs[y],S=e===ls?null:ps[y],w=bs(v),_=w.extent,C=w.selection,A=_[0][0],T=_[0][1],k=_[1][0],E=_[1][1],M=0,D=0,I=x&&S&&a&&Ne.shiftKey,G=Ne.touches?ss(Ne.changedTouches[0].identifier):Ha,N=G(v),q=N,L=c(v,arguments,!0).beforestart();"overlay"===y?(C&&(p=!0),w.selection=C=[[n=e===us?A:N[0],o=e===ls?T:N[1]],[l=e===us?k:n,d=e===ls?E:o]]):(n=C[0][0],o=C[0][1],l=C[1][0],d=C[1][1]),i=n,s=o,f=l,h=d;var B=We(v).attr("pointer-events","none"),R=B.selectAll(".overlay").attr("cursor",cs[y]);if(Ne.touches)L.moved=P,L.ended=$;else{var H=We(Ne.view).on("mousemove.brush",P,!0).on("mouseup.brush",$,!0);a&&H.on("keydown.brush",F,!0).on("keyup.brush",O,!0),Ia(Ne.view)}Jo(),fo(v),u.call(v),L.start()}function P(){var e=G(v);!I||g||m||(Math.abs(e[0]-q[0])>Math.abs(e[1]-q[1])?m=!0:g=!0),q=e,p=!0,es(),j()}function j(){var e;switch(M=q[0]-N[0],D=q[1]-N[1],b){case ns:case ts:x&&(M=Math.max(A-n,Math.min(k-l,M)),i=n+M,f=l+M),S&&(D=Math.max(T-o,Math.min(E-d,D)),s=o+D,h=d+D);break;case rs:x<0?(M=Math.max(A-n,Math.min(k-n,M)),i=n+M,f=l):x>0&&(M=Math.max(A-l,Math.min(k-l,M)),i=n,f=l+M),S<0?(D=Math.max(T-o,Math.min(E-o,D)),s=o+D,h=d):S>0&&(D=Math.max(T-d,Math.min(E-d,D)),s=o,h=d+D);break;case is:x&&(i=Math.max(A,Math.min(k,n-M*x)),f=Math.max(A,Math.min(k,l+M*x))),S&&(s=Math.max(T,Math.min(E,o-D*S)),h=Math.max(T,Math.min(E,d+D*S)))}f<i&&(x*=-1,e=n,n=l,l=e,e=i,i=f,f=e,y in fs&&R.attr("cursor",cs[y=fs[y]])),h<s&&(S*=-1,e=o,o=d,d=e,e=s,s=h,h=e,y in ds&&R.attr("cursor",cs[y=ds[y]])),w.selection&&(C=w.selection),g&&(i=C[0][0],f=C[1][0]),m&&(s=C[0][1],h=C[1][1]),C[0][0]===i&&C[0][1]===s&&C[1][0]===f&&C[1][1]===h||(w.selection=[[i,s],[f,h]],u.call(v),L.brush())}function $(){if(Jo(),Ne.touches){if(Ne.touches.length)return;t&&clearTimeout(t),t=setTimeout((function(){t=null}),500)}else Ga(Ne.view,p),H.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);B.attr("pointer-events","all"),R.attr("cursor",cs.overlay),w.selection&&(C=w.selection),xs(C)&&(w.selection=null,u.call(v)),L.end()}function F(){switch(Ne.keyCode){case 16:I=x&&S;break;case 18:b===rs&&(x&&(l=f-M*x,n=i+M*x),S&&(d=h-D*S,o=s+D*S),b=is,j());break;case 32:b!==rs&&b!==is||(x<0?l=f-M:x>0&&(n=i-M),S<0?d=h-D:S>0&&(o=s-D),b=ns,R.attr("cursor",cs.selection),j());break;default:return}es()}function O(){switch(Ne.keyCode){case 16:I&&(g=m=I=!1,j());break;case 18:b===is&&(x<0?l=f:x>0&&(n=i),S<0?d=h:S>0&&(o=s),b=rs,j());break;case 32:b===ns&&(Ne.altKey?(x&&(l=f-M*x,n=i+M*x),S&&(d=h-D*S,o=s+D*S),b=is):(x<0?l=f:x>0&&(n=i),S<0?d=h:S>0&&(o=s),b=rs),R.attr("cursor",cs[y]),j());break;default:return}es()}}function h(){c(this,arguments).moved()}function p(){c(this,arguments).ended()}function g(){var t=this.__brush||{selection:null};return t.extent=os(n.apply(this,arguments)),t.dim=e,t}return l.move=function(t,n){t.selection?t.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var t=this,r=t.__brush,i=c(t,arguments),a=r.selection,o=e.input("function"==typeof n?n.apply(this,arguments):n,r.extent),s=cn(a,o);function l(e){r.selection=1===e&&null===o?null:s(e),u.call(t),i.brush()}return null!==a&&null!==o?l:l(1)})):t.each((function(){var t=this,r=arguments,i=t.__brush,a=e.input("function"==typeof n?n.apply(t,r):n,i.extent),o=c(t,r).beforestart();fo(t),i.selection=null===a?null:a,u.call(t),o.start().brush().end()}))},l.clear=function(e){l.move(e,null)},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){Pe(new Zo(l,t,e.output(this.state.selection)),o.apply,o,[t,this.that,this.args])}},l.extent=function(e){return arguments.length?(n="function"==typeof e?e:Ko(os(e)),l):n},l.filter=function(e){return arguments.length?(r="function"==typeof e?e:Ko(!!e),l):r},l.touchable=function(e){return arguments.length?(i="function"==typeof e?e:Ko(!!e),l):i},l.handleSize=function(e){return arguments.length?(s=+e,l):s},l.keyModifiers=function(e){return arguments.length?(a=!!e,l):a},l.on=function(){var e=o.on.apply(o,arguments);return e===o?l:e},l}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var _s=Math.PI,Cs=2*_s,As=Cs-1e-6;function Ts(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ks(){return new Ts}Ts.prototype=ks.prototype={constructor:Ts,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,i,a){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(e,t,n,r,i){e=+e,t=+t,n=+n,r=+r,i=+i;var a=this._x1,o=this._y1,s=n-e,l=r-t,u=a-e,c=o-t,f=u*u+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(f>1e-6)if(Math.abs(c*s-l*u)>1e-6&&i){var d=n-a,h=r-o,p=s*s+l*l,g=d*d+h*h,m=Math.sqrt(p),v=Math.sqrt(f),y=i*Math.tan((_s-Math.acos((p+f-g)/(2*m*v)))/2),b=y/v,x=y/m;Math.abs(b-1)>1e-6&&(this._+="L"+(e+b*u)+","+(t+b*c)),this._+="A"+i+","+i+",0,0,"+ +(c*d>u*h)+","+(this._x1=e+x*s)+","+(this._y1=t+x*l)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,r,i,a){e=+e,t=+t,a=!!a;var o=(n=+n)*Math.cos(r),s=n*Math.sin(r),l=e+o,u=t+s,c=1^a,f=a?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+u:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+l+","+u),n&&(f<0&&(f=f%Cs+Cs),f>As?this._+="A"+n+","+n+",0,1,"+c+","+(e-o)+","+(t-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=l)+","+(this._y1=u):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=_s)+","+c+","+(this._x1=e+n*Math.cos(i))+","+(this._y1=t+n*Math.sin(i))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};Array.prototype.slice;function Es(e,t,n,r){if(isNaN(t)||isNaN(n))return e;var i,a,o,s,l,u,c,f,d,h=e._root,p={data:r},g=e._x0,m=e._y0,v=e._x1,y=e._y1;if(!h)return e._root=p,e;for(;h.length;)if((u=t>=(a=(g+v)/2))?g=a:v=a,(c=n>=(o=(m+y)/2))?m=o:y=o,i=h,!(h=h[f=c<<1|u]))return i[f]=p,e;if(s=+e._x.call(null,h.data),l=+e._y.call(null,h.data),t===s&&n===l)return p.next=h,i?i[f]=p:e._root=p,e;do{i=i?i[f]=new Array(4):e._root=new Array(4),(u=t>=(a=(g+v)/2))?g=a:v=a,(c=n>=(o=(m+y)/2))?m=o:y=o}while((f=c<<1|u)==(d=(l>=o)<<1|s>=a));return i[d]=h,i[f]=p,e}var Ms=function(e,t,n,r,i){this.node=e,this.x0=t,this.y0=n,this.x1=r,this.y1=i};function Ds(e){return e[0]}function Is(e){return e[1]}function Gs(e,t,n){var r=new Ns(null==t?Ds:t,null==n?Is:n,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function Ns(e,t,n,r,i,a){this._x=e,this._y=t,this._x0=n,this._y0=r,this._x1=i,this._y1=a,this._root=void 0}function qs(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}var Ls=Gs.prototype=Ns.prototype;Ls.copy=function(){var e,t,n=new Ns(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=qs(r),n;for(e=[{source:r,target:n._root=new Array(4)}];r=e.pop();)for(var i=0;i<4;++i)(t=r.source[i])&&(t.length?e.push({source:t,target:r.target[i]=new Array(4)}):r.target[i]=qs(t));return n},Ls.add=function(e){var t=+this._x.call(null,e),n=+this._y.call(null,e);return Es(this.cover(t,n),t,n,e)},Ls.addAll=function(e){var t,n,r,i,a=e.length,o=new Array(a),s=new Array(a),l=1/0,u=1/0,c=-1/0,f=-1/0;for(n=0;n<a;++n)isNaN(r=+this._x.call(null,t=e[n]))||isNaN(i=+this._y.call(null,t))||(o[n]=r,s[n]=i,r<l&&(l=r),r>c&&(c=r),i<u&&(u=i),i>f&&(f=i));if(l>c||u>f)return this;for(this.cover(l,u).cover(c,f),n=0;n<a;++n)Es(this,o[n],s[n],e[n]);return this},Ls.cover=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var n=this._x0,r=this._y0,i=this._x1,a=this._y1;if(isNaN(n))i=(n=Math.floor(e))+1,a=(r=Math.floor(t))+1;else{for(var o,s,l=i-n,u=this._root;n>e||e>=i||r>t||t>=a;)switch(s=(t<r)<<1|e<n,(o=new Array(4))[s]=u,u=o,l*=2,s){case 0:i=n+l,a=r+l;break;case 1:n=i-l,a=r+l;break;case 2:i=n+l,r=a-l;break;case 3:n=i-l,r=a-l}this._root&&this._root.length&&(this._root=u)}return this._x0=n,this._y0=r,this._x1=i,this._y1=a,this},Ls.data=function(){var e=[];return this.visit((function(t){if(!t.length)do{e.push(t.data)}while(t=t.next)})),e},Ls.extent=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Ls.find=function(e,t,n){var r,i,a,o,s,l,u,c=this._x0,f=this._y0,d=this._x1,h=this._y1,p=[],g=this._root;for(g&&p.push(new Ms(g,c,f,d,h)),null==n?n=1/0:(c=e-n,f=t-n,d=e+n,h=t+n,n*=n);l=p.pop();)if(!(!(g=l.node)||(i=l.x0)>d||(a=l.y0)>h||(o=l.x1)<c||(s=l.y1)<f))if(g.length){var m=(i+o)/2,v=(a+s)/2;p.push(new Ms(g[3],m,v,o,s),new Ms(g[2],i,v,m,s),new Ms(g[1],m,a,o,v),new Ms(g[0],i,a,m,v)),(u=(t>=v)<<1|e>=m)&&(l=p[p.length-1],p[p.length-1]=p[p.length-1-u],p[p.length-1-u]=l)}else{var y=e-+this._x.call(null,g.data),b=t-+this._y.call(null,g.data),x=y*y+b*b;if(x<n){var S=Math.sqrt(n=x);c=e-S,f=t-S,d=e+S,h=t+S,r=g.data}}return r},Ls.remove=function(e){if(isNaN(a=+this._x.call(null,e))||isNaN(o=+this._y.call(null,e)))return this;var t,n,r,i,a,o,s,l,u,c,f,d,h=this._root,p=this._x0,g=this._y0,m=this._x1,v=this._y1;if(!h)return this;if(h.length)for(;;){if((u=a>=(s=(p+m)/2))?p=s:m=s,(c=o>=(l=(g+v)/2))?g=l:v=l,t=h,!(h=h[f=c<<1|u]))return this;if(!h.length)break;(t[f+1&3]||t[f+2&3]||t[f+3&3])&&(n=t,d=f)}for(;h.data!==e;)if(r=h,!(h=h.next))return this;return(i=h.next)&&delete h.next,r?(i?r.next=i:delete r.next,this):t?(i?t[f]=i:delete t[f],(h=t[0]||t[1]||t[2]||t[3])&&h===(t[3]||t[2]||t[1]||t[0])&&!h.length&&(n?n[d]=h:this._root=h),this):(this._root=i,this)},Ls.removeAll=function(e){for(var t=0,n=e.length;t<n;++t)this.remove(e[t]);return this},Ls.root=function(){return this._root},Ls.size=function(){var e=0;return this.visit((function(t){if(!t.length)do{++e}while(t=t.next)})),e},Ls.visit=function(e){var t,n,r,i,a,o,s=[],l=this._root;for(l&&s.push(new Ms(l,this._x0,this._y0,this._x1,this._y1));t=s.pop();)if(!e(l=t.node,r=t.x0,i=t.y0,a=t.x1,o=t.y1)&&l.length){var u=(r+a)/2,c=(i+o)/2;(n=l[3])&&s.push(new Ms(n,u,c,a,o)),(n=l[2])&&s.push(new Ms(n,r,c,u,o)),(n=l[1])&&s.push(new Ms(n,u,i,a,c)),(n=l[0])&&s.push(new Ms(n,r,i,u,c))}return this},Ls.visitAfter=function(e){var t,n=[],r=[];for(this._root&&n.push(new Ms(this._root,this._x0,this._y0,this._x1,this._y1));t=n.pop();){var i=t.node;if(i.length){var a,o=t.x0,s=t.y0,l=t.x1,u=t.y1,c=(o+l)/2,f=(s+u)/2;(a=i[0])&&n.push(new Ms(a,o,s,c,f)),(a=i[1])&&n.push(new Ms(a,c,s,l,f)),(a=i[2])&&n.push(new Ms(a,o,f,c,u)),(a=i[3])&&n.push(new Ms(a,c,f,l,u))}r.push(t)}for(;t=r.pop();)e(t.node,t.x0,t.y0,t.x1,t.y1);return this},Ls.x=function(e){return arguments.length?(this._x=e,this):this._x},Ls.y=function(e){return arguments.length?(this._y=e,this):this._y};Math.PI,Math.sqrt(5);var Bs=function(){return Math.random()},Rs=(function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}(Bs),function e(t){function n(e,n){var r,i;return e=null==e?0:+e,n=null==n?1:+n,function(){var a;if(null!=r)a=r,r=null;else do{r=2*t()-1,a=2*t()-1,i=r*r+a*a}while(!i||i>1);return e+n*a*Math.sqrt(-2*Math.log(i)/i)}}return n.source=e,n}(Bs)),Hs=(function e(t){function n(){var e=Rs.source(t).apply(this,arguments);return function(){return Math.exp(e())}}return n.source=e,n}(Bs),function e(t){function n(e){return function(){for(var n=0,r=0;r<e;++r)n+=t();return n}}return n.source=e,n}(Bs));(function e(t){function n(e){var n=Hs.source(t)(e);return function(){return n()/e}}return n.source=e,n})(Bs),function e(t){function n(e){return function(){return-Math.log(1-t())/e}}return n.source=e,n}(Bs);function Ps(){this._=null}function js(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function $s(e,t){var n=t,r=t.R,i=n.U;i?i.L===n?i.L=r:i.R=r:e._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Fs(e,t){var n=t,r=t.L,i=n.U;i?i.L===n?i.L=r:i.R=r:e._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Os(e){for(;e.L;)e=e.L;return e}Ps.prototype={constructor:Ps,insert:function(e,t){var n,r,i;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=Os(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,e=r):(e===n.R&&($s(this,n),n=(e=n).U),n.C=!1,r.C=!0,Fs(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,e=r):(e===n.L&&(Fs(this,n),n=(e=n).U),n.C=!1,r.C=!0,$s(this,r)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,r,i=e.U,a=e.L,o=e.R;if(n=a?o?Os(o):a:o,i?i.L===e?i.L=n:i.R=n:this._=n,a&&o?(r=n.C,n.C=e.C,n.L=a,a.U=n,n!==o?(i=n.U,n.U=e.U,e=n.R,i.L=e,n.R=o,o.U=n):(n.U=i,i=n,e=n.R)):(r=e.C,e=n),e&&(e.U=i),!r)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===i.L){if((t=i.R).C&&(t.C=!1,i.C=!0,$s(this,i),t=i.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,Fs(this,t),t=i.R),t.C=i.C,i.C=t.R.C=!1,$s(this,i),e=this._;break}}else if((t=i.L).C&&(t.C=!1,i.C=!0,Fs(this,i),t=i.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,$s(this,t),t=i.L),t.C=i.C,i.C=t.L.C=!1,Fs(this,i),e=this._;break}t.C=!0,e=i,i=i.U}while(!e.C);e&&(e.C=!1)}}};var Us=Ps;function Vs(e,t,n,r){var i=[null,null],a=gl.push(i)-1;return i.left=e,i.right=t,n&&Ws(i,e,t,n),r&&Ws(i,t,e,r),hl[e.index].halfedges.push(a),hl[t.index].halfedges.push(a),i}function zs(e,t,n){var r=[t,n];return r.left=e,r}function Ws(e,t,n,r){e[0]||e[1]?e.left===n?e[1]=r:e[0]=r:(e[0]=r,e.left=t,e.right=n)}function Ys(e,t,n,r,i){var a,o=e[0],s=e[1],l=o[0],u=o[1],c=0,f=1,d=s[0]-l,h=s[1]-u;if(a=t-l,d||!(a>0)){if(a/=d,d<0){if(a<c)return;a<f&&(f=a)}else if(d>0){if(a>f)return;a>c&&(c=a)}if(a=r-l,d||!(a<0)){if(a/=d,d<0){if(a>f)return;a>c&&(c=a)}else if(d>0){if(a<c)return;a<f&&(f=a)}if(a=n-u,h||!(a>0)){if(a/=h,h<0){if(a<c)return;a<f&&(f=a)}else if(h>0){if(a>f)return;a>c&&(c=a)}if(a=i-u,h||!(a<0)){if(a/=h,h<0){if(a>f)return;a>c&&(c=a)}else if(h>0){if(a<c)return;a<f&&(f=a)}return!(c>0||f<1)||(c>0&&(e[0]=[l+c*d,u+c*h]),f<1&&(e[1]=[l+f*d,u+f*h]),!0)}}}}}function Xs(e,t,n,r,i){var a=e[1];if(a)return!0;var o,s,l=e[0],u=e.left,c=e.right,f=u[0],d=u[1],h=c[0],p=c[1],g=(f+h)/2,m=(d+p)/2;if(p===d){if(g<t||g>=r)return;if(f>h){if(l){if(l[1]>=i)return}else l=[g,n];a=[g,i]}else{if(l){if(l[1]<n)return}else l=[g,i];a=[g,n]}}else if(s=m-(o=(f-h)/(p-d))*g,o<-1||o>1)if(f>h){if(l){if(l[1]>=i)return}else l=[(n-s)/o,n];a=[(i-s)/o,i]}else{if(l){if(l[1]<n)return}else l=[(i-s)/o,i];a=[(n-s)/o,n]}else if(d<p){if(l){if(l[0]>=r)return}else l=[t,o*t+s];a=[r,o*r+s]}else{if(l){if(l[0]<t)return}else l=[r,o*r+s];a=[t,o*t+s]}return e[0]=l,e[1]=a,!0}function Qs(e,t){var n=e.site,r=t.left,i=t.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=t[1],i=t[0]):(r=t[0],i=t[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Ks(e,t){return t[+(t.left!==e.site)]}function Zs(e,t){return t[+(t.left===e.site)]}var Js,el=[];function tl(){js(this),this.x=this.y=this.arc=this.site=this.cy=null}function nl(e){var t=e.P,n=e.N;if(t&&n){var r=t.site,i=e.site,a=n.site;if(r!==a){var o=i[0],s=i[1],l=r[0]-o,u=r[1]-s,c=a[0]-o,f=a[1]-s,d=2*(l*f-u*c);if(!(d>=-vl)){var h=l*l+u*u,p=c*c+f*f,g=(f*h-u*p)/d,m=(l*p-c*h)/d,v=el.pop()||new tl;v.arc=e,v.site=i,v.x=g+o,v.y=(v.cy=m+s)+Math.sqrt(g*g+m*m),e.circle=v;for(var y=null,b=pl._;b;)if(v.y<b.y||v.y===b.y&&v.x<=b.x){if(!b.L){y=b.P;break}b=b.L}else{if(!b.R){y=b;break}b=b.R}pl.insert(y,v),y||(Js=v)}}}}function rl(e){var t=e.circle;t&&(t.P||(Js=t.N),pl.remove(t),el.push(t),js(t),e.circle=null)}var il=[];function al(){js(this),this.edge=this.site=this.circle=null}function ol(e){var t=il.pop()||new al;return t.site=e,t}function sl(e){rl(e),dl.remove(e),il.push(e),js(e)}function ll(e){var t=e.circle,n=t.x,r=t.cy,i=[n,r],a=e.P,o=e.N,s=[e];sl(e);for(var l=a;l.circle&&Math.abs(n-l.circle.x)<ml&&Math.abs(r-l.circle.cy)<ml;)a=l.P,s.unshift(l),sl(l),l=a;s.unshift(l),rl(l);for(var u=o;u.circle&&Math.abs(n-u.circle.x)<ml&&Math.abs(r-u.circle.cy)<ml;)o=u.N,s.push(u),sl(u),u=o;s.push(u),rl(u);var c,f=s.length;for(c=1;c<f;++c)u=s[c],l=s[c-1],Ws(u.edge,l.site,u.site,i);l=s[0],(u=s[f-1]).edge=Vs(l.site,u.site,null,i),nl(l),nl(u)}function ul(e){for(var t,n,r,i,a=e[0],o=e[1],s=dl._;s;)if((r=cl(s,o)-a)>ml)s=s.L;else{if(!((i=a-fl(s,o))>ml)){r>-ml?(t=s.P,n=s):i>-ml?(t=s,n=s.N):t=n=s;break}if(!s.R){t=s;break}s=s.R}!function(e){hl[e.index]={site:e,halfedges:[]}}(e);var l=ol(e);if(dl.insert(t,l),t||n){if(t===n)return rl(t),n=ol(t.site),dl.insert(l,n),l.edge=n.edge=Vs(t.site,l.site),nl(t),void nl(n);if(n){rl(t),rl(n);var u=t.site,c=u[0],f=u[1],d=e[0]-c,h=e[1]-f,p=n.site,g=p[0]-c,m=p[1]-f,v=2*(d*m-h*g),y=d*d+h*h,b=g*g+m*m,x=[(m*y-h*b)/v+c,(d*b-g*y)/v+f];Ws(n.edge,u,p,x),l.edge=Vs(u,e,null,x),n.edge=Vs(e,p,null,x),nl(t),nl(n)}else l.edge=Vs(t.site,l.site)}}function cl(e,t){var n=e.site,r=n[0],i=n[1],a=i-t;if(!a)return r;var o=e.P;if(!o)return-1/0;var s=(n=o.site)[0],l=n[1],u=l-t;if(!u)return s;var c=s-r,f=1/a-1/u,d=c/u;return f?(-d+Math.sqrt(d*d-2*f*(c*c/(-2*u)-l+u/2+i-a/2)))/f+r:(r+s)/2}function fl(e,t){var n=e.N;if(n)return cl(n,t);var r=e.site;return r[1]===t?r[0]:1/0}var dl,hl,pl,gl,ml=1e-6,vl=1e-12;function yl(e,t){return t[1]-e[1]||t[0]-e[0]}function bl(e,t){var n,r,i,a=e.sort(yl).pop();for(gl=[],hl=new Array(e.length),dl=new Us,pl=new Us;;)if(i=Js,a&&(!i||a[1]<i.y||a[1]===i.y&&a[0]<i.x))a[0]===n&&a[1]===r||(ul(a),n=a[0],r=a[1]),a=e.pop();else{if(!i)break;ll(i.arc)}if(function(){for(var e,t,n,r,i=0,a=hl.length;i<a;++i)if((e=hl[i])&&(r=(t=e.halfedges).length)){var o=new Array(r),s=new Array(r);for(n=0;n<r;++n)o[n]=n,s[n]=Qs(e,gl[t[n]]);for(o.sort((function(e,t){return s[t]-s[e]})),n=0;n<r;++n)s[n]=t[o[n]];for(n=0;n<r;++n)t[n]=s[n]}}(),t){var o=+t[0][0],s=+t[0][1],l=+t[1][0],u=+t[1][1];!function(e,t,n,r){for(var i,a=gl.length;a--;)Xs(i=gl[a],e,t,n,r)&&Ys(i,e,t,n,r)&&(Math.abs(i[0][0]-i[1][0])>ml||Math.abs(i[0][1]-i[1][1])>ml)||delete gl[a]}(o,s,l,u),function(e,t,n,r){var i,a,o,s,l,u,c,f,d,h,p,g,m=hl.length,v=!0;for(i=0;i<m;++i)if(a=hl[i]){for(o=a.site,s=(l=a.halfedges).length;s--;)gl[l[s]]||l.splice(s,1);for(s=0,u=l.length;s<u;)p=(h=Zs(a,gl[l[s]]))[0],g=h[1],f=(c=Ks(a,gl[l[++s%u]]))[0],d=c[1],(Math.abs(p-f)>ml||Math.abs(g-d)>ml)&&(l.splice(s,0,gl.push(zs(o,h,Math.abs(p-e)<ml&&r-g>ml?[e,Math.abs(f-e)<ml?d:r]:Math.abs(g-r)<ml&&n-p>ml?[Math.abs(d-r)<ml?f:n,r]:Math.abs(p-n)<ml&&g-t>ml?[n,Math.abs(f-n)<ml?d:t]:Math.abs(g-t)<ml&&p-e>ml?[Math.abs(d-t)<ml?f:e,t]:null))-1),++u);u&&(v=!1)}if(v){var y,b,x,S=1/0;for(i=0,v=null;i<m;++i)(a=hl[i])&&(x=(y=(o=a.site)[0]-e)*y+(b=o[1]-t)*b)<S&&(S=x,v=a);if(v){var w=[e,t],_=[e,r],C=[n,r],A=[n,t];v.halfedges.push(gl.push(zs(o=v.site,w,_))-1,gl.push(zs(o,_,C))-1,gl.push(zs(o,C,A))-1,gl.push(zs(o,A,w))-1)}}for(i=0;i<m;++i)(a=hl[i])&&(a.halfedges.length||delete hl[i])}(o,s,l,u)}this.edges=gl,this.cells=hl,dl=pl=gl=hl=null}bl.prototype={constructor:bl,polygons:function(){var e=this.edges;return this.cells.map((function(t){var n=t.halfedges.map((function(n){return Ks(t,e[n])}));return n.data=t.site.data,n}))},triangles:function(){var e=[],t=this.edges;return this.cells.forEach((function(n,r){if(a=(i=n.halfedges).length)for(var i,a,o,s,l,u,c=n.site,f=-1,d=t[i[a-1]],h=d.left===c?d.right:d.left;++f<a;)o=h,h=(d=t[i[f]]).left===c?d.right:d.left,o&&h&&r<o.index&&r<h.index&&(l=o,u=h,((s=c)[0]-u[0])*(l[1]-s[1])-(s[0]-l[0])*(u[1]-s[1])<0)&&e.push([c.data,o.data,h.data])})),e},links:function(){return this.edges.filter((function(e){return e.right})).map((function(e){return{source:e.left.data,target:e.right.data}}))},find:function(e,t,n){for(var r,i,a=this,o=a._found||0,s=a.cells.length;!(i=a.cells[o]);)if(++o>=s)return null;var l=e-i.site[0],u=t-i.site[1],c=l*l+u*u;do{i=a.cells[r=o],o=null,i.halfedges.forEach((function(n){var r=a.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var l=e-s[0],u=t-s[1],f=l*l+u*u;f<c&&(c=f,o=s.index)}}))}while(null!==o);return a._found=r,null==n||c<=n*n?i.site:null}};Math.SQRT2;function xl(e,t,n){this.k=e,this.x=t,this.y=n}xl.prototype={constructor:xl,scale:function(e){return 1===e?this:new xl(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new xl(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new xl(1,0,0);xl.prototype;class Sl{constructor(e,t=!1,n=30,r=-40,i=100){this.id=e,this.verbose=t,this.offsetX=n,this.offsetY=r,this.duration=i}show(e){this.verbose&&console.log(e),this.edit(e),this.move(),We("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){We("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(e=Ne.pageX,t=Ne.pageY){this.verbose&&(console.log(e),console.log(t)),e+=this.offsetX,t=t+this.offsetY<0?10:t+this.offsetY,We("#"+this.id).style("left",`${e}px`).style("top",`${t}px`)}edit(e){We("#"+this.id).html(e)}}class wl{constructor(e,t=!0,n=10,r="YlGnBu",i=2,a="heatmapTooltip",o="heatmap-tooltip"){this.data=e,this.useLog=t,this.logBase=n,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=i,this.colorScheme=r,We(`#${a}`).empty()&&We("body").append("div").attr("id",a),this.tooltip=new Sl(a),We(`#${a}`).classed(o,!0),this.toolbar=void 0}createToolbar(e,t){return this.toolbar=new ca(e,t),this.toolbar}drawColorLegend(e,t={x:0,y:0},n=5){sa(this.data[0].unit||"Value",e,this.colorScale,t,this.useLog,n,this.logBase)}redraw(e,t,n,r={w:1e3,h:1e3},i=30){this._setXScale(r.w,t),this._setYScale(r.h,n),this.draw(e,r,i)}draw(e,t={w:1e3,h:600},n=30,r=!1,i=null,a=0,o="right"){void 0===this.xList&&this._setXScale(t.w),void 0===this.yList&&this._setYScale(t.h),void 0===this.colorScale&&this._setColorScale(a);const s=e.selectAll(".exp-map-xlabel").data(this.xList),l=null==i?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+i;s.attr("transform",e=>`translate(${this.xScale(e)+5}, ${l}) rotate(${n})`),s.enter().append("text").attr("class",(e,t)=>`exp-map-xlabel x${t}`).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").style("font-size",this.xScale.bandwidth()>12?12:this.xScale.bandwidth()).attr("transform",e=>`translate(${this.xScale(e)+5}, ${l}) rotate(${n})`).merge(s).text(e=>e),s.exit().remove(),e.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(e=>e).attr("x","left"==o?this.xScale.range()[0]-5:this.xScale.range()[1]+5).attr("y",e=>this.yScale(e)+this.yScale.bandwidth()/2).style("font-size",this.yScale.bandwidth()).attr("class",(e,t)=>`exp-map-ylabel y${t}`).attr("text-anchor","left"==o?"end":"start").style("cursor","default").on("click",e=>{alert(`${e} is clicked. To be implemented`)}).on("mouseover",(function(){We(this).classed("normal",!1).classed("highlighted",!0)})).on("mouseout",(function(){We(this).classed("normal",!0).classed("highlighted",!1)}));const u=e.selectAll(".exp-map-cell").data(this.data,e=>e.value);u.attr("x",e=>this.xScale(e.x)).attr("y",e=>this.yScale(e.y)).attr("row",e=>`x${this.xList.indexOf(e.x)}`).attr("col",e=>`y${this.yList.indexOf(e.y)}`);const c=this;u.enter().append("rect").attr("row",e=>`x${this.xList.indexOf(e.x)}`).attr("col",e=>`y${this.yList.indexOf(e.y)}`).attr("x",e=>this.xScale(e.x)).attr("y",e=>this.yScale(e.y)).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",(function(t){const n=We(this);c.cellMouseover(t,e,n)})).on("mouseout",(function(){c.cellMouseout(e)})).merge(u).style("fill",e=>e.color?e.color:r&&0==e.value?"#ffffff":this.useLog?this.colorScale(this._log(e.value)):this.colorScale(e.value)).style("stroke",e=>r&&0==e.value?"lightgrey":e.stroke?e.stroke:"none").style("stroke",e=>r&&0==e.value?1:e.stroke?1:0),u.exit().remove()}cellMouseout(e){e.selectAll("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(e,t,n){const r=n.attr("row"),i=n.attr("col");t.selectAll(".exp-map-xlabel").filter(`.${r}`).classed("highlighted",!0),t.selectAll(".exp-map-ylabel").filter(`.${i}`).classed("highlighted",!0),n.classed("highlighted",!0);const a=void 0===e.displayValue?parseFloat(e.value.toExponential()).toPrecision(4):e.displayValue;this.tooltip.show(`Column: ${e.x} <br/> Row: ${e.y}<br/> Value: ${a}`)}_setXScale(e,t){this.xList=void 0!==t?t:rt().key(e=>e.x).entries(this.data).map(e=>e.key),this.xScale=mt().domain(this.xList).range([0,e]).padding(.05)}_setYScale(e,t){this.yList=void 0!==t?t:rt().key(e=>e.y).entries(this.data).map(e=>e.key),this.yScale=mt().domain(this.yList).range([0,e]).padding(.05)}_setColorScale(e=0){let t=this.useLog,n=this.data.map(e=>t?this._log(e.value):e.value);this.colorScale=oa(n,this.colorScheme,e)}_log(e){return Math.log(Number(e+1))/Math.log(this.logBase)}}class _l{constructor(e,t="Reds"){this.data=e,this.colorScheme=t,this.xScale=void 0,this.yScale=void 0,this.ghScale={},this.cScale=void 0,this.tooltip=void 0}addTooltip(e,t="bar-map-tooltip"){if(We(`#${e}`).empty())throw"DOM ID is missing: "+e;let n=We(`#${e}`),r=e+"-tooltip";We(`#${r}`).empty()&&n.append("div").attr("id",r),this.tooltip=new Sl(r),We(`#${r}`).classed(t,!0)}renderWithNewXDomain(e,t,n,r=!1){this.xScale.domain(t);let i=this.xScale.bandwidth();r&&this._renderXAxis(e),"barmap"==n?e.selectAll(".bar-row").selectAll("rect").attr("x",e=>this.xScale(e.x)||0).attr("width",e=>void 0===this.xScale(e.x)?0:i):(this._setRScale(),e.selectAll(".map-bubble").attr("cx",e=>this.xScale(e.x)+this.xScale.bandwidth()/2||0).attr("r",e=>void 0===this.xScale(e.x)?0:this.rScale(e.r)),e.selectAll(".map-grid-vline").attr("x1",e=>this.xScale(e)+this.xScale.bandwidth()/2||0).attr("x2",e=>this.xScale(e)+this.xScale.bandwidth()/2||0).attr("stroke-width",e=>this.xScale(e)>=0?0:.3))}drawSvg(e,t={w:1e3,h:600,top:0,left:0},n="barmap",r=!1,i,a=!1,o=[0,50]){void 0!==i&&(this.tooltipCallback=i),void 0!==this.xScale&&void 0!==this.yScale&&void 0!==this.cScale||this.setScales(t),this._renderAxes(e);let s=this._createClipPath(e,t);"barmap"==n?this.renderBars(e,s,r):"bubbleNoClip"==n?this.renderBubbles(e,o,a,i):this.renderBubbles(s,o,a,i)}setScales(e,t,n){this._setXScale(e,t),this._setYScale(e,n),this._setCScale()}_createClipPath(e,t){return e.classed("data-area",!0),e.append("defs").append("clipPath").attr("id","data-map-clip").append("rect").attr("width",t.w).attr("height",2*t.h).attr("fill","none").attr("stroke","silver"),e.append("g").attr("clip-path","url(#data-map-clip)").classed("clippedArea",!0)}_setXScale(e={w:1e3,left:20},t,n=.05){const r=(e,t)=>{throw console.error(`This value is invalid: ${e}`),t};if(isNaN(e.w)&&r(e.w,"ValueError"),isNaN(e.left)&&r(e.left,"ValueError"),void 0===t){t=[...new Set(this.data.map(e=>e.x))].sort((e,t)=>e<t?-1:e>t?1:e>=t?0:NaN)}this.xScale=mt().domain(t).range([e.left,e.left+e.w]).padding(n)}_setYScale(e={h:600,top:20},t,n=.3){if(void 0===t){t=[...new Set(this.data.map(e=>e.y))]}t.sort((e,t)=>e<t?-1:e>t?1:e>=t?0:NaN),this.yScale=mt().domain(t).range([e.top,e.top+e.h]).padding(n)}_setCScale(e=[-.5,0,.5]){this.cScale=Hn().domain(e).range(["#129cff","#ffffff","#f53956"])}_setRScale(e=0,t=5){return void 0===e&&(e=L(this.data.map(e=>e.r))),void 0===t&&(t=q(this.data.map(e=>e.r))),this.rScale=Un().domain([e,t]).range([0,q([this.xScale.bandwidth(),this.yScale.bandwidth()])/2]),this.rScale}_renderAxes(e){this._renderXAxis(e),this._renderYAxis(e)}_renderXAxis(e){let t=Sa(this.xScale).tickSize(0);e.select(".bar-map-x-axis").remove();let n=this.yScale.range()[1];if(void 0===n||isNaN(n))throw console.error(`This value must be defined: ${n}`),"Value Error";e.append("g").attr("class","bar-map-x-axis").attr("transform",`translate(0, ${n})`).call(t).selectAll("text").attr("y",0).attr("x",9).attr("class","bar-map-x-label").attr("dy",".35em").attr("transform","rotate(90)").style("text-anchor","start")}_renderYAxis(e){let t=wa(this.yScale).tickSize(0);e.append("g").attr("class","bar-map-y-axis").call(t).selectAll("text").attr("class","bar-map-y-label")}renderBubbles(e,t=[0,10],n=!1,r){let i=this._setRScale(t[0],t[1]),a=this.cScale;e.selectAll(".data-bar").remove(),Ye(".h-axis").remove();let o=e.append("g"),s=e.append("g"),l=new Set(this.yScale.domain()),u=new Set(this.xScale.domain());const c=this.xScale.bandwidth()/2,f=this.yScale.bandwidth()/2;n&&(o.selectAll(".map-grid-hline").data(this.yScale.domain()).enter().append("line").classed("map-grid-hline",!0).attr("x1",this.xScale.range()[0]+c).attr("x2",this.xScale.range()[1]+c).attr("y1",e=>this.yScale(e)+f).attr("y2",e=>this.yScale(e)+f).style("stroke","lightgrey").style("stroke-width",.3),o.selectAll(".map-grid-vline").data(this.xScale.domain()).enter().append("line").classed("map-grid-vline",!0).attr("x1",e=>this.xScale(e)+c).attr("x2",e=>this.xScale(e)+c).attr("y1",this.yScale.range()[0]+f).attr("y2",this.yScale.range()[1]-f).style("stroke","lightgrey").style("stroke-width",.3));let d=s.selectAll(".map-bubble").data(this.data.filter(e=>l.has(e.y)&&u.has(e.x))).enter().append("circle").classed("map-bubble",!0).attr("cx",e=>this.xScale(e.x)+c).attr("cy",e=>this.yScale(e.y)+f).attr("r",e=>i(e.r)<1?1:i(e.r)).attr("fill",e=>isNaN(e.value)?"darkgrey":a(e.value)).attr("opacity",.95).attr("stroke","#aaaaaa").attr("cursor","pointer"),h=this.tooltip;void 0===r&&(r=void 0!==this.tooltipCallback?this.tooltipCallback:e=>`Row: ${e.y}<br/> Column: ${e.x} <br/> Color Value: ${e.value.toPrecision(5)}<br/> Bubble Size: ${e.r.toPrecision(5)}`),d.on("mouseover",(function(e){h.show(r(e)),We(this).classed("hover",!0)})).on("mouseout",(function(){h.hide(),We(this).classed("hover",!1)}))}renderBars(e,t,n=!1,r){t.selectAll(".map-bubble").remove(),e.selectAll(".map-grid-hline").remove(),e.selectAll(".map-grid-vline").remove(),e.selectAll(".h-axis").remove();let i=this.cScale,a=rt().key(e=>e.y).entries(this.data),o=rt().key(e=>e.dataType).entries(this.data),s=o.reduce((e,t)=>(e[t.key]=0,e),{});Object.keys(s).forEach(e=>{let t=q(o.filter(t=>t.key==e)[0].values.map(e=>e.r));this.ghScale[e]=Hn().rangeRound([0,-this.yScale.bandwidth()]).domain([0,t])});let l=new Set(this.yScale.domain());a.forEach(a=>{if(!l.has(a.key))return;let o=void 0;if(n){let e=a.values[0].dataType;o=this.ghScale[e]}else{let e=q(a.values,e=>e.r);o=Hn().rangeRound([0,-this.yScale.bandwidth()]).domain([0,e])}let s=t.append("g").classed("bar-row",!0);s.append("line").attr("class",a.key.split(/-|\s/)[0]).attr("x1",this.xScale.range()[0]).attr("x2",this.xScale.range()[1]).attr("y1",0).attr("y2",0).attr("transform",`translate(0, ${this.yScale(a.key)+this.yScale.bandwidth()})`).style("stroke","#efefef");let u=xa(o).ticks(2);e.append("g").attr("class","h-axis").attr("transform",`translate(${this.xScale.range()[1]+3}, ${this.yScale(a.key)+this.yScale.bandwidth()})`).call(u).selectAll("text").attr("font-size",6);let c=s.selectAll(".data-bar").data(a.values).enter().append("rect").attr("class","data-bar").attr("rx",2).attr("x",e=>this.xScale(e.x)||0).attr("y",e=>this.yScale(e.y)+this.yScale.bandwidth()+o(e.r)).attr("width",e=>void 0===this.xScale(e.x)?0:this.xScale.bandwidth()).attr("height",e=>Math.abs(o(e.r))).attr("fill",e=>isNaN(e.value)?"darkgrey":i(e.value)).attr("stroke","#aaaaaa"),f=this.tooltip;void 0===r&&(r=void 0!==this.tooltipCallback?this.tooltipCallback:e=>`Row: ${e.y}<br/> Column: ${e.x} <br/> Value: ${e.value}<br/> Height: ${e.r}`),c.on("mouseover",(function(e){f.show(r(e)),We(this).classed("hover",!0)})).on("mouseout",(function(){f.hide(),We(this).classed("hover",!1)}))})}drawBubbleLegend(e,t="bubble legend",n={x:0,y:0},r=[5,10,20,40,80],i=20,a){e.select("#dataMap-bubble-legend").remove(),e.selectAll(".bubble-legend").remove();const o=e.append("g").attr("id","dataMap-bubble-legend").attr("transform",`translate(${n.x}, ${n.y})`).selectAll(".legend").data(r).enter().append("g").classed("legend",!0);"h"==a?(e.append("text").attr("class","bubble-legend color-legend").text(t).attr("x",0).attr("text-anchor","end").attr("y",-5).attr("transform",`translate(${n.x}, ${n.y})`),o.append("circle").attr("cx",(e,t)=>i*t).attr("cy",0).attr("r",e=>this.rScale(e)<0?1:this.rScale(e)).style("fill","#ababab"),o.append("text").attr("class","color-legend").text(e=>e).attr("x",(e,t)=>i*t-10).attr("y",20)):(e.append("text").attr("class","bubble-legend color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${n.x}, ${n.y+i*r.length})`),o.append("circle").attr("cx",0).attr("cy",(e,t)=>i*t).attr("r",e=>this.rScale(e)<0?0:this.rScale(e)).style("fill","#ababab"),o.append("text").attr("class","color-legend").text(e=>e).attr("x",10).attr("y",(e,t)=>i*t+5))}drawColorLegend(e,t="color legend",n={x:0,y:0},r={w:30,h:5},i=[-1,-.5,-.25,0,.25,.5,1],a="v"){const o=e.append("g").attr("transform",`translate(${n.x}, ${n.y})`).selectAll(".legend").data(i).enter().append("g").classed("legend",!0);"h"==a?(e.append("text").attr("class","color-legend").text(t).attr("x",0).attr("text-anchor","end").attr("y",-5).attr("transform",`translate(${n.x}, ${n.y})`),o.append("rect").attr("x",(e,t)=>r.w*t).attr("y",0).attr("rx",2).attr("width",r.w).attr("height",r.h).style("fill",e=>this.cScale(e)),o.append("text").attr("class","color-legend").text(e=>e).attr("x",(e,t)=>r.w*t).attr("y",r.h+15)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${n.x}, ${n.y+r.h*(i.length+1)})`),o.append("rect").attr("x",0).attr("y",(e,t)=>r.h*t).attr("width",r.w).attr("height",r.h).style("fill",e=>this.cScale(e)),o.append("text").attr("class","color-legend").text(e=>e).attr("x",10).attr("y",(e,t)=>r.h*t+r.h/2))}}class Cl{constructor(e,t,n=1e6){this.data=e,this.center=t,this.window=n,this.scale=void 0,this.tooltip=void 0}setScale(e){let t=[0,Math.ceil(e)],n=[this.center-this.window,this.center+this.window];this.scale=Hn().range(t).domain(n)}render(e,t=1500,n=200,r=!1,i="Track",a="#ffffff",o="#ababab",s=!1,l){if(this.dom=e,this.setScale(t),s){this.colorScale=oa(this.data.map(e=>e.colorValue),"Greys",0,l);const e=void 0===l?this.data.map(e=>e.colorValue):l;this.maxColor=this.colorScale(e)}let u=this.dom.append("g");u.append("rect").attr("x",0).attr("y",n/2).attr("rx",4).attr("width",t).attr("height",10).style("fill",a).style("stroke","#ababab").style("stroke-width",1),u.append("g").selectAll(".minibrowser-feature").data(this.data.filter(e=>this.scale(e.pos)>0&&this.scale(e.pos)<t)).enter().append("rect").attr("class","minibrowser-feature").attr("x",e=>r?this.scale(e.start):this.scale(e.pos)).attr("y",n/2).attr("width",e=>{if(r){return Math.abs(this.scale(e.start)-this.scale(e.end)+1)||1}return 1}).attr("height",10).style("fill",e=>e.pos==this.center?"red":s?isFinite(e.colorValue)?this.colorScale(e.colorValue):this.maxColor:o),u.append("text").attr("x",-10).attr("y",n/2+5).style("font-size","9px").style("text-anchor","end").text(i)}static renderAxis(e,t,n,r=!0,i=null,a={w:50,h:20},o=0,s="bottom"){let l="bottom"==s?Sa(t):ba(t);const u=(t.domain()[1]-t.domain()[0])/10;let c=[0,1,2,3,4,5,6,7,8,9,10].map(e=>t.domain()[0]+u*e);l.tickValues(c);const f=e.append("g");if(f.attr("id","miniBrowserAxis").attr("transform",`translate(0,${n})`).call(l).selectAll("text"),r){const e=()=>{let e=Ne.selection,n=e[0],r=e[1],a=Math.round(t.invert(e[0])),o=Math.round(t.invert(e[1]));null!==i&&i(n,r,a,o)};let n=Ss().extent([[0,-a.h],[t.range()[1],0]]).on("start brush end",e);return f.append("g").attr("id","miniBrowserBrush").attr("class","brush").call(n).call(n.move,[t(o)-a.w,t(o)+a.w]),n}}}class Al extends class{constructor(e={x:void 0,y:void 0,z:void 0},t,n){this.setCoord(e),this.setValue(t),this.setR(n)}get displayValue(){return this.v.toPrecision(3)}get value(){return this.v}setCoord(e={x:void 0,y:void 0,z:void 0}){this.x=e.x,this.y=e.y,this.z=e.z}setValue(e){this.v=e}setR(e){this.r=e}}{constructor(e,t,n){super(),this.varId=e,this.chr=t,this.pos=parseInt(n),this.rsId=void 0,void 0===this.chr&&this.setGenomicPosition()}get variantId(){return this.varId}get chromosome(){return this.chr}get colorValue(){return this.v}setRsId(e){this.rsId=e}setGenomicPosition(){this.pos=parseInt(this.varId.split("_")[1]),this.chr=this.varId.split("_")[0]}}function Tl(){let e={};return kl.forEach(t=>{e[t.tissueSiteDetailId]=t}),e}const kl=[{colorHex:"FF6600",colorRgb:"255,102,0",datasetId:"gtex_v8",eGeneCount:15607,expressedGeneCount:28830,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:581,rnaSeqSampleCount:663,sGeneCount:5113,samplingSite:"Subcutaneous tissue beneath the leg's skin sample.",tissueSite:"Adipose Tissue",tissueSiteDetail:"Adipose - Subcutaneous",tissueSiteDetailAbbr:"ADPSBQ",tissueSiteDetailId:"Adipose_Subcutaneous",uberonId:"0002190"},{colorHex:"FFAA00",colorRgb:"255,170,0",datasetId:"gtex_v8",eGeneCount:12482,expressedGeneCount:28881,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:469,rnaSeqSampleCount:541,sGeneCount:4210,samplingSite:"Adipose tissue on the large fold of parietal peritoneum that hangs down from the greater curvature of the stomach, passing in front of the small intestines.",tissueSite:"Adipose Tissue",tissueSiteDetail:"Adipose - Visceral (Omentum)",tissueSiteDetailAbbr:"ADPVSC",tissueSiteDetailId:"Adipose_Visceral_Omentum",uberonId:"0010414"},{colorHex:"33DD33",colorRgb:"51,221,51",datasetId:"gtex_v8",eGeneCount:8123,expressedGeneCount:28235,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:233,rnaSeqSampleCount:258,sGeneCount:2369,samplingSite:"Left, followed by the right if necessary for sufficient aliquots.",tissueSite:"Adrenal Gland",tissueSiteDetail:"Adrenal Gland",tissueSiteDetailAbbr:"ADRNLG",tissueSiteDetailId:"Adrenal_Gland",uberonId:"0002369"},{colorHex:"FF5555",colorRgb:"255,85,85",datasetId:"gtex_v8",eGeneCount:12493,expressedGeneCount:28025,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:387,rnaSeqSampleCount:432,sGeneCount:3740,samplingSite:"Ascending aorta or other thoracic regions (nonatherosclerotic).",tissueSite:"Blood Vessel",tissueSiteDetail:"Artery - Aorta",tissueSiteDetailAbbr:"ARTAORT",tissueSiteDetailId:"Artery_Aorta",uberonId:"0001496"},{colorHex:"FFAA99",colorRgb:"255,170,153",datasetId:"gtex_v8",eGeneCount:6296,expressedGeneCount:28462,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:213,rnaSeqSampleCount:240,sGeneCount:2140,samplingSite:"Left and right, noncalcific regions only.",tissueSite:"Blood Vessel",tissueSiteDetail:"Artery - Coronary",tissueSiteDetailAbbr:"ARTCRN",tissueSiteDetailId:"Artery_Coronary",uberonId:"0001621"},{colorHex:"FF0000",colorRgb:"255,0,0",datasetId:"gtex_v8",eGeneCount:15008,expressedGeneCount:27217,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:584,rnaSeqSampleCount:663,sGeneCount:4791,samplingSite:"Left Tibial. Peripheral tibial artery from gastrocnemius region",tissueSite:"Blood Vessel",tissueSiteDetail:"Artery - Tibial",tissueSiteDetailAbbr:"ARTTBL",tissueSiteDetailId:"Artery_Tibial",uberonId:"0007610"},{colorHex:"AA0000",colorRgb:"170,0,0",datasetId:"gtex_v8",eGeneCount:null,expressedGeneCount:28949,hasEGenes:!1,hasSGenes:!1,rnaSeqAndGenotypeSampleCount:21,rnaSeqSampleCount:21,sGeneCount:null,samplingSite:"Central posterior urinary bladder, trimming from the outer wall if necessary.",tissueSite:"Bladder",tissueSiteDetail:"Bladder",tissueSiteDetailAbbr:"BLDDER",tissueSiteDetailId:"Bladder",uberonId:"0001255"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:3726,expressedGeneCount:28196,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:129,rnaSeqSampleCount:152,sGeneCount:892,samplingSite:"Amygdala (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Amygdala",tissueSiteDetailAbbr:"BRNAMY",tissueSiteDetailId:"Brain_Amygdala",uberonId:"0001876"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:5640,expressedGeneCount:28921,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:147,rnaSeqSampleCount:176,sGeneCount:1238,samplingSite:"Anterior cingulate cortex (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Anterior cingulate cortex (BA24)",tissueSiteDetailAbbr:"BRNACC",tissueSiteDetailId:"Brain_Anterior_cingulate_cortex_BA24",uberonId:"0009835"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:8362,expressedGeneCount:29230,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:194,rnaSeqSampleCount:246,sGeneCount:1809,samplingSite:"Caudate (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Caudate (basal ganglia)",tissueSiteDetailAbbr:"BRNCDT",tissueSiteDetailId:"Brain_Caudate_basal_ganglia",uberonId:"0001873"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:10027,expressedGeneCount:29538,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:175,rnaSeqSampleCount:215,sGeneCount:2397,samplingSite:"Cerebellar hemisphere (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Cerebellar Hemisphere",tissueSiteDetailAbbr:"BRNCHB",tissueSiteDetailId:"Brain_Cerebellar_Hemisphere",uberonId:"0002037"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:11240,expressedGeneCount:30106,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:209,rnaSeqSampleCount:241,sGeneCount:2786,samplingSite:"Right cerebellum (sampled at donor collection site and preserved in PAXgene fixative).",tissueSite:"Brain",tissueSiteDetail:"Brain - Cerebellum",tissueSiteDetailAbbr:"BRNCHA",tissueSiteDetailId:"Brain_Cerebellum",uberonId:"0002037"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:9082,expressedGeneCount:29560,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:205,rnaSeqSampleCount:255,sGeneCount:2048,samplingSite:"Right cerebral frontal pole cortex (sampled at donor collection site and preserved in PAXgene fixative).",tissueSite:"Brain",tissueSiteDetail:"Brain - Cortex",tissueSiteDetailAbbr:"BRNCTXA",tissueSiteDetailId:"Brain_Cortex",uberonId:"0001870"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:7335,expressedGeneCount:29132,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:175,rnaSeqSampleCount:209,sGeneCount:1684,samplingSite:"Right cerebral frontal pole cortex (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Frontal Cortex (BA9)",tissueSiteDetailAbbr:"BRNCTXB",tissueSiteDetailId:"Brain_Frontal_Cortex_BA9",uberonId:"0009834"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:5517,expressedGeneCount:28625,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:165,rnaSeqSampleCount:197,sGeneCount:1185,samplingSite:"Hippocampus (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Hippocampus",tissueSiteDetailAbbr:"BRNHPP",tissueSiteDetailId:"Brain_Hippocampus",uberonId:"0001954"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:5499,expressedGeneCount:29502,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:170,rnaSeqSampleCount:202,sGeneCount:1414,samplingSite:"Hypothalamus (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Hypothalamus",tissueSiteDetailAbbr:"BRNHPT",tissueSiteDetailId:"Brain_Hypothalamus",uberonId:"0001898"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:8198,expressedGeneCount:29339,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:202,rnaSeqSampleCount:246,sGeneCount:1881,samplingSite:"Nucleus accumbens basal ganglia (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Nucleus accumbens (basal ganglia)",tissueSiteDetailAbbr:"BRNNCC",tissueSiteDetailId:"Brain_Nucleus_accumbens_basal_ganglia",uberonId:"0001882"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:6902,expressedGeneCount:28335,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:170,rnaSeqSampleCount:205,sGeneCount:1350,samplingSite:"Putamen basal ganglia (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Putamen (basal ganglia)",tissueSiteDetailAbbr:"BRNPTM",tissueSiteDetailId:"Brain_Putamen_basal_ganglia",uberonId:"0001874"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:4483,expressedGeneCount:28352,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:126,rnaSeqSampleCount:159,sGeneCount:1144,samplingSite:"Spinal cord (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Spinal cord (cervical c-1)",tissueSiteDetailAbbr:"BRNSPC",tissueSiteDetailId:"Brain_Spinal_cord_cervical_c-1",uberonId:"0006469"},{colorHex:"EEEE00",colorRgb:"238,238,0",datasetId:"gtex_v8",eGeneCount:3301,expressedGeneCount:28050,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:114,rnaSeqSampleCount:139,sGeneCount:814,samplingSite:"Substantia nigra (sampled at Miami Brain Bank and preserved as fresh frozen tissue).",tissueSite:"Brain",tissueSiteDetail:"Brain - Substantia nigra",tissueSiteDetailAbbr:"BRNSNG",tissueSiteDetailId:"Brain_Substantia_nigra",uberonId:"0002038"},{colorHex:"33CCCC",colorRgb:"51,204,204",datasetId:"gtex_v8",eGeneCount:10872,expressedGeneCount:29615,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:396,rnaSeqSampleCount:459,sGeneCount:4124,samplingSite:"Central breast subareolar region of the right breast, 1-2 cm under the skin surface of nipple region.",tissueSite:"Breast",tissueSiteDetail:"Breast - Mammary Tissue",tissueSiteDetailAbbr:"BREAST",tissueSiteDetailId:"Breast_Mammary_Tissue",uberonId:"0008367"},{colorHex:"CC66FF",colorRgb:"204,102,255",datasetId:"gtex_v8",eGeneCount:4934,expressedGeneCount:27840,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:147,rnaSeqSampleCount:174,sGeneCount:2360,samplingSite:"Transformed lymphocytes.",tissueSite:"Blood Vessel",tissueSiteDetail:"Cells - EBV-transformed lymphocytes",tissueSiteDetailAbbr:"LCL",tissueSiteDetailId:"Cells_EBV-transformed_lymphocytes",uberonId:"EFO_0000572"},{colorHex:"AAEEFF",colorRgb:"170,238,255",datasetId:"gtex_v8",eGeneCount:15219,expressedGeneCount:26297,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:483,rnaSeqSampleCount:504,sGeneCount:4586,samplingSite:"Cultured primary fibroblasts.",tissueSite:"Skin",tissueSiteDetail:"Cells - Cultured fibroblasts",tissueSiteDetailAbbr:"FIBRBLS",tissueSiteDetailId:"Cells_Cultured_fibroblasts",uberonId:"EFO_0002009"},{colorHex:"FFCCCC",colorRgb:"255,204,204",datasetId:"gtex_v8",eGeneCount:null,expressedGeneCount:29691,hasEGenes:!1,hasSGenes:!1,rnaSeqAndGenotypeSampleCount:9,rnaSeqSampleCount:9,sGeneCount:null,samplingSite:"Ectocervix (squamous) from uterus. Bivalve uterus along the endocervical canal to open uterus and cervix from external os to fundus.",tissueSite:"Cervix Uteri",tissueSiteDetail:"Cervix - Ectocervix",tissueSiteDetailAbbr:"CVXECT",tissueSiteDetailId:"Cervix_Ectocervix",uberonId:"0012249"},{colorHex:"CCAADD",colorRgb:"204,170,221",datasetId:"gtex_v8",eGeneCount:null,expressedGeneCount:30559,hasEGenes:!1,hasSGenes:!1,rnaSeqAndGenotypeSampleCount:10,rnaSeqSampleCount:10,sGeneCount:null,samplingSite:"Endocervix (glandular) from uterus. Bivalve uterus along the endocervical canal to open uterus and cervix from external os to fundus.",tissueSite:"Cervix Uteri",tissueSiteDetail:"Cervix - Endocervix",tissueSiteDetailAbbr:"CVSEND",tissueSiteDetailId:"Cervix_Endocervix",uberonId:"0000458"},{colorHex:"EEBB77",colorRgb:"238,187,119",datasetId:"gtex_v8",eGeneCount:10550,expressedGeneCount:28454,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:318,rnaSeqSampleCount:373,sGeneCount:3269,samplingSite:"Sigmoid colon, Obtain muscularis only; discard mucosa.",tissueSite:"Colon",tissueSiteDetail:"Colon - Sigmoid",tissueSiteDetailAbbr:"CLNSGM",tissueSiteDetailId:"Colon_Sigmoid",uberonId:"0001159"},{colorHex:"CC9955",colorRgb:"204,153,85",datasetId:"gtex_v8",eGeneCount:11686,expressedGeneCount:29574,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:368,rnaSeqSampleCount:406,sGeneCount:3459,samplingSite:"Transverse, Full thickness: mucosa and muscularis",tissueSite:"Colon",tissueSiteDetail:"Colon - Transverse",tissueSiteDetailAbbr:"CLNTRN",tissueSiteDetailId:"Colon_Transverse",uberonId:"0001157"},{colorHex:"8B7355",colorRgb:"139,115,85",datasetId:"gtex_v8",eGeneCount:10534,expressedGeneCount:28219,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:330,rnaSeqSampleCount:375,sGeneCount:3286,samplingSite:"Muscularis propria in the lowest portion of the esophagus just proximal to the stomach.",tissueSite:"Esophagus",tissueSiteDetail:"Esophagus - Gastroesophageal Junction",tissueSiteDetailAbbr:"ESPGEJ",tissueSiteDetailId:"Esophagus_Gastroesophageal_Junction",uberonId:"0004550"},{colorHex:"552200",colorRgb:"85,34,0",datasetId:"gtex_v8",eGeneCount:14675,expressedGeneCount:28332,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:497,rnaSeqSampleCount:555,sGeneCount:3986,samplingSite:"Squamous region (distal/lower third), at least 4 cm above gastroesophageal junction.",tissueSite:"Esophagus",tissueSiteDetail:"Esophagus - Mucosa",tissueSiteDetailAbbr:"ESPMCS",tissueSiteDetailId:"Esophagus_Mucosa",uberonId:"0006920"},{colorHex:"BB9988",colorRgb:"187,153,136",datasetId:"gtex_v8",eGeneCount:14110,expressedGeneCount:27982,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:465,rnaSeqSampleCount:515,sGeneCount:4088,samplingSite:"Squamous region (distal/lower third), at least 4 cm above gastroesophageal junction.",tissueSite:"Esophagus",tissueSiteDetail:"Esophagus - Muscularis",tissueSiteDetailAbbr:"ESPMSL",tissueSiteDetailId:"Esophagus_Muscularis",uberonId:"0004648"},{colorHex:"FFCCCC",colorRgb:"255,204,204",datasetId:"gtex_v8",eGeneCount:null,expressedGeneCount:29861,hasEGenes:!1,hasSGenes:!1,rnaSeqAndGenotypeSampleCount:8,rnaSeqSampleCount:9,sGeneCount:null,samplingSite:"Left (and right if needed for sufficient aliquots) starting at, and to include, fimbriated end.",tissueSite:"Fallopian Tube",tissueSiteDetail:"Fallopian Tube",tissueSiteDetailAbbr:"FLLPNT",tissueSiteDetailId:"Fallopian_Tube",uberonId:"0003889"},{colorHex:"9900FF",colorRgb:"153,0,255",datasetId:"gtex_v8",eGeneCount:10991,expressedGeneCount:27818,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:372,rnaSeqSampleCount:429,sGeneCount:3055,samplingSite:"Right atrial appendage, tip (if fatty or discolored, take more proximally)",tissueSite:"Heart",tissueSiteDetail:"Heart - Atrial Appendage",tissueSiteDetailAbbr:"HRTAA",tissueSiteDetailId:"Heart_Atrial_Appendage",uberonId:"0006631"},{colorHex:"660099",colorRgb:"102,0,153",datasetId:"gtex_v8",eGeneCount:9642,expressedGeneCount:26037,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:386,rnaSeqSampleCount:432,sGeneCount:2357,samplingSite:"Anterior left ventricle, 1 cm above apex and 1 cm from left anterior descending coronary artery.",tissueSite:"Heart",tissueSiteDetail:"Heart - Left Ventricle",tissueSiteDetailAbbr:"HRTLV",tissueSiteDetailId:"Heart_Left_Ventricle",uberonId:"0006566"},{colorHex:"22FFDD",colorRgb:"34,255,221",datasetId:"gtex_v8",eGeneCount:1260,expressedGeneCount:29263,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:73,rnaSeqSampleCount:85,sGeneCount:547,samplingSite:"Left kidney cortex.",tissueSite:"Kidney",tissueSiteDetail:"Kidney - Cortex",tissueSiteDetailAbbr:"KDNCTX",tissueSiteDetailId:"Kidney_Cortex",uberonId:"0001225"},{colorHex:"33FFC2",colorRgb:"51,255,194",datasetId:"gtex_v8",eGeneCount:null,expressedGeneCount:31935,hasEGenes:!1,hasSGenes:!1,rnaSeqAndGenotypeSampleCount:4,rnaSeqSampleCount:4,sGeneCount:null,samplingSite:"Left kidney medulla adjacent to Cortex.",tissueSite:"Kidney",tissueSiteDetail:"Kidney - Medulla",tissueSiteDetailAbbr:"KDNMDL",tissueSiteDetailId:"Kidney_Medulla",uberonId:"0001293"},{colorHex:"AABB66",colorRgb:"170,187,102",datasetId:"gtex_v8",eGeneCount:5734,expressedGeneCount:26560,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:208,rnaSeqSampleCount:226,sGeneCount:1485,samplingSite:"Central right lobe, 1 cm below capsule.",tissueSite:"Liver",tissueSiteDetail:"Liver",tissueSiteDetailAbbr:"LIVER",tissueSiteDetailId:"Liver",uberonId:"0001114"},{colorHex:"99FF00",colorRgb:"153,255,0",datasetId:"gtex_v8",eGeneCount:14113,expressedGeneCount:30049,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:515,rnaSeqSampleCount:578,sGeneCount:4774,samplingSite:"Inferior segment of left upper lobe, 1 cm below the pleural surface.",tissueSite:"Lung",tissueSiteDetail:"Lung",tissueSiteDetailAbbr:"LUNG",tissueSiteDetailId:"Lung",uberonId:"0008952"},{colorHex:"99BB88",colorRgb:"153,187,136",datasetId:"gtex_v8",eGeneCount:4836,expressedGeneCount:30270,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:144,rnaSeqSampleCount:162,sGeneCount:1648,samplingSite:"Inner surface of lower lip.",tissueSite:"Salivary Gland",tissueSiteDetail:"Minor Salivary Gland",tissueSiteDetailAbbr:"SLVRYG",tissueSiteDetailId:"Minor_Salivary_Gland",uberonId:"0006330"},{colorHex:"AAAAFF",colorRgb:"170,170,255",datasetId:"gtex_v8",eGeneCount:13532,expressedGeneCount:25586,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:706,rnaSeqSampleCount:803,sGeneCount:4056,samplingSite:"The gastrocnemius muscle, 2 cm below the patella.",tissueSite:"Muscle",tissueSiteDetail:"Muscle - Skeletal",tissueSiteDetailAbbr:"MSCLSK",tissueSiteDetailId:"Muscle_Skeletal",uberonId:"0011907"},{colorHex:"FFD700",colorRgb:"255,215,0",datasetId:"gtex_v8",eGeneCount:17285,expressedGeneCount:30082,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:532,rnaSeqSampleCount:619,sGeneCount:5297,samplingSite:"Left tibial. Peripheral tibial nerve from gastrocnemius region",tissueSite:"Nerve",tissueSiteDetail:"Nerve - Tibial",tissueSiteDetailAbbr:"NERVET",tissueSiteDetailId:"Nerve_Tibial",uberonId:"0001323"},{colorHex:"FFAAFF",colorRgb:"255,170,255",datasetId:"gtex_v8",eGeneCount:5542,expressedGeneCount:29523,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:167,rnaSeqSampleCount:180,sGeneCount:1998,samplingSite:"Most normal regions of the left ovary (and right if necessary to obt    ain sufficient aliquots).",tissueSite:"Ovary",tissueSiteDetail:"Ovary",tissueSiteDetailAbbr:"OVARY",tissueSiteDetailId:"Ovary",uberonId:"0000992"},{colorHex:"995522",colorRgb:"153,85,34",datasetId:"gtex_v8",eGeneCount:9660,expressedGeneCount:27435,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:305,rnaSeqSampleCount:328,sGeneCount:2250,samplingSite:"Mid-portion (not tail).",tissueSite:"Pancreas",tissueSiteDetail:"Pancreas",tissueSiteDetailAbbr:"PNCREAS",tissueSiteDetailId:"Pancreas",uberonId:"0001150"},{colorHex:"AAFF99",colorRgb:"170,255,153",datasetId:"gtex_v8",eGeneCount:9146,expressedGeneCount:31187,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:237,rnaSeqSampleCount:283,sGeneCount:2901,samplingSite:"Entire pituitary gland.",tissueSite:"Pituitary",tissueSiteDetail:"Pituitary",tissueSiteDetailAbbr:"PTTARY",tissueSiteDetailId:"Pituitary",uberonId:"0000007"},{colorHex:"DDDDDD",colorRgb:"221,221,221",datasetId:"gtex_v8",eGeneCount:7356,expressedGeneCount:30385,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:221,rnaSeqSampleCount:245,sGeneCount:2463,samplingSite:"Non-nodular region of representative region.",tissueSite:"Prostate",tissueSiteDetail:"Prostate",tissueSiteDetailAbbr:"PRSTTE",tissueSiteDetailId:"Prostate",uberonId:"0002367"},{colorHex:"0000FF",colorRgb:"0,0,255",datasetId:"gtex_v8",eGeneCount:15483,expressedGeneCount:29686,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:517,rnaSeqSampleCount:604,sGeneCount:4652,samplingSite:"Extension of the abdominal incision to the suprapubic area avoiding pubic hair. ",tissueSite:"Skin",tissueSiteDetail:"Skin - Not Sun Exposed (Suprapubic)",tissueSiteDetailAbbr:"SKINNS",tissueSiteDetailId:"Skin_Not_Sun_Exposed_Suprapubic",uberonId:"0036149"},{colorHex:"7777FF",colorRgb:"119,119,255",datasetId:"gtex_v8",eGeneCount:16967,expressedGeneCount:29629,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:605,rnaSeqSampleCount:701,sGeneCount:5134,samplingSite:"Left or right leg 2 cm below patella on medial side.",tissueSite:"Skin",tissueSiteDetail:"Skin - Sun Exposed (Lower leg)",tissueSiteDetailAbbr:"SKINS",tissueSiteDetailId:"Skin_Sun_Exposed_Lower_leg",uberonId:"0004264"},{colorHex:"555522",colorRgb:"85,85,34",datasetId:"gtex_v8",eGeneCount:6681,expressedGeneCount:30321,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:174,rnaSeqSampleCount:187,sGeneCount:2084,samplingSite:"Thickened mucosa corresponding to lymphoid nodules (Peyer Patches) just proximal to the ileocecal valve in the most distal part of the small intestine.",tissueSite:"Small Intestine",tissueSiteDetail:"Small Intestine - Terminal Ileum",tissueSiteDetailAbbr:"SNTTRM",tissueSiteDetailId:"Small_Intestine_Terminal_Ileum",uberonId:"0001211"},{colorHex:"778855",colorRgb:"119,136,85",datasetId:"gtex_v8",eGeneCount:10783,expressedGeneCount:29856,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:227,rnaSeqSampleCount:241,sGeneCount:2837,samplingSite:"Central region, 5 mm below capsule.",tissueSite:"Spleen",tissueSiteDetail:"Spleen",tissueSiteDetailAbbr:"SPLEEN",tissueSiteDetailId:"Spleen",uberonId:"0002106"},{colorHex:"FFDD99",colorRgb:"255,221,153",datasetId:"gtex_v8",eGeneCount:8771,expressedGeneCount:28254,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:324,rnaSeqSampleCount:359,sGeneCount:2638,samplingSite:"Body (Gently rinse mucosa with normal saline before aliquot preparation)",tissueSite:"Stomach",tissueSiteDetail:"Stomach",tissueSiteDetailAbbr:"STMACH",tissueSiteDetailId:"Stomach",uberonId:"0000945"},{colorHex:"AAAAAA",colorRgb:"170,170,170",datasetId:"gtex_v8",eGeneCount:18795,expressedGeneCount:40180,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:322,rnaSeqSampleCount:361,sGeneCount:8626,samplingSite:"Left testis (and right testis if necessary to obtain sufficient tissue for aliquots).",tissueSite:"Testis",tissueSiteDetail:"Testis",tissueSiteDetailAbbr:"TESTIS",tissueSiteDetailId:"Testis",uberonId:"0000473"},{colorHex:"006600",colorRgb:"0,102,0",datasetId:"gtex_v8",eGeneCount:17684,expressedGeneCount:30166,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:574,rnaSeqSampleCount:653,sGeneCount:5358,samplingSite:"Most grossly non-nodular normal regions from either side (whichever side is observed to be more normal).",tissueSite:"Thyroid",tissueSiteDetail:"Thyroid",tissueSiteDetailAbbr:"THYROID",tissueSiteDetailId:"Thyroid",uberonId:"0002046"},{colorHex:"FF66FF",colorRgb:"255,102,255",datasetId:"gtex_v8",eGeneCount:3577,expressedGeneCount:29192,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:129,rnaSeqSampleCount:142,sGeneCount:1524,samplingSite:"Corpus. Bivalve uterus along endocervical canal to fundus.",tissueSite:"Uterus",tissueSiteDetail:"Uterus",tissueSiteDetailAbbr:"UTERUS",tissueSiteDetailId:"Uterus",uberonId:"0000995"},{colorHex:"FF5599",colorRgb:"255,85,153",datasetId:"gtex_v8",eGeneCount:3730,expressedGeneCount:29727,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:141,rnaSeqSampleCount:156,sGeneCount:1460,samplingSite:"Anterior.",tissueSite:"Vagina",tissueSiteDetail:"Vagina",tissueSiteDetailAbbr:"VAGINA",tissueSiteDetailId:"Vagina",uberonId:"0000996"},{colorHex:"FF00BB",colorRgb:"255,0,187",datasetId:"gtex_v8",eGeneCount:12360,expressedGeneCount:24144,hasEGenes:!0,hasSGenes:!0,rnaSeqAndGenotypeSampleCount:670,rnaSeqSampleCount:755,sGeneCount:3013,samplingSite:"Femoral vein; subclavian vein and heart are other possible sites.",tissueSite:"Blood",tissueSiteDetail:"Whole Blood",tissueSiteDetailAbbr:"WHLBLD",tissueSiteDetailId:"Whole_Blood",uberonId:"0013756"}];class El extends Al{constructor(e,t,n,r,i,a,o){super(e),this.gencodeId=t,this.phenotypeId=n,this.tissueId=r,this.tissueSiteDetailAbbr=Tl()[this.tissueId].tissueSiteDetailAbbr,this.pValue=i,this.nes=a,this.type=o,this.setCoord({x:this.varId,y:this.type+"-"+this.tissueSiteDetailAbbr}),this.setR(-Math.log10(parseFloat(this.pValue.toPrecision(3)))),this.setValue(parseFloat(this.nes.toPrecision(3)))}get tissueSiteDetailId(){return this.tissueId}setGeneSymbol(e){this.geneSymbol=e}}class Ml extends class{constructor(e,t){this.label=e,this.type=t}get featureLabel(){return this.label}get featureType(){return this.type}}{constructor(e,t,n,r,i,a,o){super(o,a),this.gencodeId=e,this.id=e.split(".")[0].toLowerCase(),this.chr=t,this.start=r,this.end=i,this.type=a,this.symbol=o,this.strand=n,this.tss="+"==this.strand?this.start:this.end}get chromosome(){return this.chr}get pos(){return this.tss}get geneSymbol(){return this.symbol}}const Dl="https://gtexportal.org/rest/v1/",Il={tissueInfo:Dl+"dataset/tissueInfo",dyneqtl:Dl+"association/dyneqtl",dynsqtl:Dl+"association/dynsqtl",funcAnno:Dl+"dataset/functionalAnnotation?datasetId=gtex_v8",queryGene:Dl+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",geneExpression:Dl+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000&gencodeId=",geneModel:Dl+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",eqtls:Dl+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",sqtls:Dl+"association/singleTissueSqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:Dl+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",independentEqtl:Dl+"association/independentEqtl?gencodeId=",genes:Dl+"reference/neighborGene?",geneInfo:Dl+"reference/gene?geneId=",fineMapping:Dl+"association/fineMapping?gencodeId=",variantEqtls:Dl+"association/singleTissueEqtl?tissueSiteDetailId=Adipose_Subcutaneous,Adipose_Visceral_Omentum,Adrenal_Gland,Artery_Aorta,Artery_Coronary,Artery_Tibial,Bladder,Brain_Amygdala,Brain_Anterior_cingulate_cortex_BA24,Brain_Caudate_basal_ganglia,Brain_Cerebellar_Hemisphere,Brain_Cerebellum,Brain_Cortex,Brain_Frontal_Cortex_BA9,Brain_Hippocampus,Brain_Hypothalamus,Brain_Nucleus_accumbens_basal_ganglia,Brain_Putamen_basal_ganglia,Brain_Spinal_cord_cervical_c-1,Brain_Substantia_nigra,Breast_Mammary_Tissue,Cells_EBV-transformed_lymphocytes,Cells_Cultured_fibroblasts,Cervix_Ectocervix,Cervix_Endocervix,Colon_Sigmoid,Colon_Transverse,Esophagus_Gastroesophageal_Junction,Esophagus_Mucosa,Esophagus_Muscularis,Fallopian_Tube,Heart_Atrial_Appendage,Heart_Left_Ventricle,Kidney_Cortex,Kidney_Medulla,Liver,Lung,Minor_Salivary_Gland,Muscle_Skeletal,Nerve_Tibial,Ovary,Pancreas,Pituitary,Prostate,Skin_Not_Sun_Exposed_Suprapubic,Skin_Sun_Exposed_Lower_leg,Small_Intestine_Terminal_Ileum,Spleen,Stomach,Testis,Thyroid,Uterus,Vagina,Whole_Blood&variantId=",variantSqtls:Dl+"association/singleTissueSqtl?variantId=",gwasCats:Dl+"reference/gwascatalogbylocation",ldByVariant:Dl+"dataset/ldByVariant?variantId=",variantByLocation:Dl+"dataset/variantbylocation?sortBy=pos&sortDirection=asc"},Gl={enhancer:"rgb(193, 39, 45)",promoter:"rgb(237, 28, 36)",open_chromatin_region:"rgb(247, 147, 30)",promoter_flanking_region:"rgb(241, 90, 36)",CTCF_binding_site:"rgb(255, 221, 13)",TF_binding_site:"rgb(252, 238, 33)","3_prime_UTR_variant":"rgb(140, 198, 63)","5_prime_UTR_variant":"rgb(57, 181, 74)",frameshift_variant:"rgb(102, 45, 145)",intron_variant:"rgb(179, 179, 179)",missense_variant:"rgb(255, 143, 241)",non_coding_transcript_exon_variant:"rgb(153, 134, 117)",splice_acceptor_variant:"rgb(41, 171, 226)",splice_donor_variant:"rgb(0, 113, 188)",splice_region_variant:"rgb(46, 49, 146)",stop_gained:"rgb(255, 0, 255)",synonymous_variant:"rgb(255, 211, 206)"};function Nl(e,t="singleTissueEqtl",n="eQTL"){Ll(e,t);let r=e[t];if(void 0===r)throw`Data parsing error: ${e} ${t}`;return 0==r.length?[]:(["variantId","tissueSiteDetailId","nes","pValue"].forEach(e=>{Ll(r[0],e)}),r.map(e=>{const t=new El(e.variantId,e.gencodeId,e.phenotypeId,e.tissueSiteDetailId,e.pValue,e.nes,n);return t.setGeneSymbol(e.geneSymbol),t.setRsId(e.snpId),t}))}function ql(e,t="gencodeId",n="singleTissueEqtl"){Ll(e,n);let r=e[n];if(void 0===r)throw`Data parsing error: ${e} ${n}`;if(0==r.length)return[];[t].forEach(e=>{Ll(r[0],e)});let i=r.map(e=>e[t]);return new Set([...i])}function Ll(e,t,n=!1){if(n&&console.info(e),void 0===e.hasOwnProperty(t))throw console.error(e),"Data Parsing Error: required attribute not found."+t}const Bl=e=>`QTL type: ${e.type} <br> Tissue: ${e.tissueId}<br/> Variant: ${e.x} <br/> rs ID: ${e.rsId} <br/> NES: ${e.value}<br/> -log10(p-value): ${e.r.toPrecision(3)}`;const Rl=window.innerWidth;let Hl={eGeneBrowserTrack:{trans:{x:0,y:-20},id:"egene-browser-track"},variantBrowserTrack:{trans:{x:0,y:20},id:"variant-browser-track"},ldHeatmap:{trans:{x:0,y:80},id:"ld-heatmap"},gwasHeatmap:{trans:{x:0,y:100},id:"gwas-heatmap"},funcAnnoHeatmap:{trans:{x:0,y:110},id:"func-anno-heatmap"},qtlBubbleMap:{trans:{x:0,y:145},rowH:void 0,genes:[],filters:{tissue:void 0,type:new Set(["eQTL"])},opacity:1,showFineMap:!1},tissueMap:{}};function Pl(e){Hl.qtlBubbleMap.showFineMap=e}function jl(e){Hl.qtlBubbleMap.opacity=e}function $l(e,t,n,r,i,a,o){Qe()(`#${e}`).empty(),Hl.qtlBubbleMap.rowH=void 0,Hl.qtlBubbleMap.genes=[];const s=a[0],l=a[1];Hl.tissueMap=function(e){Ll(e,"tissueInfo");const t=e.tissueInfo;["rnaSeqAndGenotypeSampleCount","tissueSiteDetailId"].forEach(e=>{Ll(t[0],e)});let n={};return t.forEach(e=>{n[e.tissueSiteDetailAbbr]=e}),n}(a[2]);const u=function(e,t,n){let r=function(e,t){let n=t.map(e=>({varId:e[0],rSquared:parseFloat(e[1])})),r={};return n.forEach(e=>{r[e.varId]=e}),r}(0,n);return t.map(t=>{let n=t.varId||t.variantId,i=t.pos||t.varId.split("_")[1],a=t.chromosome||t.varId.split("_")[0],o=new Al(n,a,i),s=o.varId==e.varId?1:r.hasOwnProperty(o.varId)?r[o.varId].rSquared:0;return o.setValue(s),o.setCoord({x:n,y:"LD"}),o}).sort((e,t)=>e.pos-t.pos)}(t,n,r),c=function(e,t,n="tss"){[n].forEach(t=>{Ll(e[0],t)});const r=L(e,e=>Math.abs(e[n]-t));return e.filter(e=>Math.abs(e[n]-t)==r)[0]}(i,t.pos),f=function(e,t,n,r,i){Ke(e),void 0===i&&(i=`${e}-svg`);void 0===r&&(r={top:0,left:0});return We("#"+e).append("svg").attr("width",t).attr("height",n).attr("id",i).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}(e,Rl,1500,{left:180,top:80}),d=function(e,t,n,r={x:0,y:20},i="variant-browser-track"){const a=1e3*Math.ceil(q(t.map(e=>Math.abs(e.pos-n)))/1e3);let o=e.append("g").attr("id",i).attr("transform",`translate(${r.x}, ${r.y})`),s=new Cl(t,n,a);return s.render(o,.85*Rl,50,!1,"Variants","#ffffff","steelblue"),Cl.renderAxis(o,s.scale,20,!1,null,{w:100,h:20},n,"top"),o.select("#miniBrowserAxis").selectAll("text").text(e=>((parseInt(e)-n)/1e3).toString()+"k"),s}(f,u,t.pos,Hl.variantBrowserTrack.trans,Hl.variantBrowserTrack.id),h=()=>{let e=Hl.qtlBubbleMap.trans.y;Hl.qtlBubbleMap.genes.forEach((t,n)=>{const r=t.id+"-qtl";if(n>0){let t=Hl.qtlBubbleMap.genes[n-1];e+=t.bubbleMapH+30}We(`#${r}`).attr("transform",`translate(${Hl.qtlBubbleMap.trans.x}, ${e})`)})},p=(t,n)=>{t.bubbleMapH=n,Hl.qtlBubbleMap.genes.push(t);const r=We(`#${e}-svg`),i=parseInt(r.attr("height"));r.attr("height",t.bubbleMapH+i),h()};!function(e,t,n,r,i,a,o={x:0,y:-20},s="egene-browser-track"){const l=n.window;let u=e.append("g").attr("id",s).attr("transform",`translate(${o.x}, ${o.y})`),c=new Cl(r,t,l);c.setScale(.85*Rl);const f=u.selectAll(".egene-post").data(r).enter().filter(e=>c.scale(e.pos)>0).append("g").attr("id",e=>e.id);f.append("rect").attr("x",e=>c.scale(e.pos)).attr("y",(e,t)=>e.gencodeId==i?0:t%2==0?25:15).attr("height",(e,t)=>e.gencodeId==i?60:t%2==0?35:45).attr("width",.5).style("stroke","DarkSlateGray").style("stroke-width",.3),f.append("text").attr("class","egene-label").attr("x",0).attr("y",e=>e.gencodeId==i?-25:0).attr("transform",(e,t)=>`translate(${c.scale(e.pos)}, ${t%2==0?20:10})`).text(e=>e.geneSymbol).attr("font-size",e=>e.gencodeId==i?12:8).attr("fill",e=>e.gencodeId==i?"#178A7F":"DarkSlateGray"),f.style("cursor","pointer").on("click",a)}(f,t.pos,d,i,c.gencodeId,(function(n){const r=n.id+"-qtl",i=Hl.qtlBubbleMap.genes.map((e,t)=>(e.index=t,e)).filter(e=>e.gencodeId==n.gencodeId);if(i.length>0){Hl.qtlBubbleMap.genes.splice(i[0].index,1),We(`#${r}`).remove(),We(this).select("text").attr("font-size",8),We(this).select("text").attr("fill","DarkSlateGray");const t=We(`#${e}-svg`),a=parseInt(t.attr("height"));t.attr("height",a-n.bubbleMapH),h()}else{!function(e,t,n,r,i,a,o,s={x:0,y:145},l="eqtl-bubble-map",u=12,c=!1,f=1,d=!1){let h=n.append("g").attr("id",l).attr("class","qtl-map").attr("transform",`translate(${s.x}, ${s.y})`);const p=(e,n,a)=>{const o=new _l(n,"RdBu");o.addTooltip(t,`${t}-tooltip`);const s={w:.85*Rl,h:(()=>{const e=new Set(n.map(e=>e.y));return u*e.size})(),top:0,left:0};o.setScales(s,r.map(e=>e.varId),void 0),o.drawSvg(h,s,"bubbleNoClip",!1,Bl,!0,[0,15]),h.selectAll(".map-bubble").attr("opacity",f);let l=h.selectAll(".fine-map").data(a).enter().filter(e=>void 0!==o.yScale("eQTL-"+e.y)&&void 0!==o.xScale(e.varId)).append("g").classed("fine-map",!0).style("display",d?"block":"none");const p=["#1e1d1f","#ebbf23","#3698d1","#a1b3cd","#c8cda1","#cda1bb","#b7a1cd","#5eccb0","#d1bf36"],g=o.xScale.bandwidth()/2,m=o.yScale.bandwidth()/2,v=g>m?m:g;return l.append("circle").attr("cx",e=>o.xScale(e.varId)+g||0).attr("cy",e=>o.yScale("eQTL-"+e.y)+m||0).attr("r",v).attr("stroke",e=>p[parseInt(e.setId)-1]).attr("stroke-width",e=>v*e.value<.5?.5:v*e.value).attr("fill","none"),h.append("text").text(e+" QTLs").attr("x",0).attr("y",-2).style("text-anchor","end").style("font-size",16),h.selectAll(".map-grid-vline").filter(e=>e==i.varId).style("stroke-width",o.xScale.bandwidth()).style("stroke","#f5f5f5"),c?h.selectAll(".bar-map-x-label").filter(e=>e==i.varId).style("font-weight",800).style("z-index",1e3).style("opacity",.5):h.selectAll(".bar-map-x-label").remove(),o.svg=h,function(e,t){e.svg.selectAll(".bubble-map-ylabel").remove(),e.svg.select(".bar-map-y-axis").remove(),e.svg.select(".custom-map-y-axis").selectAll("*").remove(),e.svg.select(".custom-map-y-axis").remove();let n=wa(e.yScale).tickSize(0),r=e.svg.append("g").attr("class","custom-map-y-axis").attr("transform","translate(-2, 0)").call(n),i={};e.yScale.domain().forEach(e=>{let t=e.split("-")[0];i.hasOwnProperty(t)||(i[t]=0),i[t]++});const a=Object.keys(i).sort((e,t)=>e-t);e.svg.selectAll(".type-bar").remove();let o=e.svg.selectAll(".type-bar").data(a).enter().append("g").attr("class","type-bar");o.append("rect").attr("x",0).attr("y",2).attr("class",e=>e).attr("stroke","white").attr("width",10).attr("height",t=>e.yScale.step()*i[t]).attr("transform",(t,n)=>`translate(-100, ${0==n?0:e.yScale.step()*i[a[n-1]]})`),o.append("line").attr("x1",-100).attr("x2",100).attr("y1",2).attr("y2",2).attr("stroke-width",1).attr("class",e=>e).attr("transform",(t,n)=>`translate(-100, ${0==n?0:e.yScale.step()*i[a[n-1]]})`),o.append("text").attr("x",0).attr("y",2).attr("class",e=>e).text(e=>null==i[e]?"":e).style("text-anchor","end").style("font-size",12).attr("transform",(t,n)=>`translate(-105, ${0==n?15:e.yScale.step()*i[a[n-1]]+15})`),r.select("path").remove(),r.selectAll("text").attr("class","custom-map-y-label").attr("fill","#111111").style("cursor","pointer").text(e=>{let n=e.split("-")[0];const r=e.replace(`${n}-`,"");let i=0;return t.hasOwnProperty(r)||console.error(`Unrecognized ${r}`),t[r].hasOwnProperty("rnaSeqAndGenotypeSampleCount")&&(i=t[r].rnaSeqAndGenotypeSampleCount),`${r} (${i})`}).on("mouseover",(function(n){let r=n.split("-")[0];const i=n.replace(`${r}-`,"");e.tooltip.show(`${t[i].tissueSiteDetail}`),We(this).style("font-weight","bold")})).on("mouseout",(function(){e.tooltip.hide(),We(this).style("font-weight","normal")})),e.svg.selectAll(".bar-row").select("line").style("stroke",(function(){let e=We(this).attr("class");return"GWAS"==e?"#651b23":"sQTL"==e?"#0a3e7b":"#bdbdbd"})).style("stroke-width",.5)}(o,Hl.tissueMap),s.h},g=e.geneEqtl(a.gencodeId),m=e.geneSqtl(a.gencodeId),v=e.fineMap(a.gencodeId),b=[y(g),y(m),y(v)];Promise.all(b).then(e=>{let t=[];if(Hl.qtlBubbleMap.filters.type.has("eQTL")){const n=Nl(e[0]);t=t.concat(n)}if(Hl.qtlBubbleMap.filters.type.has("sQTL")){const n=Nl(e[1],"singleTissueSqtl","sQTL");t=t.concat(n)}void 0!==Hl.qtlBubbleMap.filters.tissue&&(t=t.filter(e=>{let t=e.tissueSiteDetailAbbr;return Hl.qtlBubbleMap.filters.tissue.has(t)}));const n=(e=>{const t=Tl();return e.map(e=>({tissueId:e.tissueSiteDetailId,varId:e.variantId,prop:e.pip,setId:e.setId,setSize:e.setSize,x:e.variantId,y:t[e.tissueSiteDetailId].tissueSiteDetailAbbr,value:e.pip}))})(e[2].fineMapping),r=p(a.geneSymbol,t,n);o(a,r)})}(o,e,f,u,t,n,p,Hl.qtlBubbleMap.trans,r,Hl.qtlBubbleMap.rowH,!1,Hl.qtlBubbleMap.opacity,Hl.qtlBubbleMap.showFineMap),We(this).select("text").attr("font-size",12),We(this).select("text").attr("fill","#178A7F")}}),Hl.eGeneBrowserTrack.trans,Hl.eGeneBrowserTrack.id);const g=function(e,t,n,r,i){let a=new wl(t,!1,1,"Blues"),o=e.append("g").attr("id",i).attr("transform",`translate(${r.x}, ${r.y})`);return a.draw(o,{w:.85*Rl,h:10},90,!0,0,0,"left"),o.selectAll(".exp-map-cell").on("mouseover",(function(e){We(this).style("stroke","cyan").style("stroke-width",1),a.tooltip.show("Data: LD <br>"+`Variant: ${e.x} <br>`+`R squared: ${e.displayValue} <br> <br>`+"Click the cell to recenter the visualization")})).on("mouseout",(function(){We(this).style("stroke","none"),a.tooltip.hide()})).on("click",e=>{LocusBrowserVC.init(e.x)}),o.selectAll(".exp-map-cell").filter(e=>e.x==n).style("stroke","red").style("stroke-width",1),o.selectAll(".exp-map-xlabel").remove(),a}(f,u,t.varId,Hl.ldHeatmap.trans,Hl.ldHeatmap.id);!function(e,t,n,r,i){e.append("g").attr("id","ld-line").attr("transform","translate(0, 80)").selectAll(".connect").data(t).enter().append("line").attr("class","connect").attr("x1",e=>r.scale(e.pos)).attr("x2",e=>i.xScale(e.varId)).attr("y2",0).attr("y1",-25).style("stroke",e=>e.varId==n?"red":0==e.value?"#cccccc":i.colorScale(e.value)).style("stroke-width",e=>e.varId==n?1:.3),e.selectAll(".minibrowser-feature").style("fill",e=>e.varId==n?"red":0==e.value?"#cccccc":i.colorScale(e.value))}(f,u,t.varId,d,g),function(e,t,n,r,i={x:0,y:100},a="gwas-heatmap"){let o=new Set(t.map(e=>e.pos)),s={};r.filter(e=>e.chromosome==n.chromosome&&o.has(parseInt(e.start))).forEach(e=>{s.hasOwnProperty(e.start)||(s[e.start]=new Set),s[e.start].add(e.phenotype)});const l=t.map(e=>({x:e.varId,y:"GWAS catalog",value:0,displayValue:s.hasOwnProperty(e.pos)?[...s[e.pos]].join(","):"",color:s.hasOwnProperty(e.pos)?"steelblue":"white",stroke:"lightgrey"})),u=new wl(l,!1);let c=e.append("g").attr("id",a).attr("transform",`translate(${i.x}, ${i.y})`);u.draw(c,{w:.85*Rl,h:10},90,!1,0,0,"left"),c.selectAll(".exp-map-cell").on("mouseover",(function(e){We(this).style("stroke","cyan");const t=""==e.displayValue?"NA":e.displayValue;u.tooltip.show("Data: GWAS Catalog <br>"+`Variant: ${e.x} <br>`+`Catalogs: ${t}`)})).on("mouseout",(function(){We(this).style("stroke","lightgrey"),u.tooltip.hide()})),c.selectAll(".exp-map-cell").style("opacity",.5).filter(e=>e.x==n.varId).style("stroke","red").style("stroke-width",1),c.selectAll(".exp-map-xlabel").remove()}(f,u,t,l,Hl.gwasHeatmap.trans,Hl.gwasHeatmap.id),function(e,t,n,r,i={x:0,y:110},a="fa-heatmap"){const o=function(e,t){const n=new Set(["enhancer","promoter","open_chromatin_region","promoter_flanking_region","CTCF_binding_site","TF_binding_site"]),r="functionalAnnotation";Ll(e,r),["chromosome","pos"].forEach(t=>{Ll(e[r][0],t)});let i={};const a={"3PrimeUtrVariant":"3_prime_UTR_variant","5PrimeUtrVariant":"5_prime_UTR_variant",ctcfBindingSite:"CTCF_binding_site",enhancer:"enhancer",frameshiftVariant:"frameshift_variant",intronVariant:"intron_variant",missenseVariant:"missense_variant",nonCodingTranscriptExonVariant:"non_coding_transcript_exon_variant",openChromatinRegion:"open_chromatin_region",promoter:"promoter",promoterFlankingRegion:"promoter_flanking_region",spliceAcceptorVariant:"splice_acceptor_variant",spliceDonorVariant:"splice_donor_variant",spliceRegionVariant:"splice_region_variant",stopGained:"stop_gained",synonymous_variant:"synonymouse_variant",tfBindingSite:"TF_binding_site"};return e[r].forEach(e=>{let r=Object.keys(e).filter(r=>{if(1==e[r]&&a.hasOwnProperty(r)){let i=a[r];return void 0===t||e.pos<=t.end&&e.pos>=t.start||n.has(i)}}).map(e=>a[e]);r.length>0&&(i[e.variantId]=r)}),i}(r),s=t.map(e=>{const t=null==o[e.varId]?[]:o[e.varId];return{x:e.x,y:"Func Annot",value:0,displayValue:t.join(","),color:0==t.length?"white":1==t.length?Gl[t[0]]:"black",stroke:"lightgrey"}}),l=new wl(s,!1);let u=e.append("g").attr("id",a).attr("transform",`translate(${i.x}, ${i.y})`);l.draw(u,{w:.85*Rl,h:10},90,!1,0,0,"left"),u.selectAll(".exp-map-cell").on("mouseover",(function(e){We(this).style("stroke","cyan");const t=""==e.displayValue?"NA":e.displayValue;l.tooltip.show("Data: Functional Annotations <br>"+`Variant: ${e.x} <br>`+`Functions: ${t}`)})).on("mouseout",(function(){We(this).style("stroke","lightgrey"),l.tooltip.hide()})),u.selectAll(".exp-map-cell").style("opacity",.5).filter(e=>e.x==n).style("stroke","red").style("stroke-width",1),u.selectAll(".exp-map-xlabel").remove()}(f,u,t.varId,s,Hl.funcAnnoHeatmap.trans,Hl.funcAnnoHeatmap.id),Hl.qtlBubbleMap.rowH=Math.ceil(g.xScale.bandwidth())<10?10:Math.ceil(g.xScale.bandwidth()),We(`#${c.id}`).dispatch("click"),function(){const e=()=>{const e=Hl.qtlBubbleMap.genes.map(e=>e);(()=>{let e=document.getElementsByName("dataType"),t=[];e.forEach(e=>{e.checked&&t.push(e.value)}),Hl.qtlBubbleMap.filters.type=new Set(t)})(),(()=>{let e=document.getElementsByName("tissueSite"),t=[];e.forEach(e=>{e.checked&&t.push(e.value)}),Hl.qtlBubbleMap.filters.tissue=new Set(t)})(),e.forEach(e=>{We(`#${e.id}`).dispatch("click")}),e.forEach(e=>{We(`#${e.id}`).dispatch("click")})};We("#modal-close-btn").on("click",e),We("#modal-filter-btn").on("click",e)}()}function Fl(e={x:20,y:20,scaleFactor:1,diverging:!1,bubble:!1}){let t=k(1,e.x+1),n=k(1,e.y+1),r=[];return t.forEach(t=>{t="x"+t.toString(),n.forEach(n=>{n="y"+n.toString();let i=Math.random()*e.scaleFactor;i=e.diverging&&Math.random()<.5?-i:i,r.push({x:t,y:n,value:i,displayValue:parseFloat(i.toExponential()).toPrecision(3),r:e.bubble?30*Math.random():void 0})})}),r}function Ol(e){var t=0,n=e.children,r=n&&n.length;if(r)for(;--r>=0;)t+=n[r].value;else t=1;e.value=t}function Ul(e,t){var n,r,i,a,o,s=new Yl(e),l=+e.value&&(s.value=e.value),u=[s];for(null==t&&(t=Vl);n=u.pop();)if(l&&(n.value=+n.data.value),(i=t(n.data))&&(o=i.length))for(n.children=new Array(o),a=o-1;a>=0;--a)u.push(r=n.children[a]=new Yl(i[a])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(Wl)}function Vl(e){return e.children}function zl(e){e.data=e.data.data}function Wl(e){var t=0;do{e.height=t}while((e=e.parent)&&e.height<++t)}function Yl(e){this.data=e,this.depth=this.height=0,this.parent=null}Yl.prototype=Ul.prototype={constructor:Yl,count:function(){return this.eachAfter(Ol)},each:function(e){var t,n,r,i,a=this,o=[a];do{for(t=o.reverse(),o=[];a=t.pop();)if(e(a),n=a.children)for(r=0,i=n.length;r<i;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(e){for(var t,n,r,i=this,a=[i],o=[];i=a.pop();)if(o.push(i),t=i.children)for(n=0,r=t.length;n<r;++n)a.push(t[n]);for(;i=o.pop();)e(i);return this},eachBefore:function(e){for(var t,n,r=this,i=[r];r=i.pop();)if(e(r),t=r.children)for(n=t.length-1;n>=0;--n)i.push(t[n]);return this},sum:function(e){return this.eachAfter((function(t){for(var n=+e(t.data)||0,r=t.children,i=r&&r.length;--i>=0;)n+=r[i].value;t.value=n}))},sort:function(e){return this.eachBefore((function(t){t.children&&t.children.sort(e)}))},path:function(e){for(var t=this,n=function(e,t){if(e===t)return e;var n=e.ancestors(),r=t.ancestors(),i=null;e=n.pop(),t=r.pop();for(;e===t;)i=e,e=n.pop(),t=r.pop();return i}(t,e),r=[t];t!==n;)t=t.parent,r.push(t);for(var i=r.length;e!==n;)r.splice(i,0,e),e=e.parent;return r},ancestors:function(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t},descendants:function(){var e=[];return this.each((function(t){e.push(t)})),e},leaves:function(){var e=[];return this.eachBefore((function(t){t.children||e.push(t)})),e},links:function(){var e=this,t=[];return e.each((function(n){n!==e&&t.push({source:n.parent,target:n})})),t},copy:function(){return Ul(this).eachBefore(zl)}};function Xl(e){this._context=e}Xl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}};function Ql(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function Kl(e,t){this._context=e,this._k=(1-t)/6}Kl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ql(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:Ql(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};(function e(t){function n(e){return new Kl(e,t)}return n.tension=function(t){return e(+t)},n})(0);Fl({x:50,y:10,scaleFactor:1e3}),k(0,2e3).map(Rs(2,1)),k(0,2e3).map(Rs(5,1)),k(0,2e3).map(Rs(10,1)),k(0,2e3).map(Rs(5,1)),k(0,2e3).map(Rs(3,1)),k(0,2e3).map(Rs(1,1)),k(0,2e3).map(Rs(2,1)),k(0,2e3).map(Rs(3,1)),k(0,2e3).map(Rs(5,1)),Fl({x:50,y:10,scaleFactor:1,diverging:!0,bubble:!0}),Fl({x:2,y:2,scaleFactor:1});n(24);n.d(t,"init",(function(){return tu}));let Zl=1e4,Jl=.2,eu={variantByLocation:(e,t,n)=>`${Il.variantByLocation}&chromosome=${e}&start=${t}&end=${n}`,ld:e=>Il.ldByVariant+e,variantEqtl:e=>Il.variantEqtls+e,variantSqtl:e=>Il.variantSqtls+e,funcAnnoGtex:(e,t)=>Il.funcAnno+`&chromosome=${e}&start=${t[0]}&end=${t[1]}`,gwasCat:(e,t)=>Il.gwasCats+`?chromosome=${e}&start=${t[0]}&end=${t[1]}`,tissueInfo:Il.tissueInfo,geneEqtl:e=>Il.eqtls+e,geneSqtl:e=>Il.sqtls+e,fineMap:e=>Il.fineMapping+e};function tu(e="chr11_65592772_G_A_b38",t="locus-browser",n="LD",r){We("#locus-browser-spinner").style("display","block"),We(`#${t}`).select("svg").remove(),We("#q-variant").text(""),We("#heatmapTooltip").style("opacity",0),void 0!==r&&(eu=r);const i=new Al(e),a=[y(eu.ld(i.varId),{credentials:"include"}),y(eu.variantByLocation(i.chromosome,i.pos-1e6,i.pos+1e6))];Promise.all(a).then(r=>{We("#locus-browser-spinner").style("display","none");let a=r[0].ld,o=r[1].variantbylocation;nu(t,n,i,o,a),function(e,t,n,r,i){(function(e){Qe()("#q-variant").text(e)})(e),function(e,t,n,r){Qe()("#ld-mode").unbind().on("click",(function(){Qe()("#ld-mode").addClass("active"),Qe()("#win-mode").removeClass("active"),Qe()("#ld-cutoff-ui").show(),Qe()("#win-size-ui").hide(),nu(e,"LD",t,n,r)})),Qe()("#win-mode").unbind().on("click",(function(){Qe()("#win-mode").addClass("active"),Qe()("#ld-mode").removeClass("active"),Qe()("#win-size-ui").show(),Qe()("#ld-cutoff-ui").hide(),nu(e,"WIN",t,n,r)}))}(t,n,r,i),function(e,t,n,r){Qe()("#ld-slider").unbind().mouseup((function(){nu(e,"LD",t,n,r)})),Qe()("#ld-slider").on("input",(function(){const e=Qe()(this).val();Qe()("#ld-cutoff").val(e),Jl=parseFloat(e)})),Qe()("#ld-cutoff").unbind().keypress((function(i){if("13"==(i.keyCode?i.keyCode:i.which)){const i=Qe()(this).val();Qe()("#ld-slider").val(i),Jl=parseFloat(i),nu(e,"LD",t,n,r)}})),Qe()("#win-slider").unbind().mouseup((function(){nu(e,"WIN",t,n,r)})),Qe()("#win-slider").on("input",(function(){const e=Qe()(this).val();Qe()("#win-size").val(e),Zl=1e3*parseFloat(e)})),Qe()("#win-size").unbind().keypress((function(i){if("13"==(i.keyCode?i.keyCode:i.which)){const i=Qe()(this).val();Qe()("#win-slider").val(i),Zl=1e3*parseFloat(i),nu(e,"WIN",t,n,r)}}))}(t,n,r,i),Qe()("#fine-mapping-off").unbind().on("click",(function(){console.log("off!!"),Qe()("#fine-mapping-off").addClass("active"),Qe()("#fine-mapping-on").removeClass("active"),Qe()(".fine-map").hide(),Pl(!1)})),Qe()("#fine-mapping-on").unbind().on("click",(function(){console.log("on!!"),Qe()("#fine-mapping-on").addClass("active"),Qe()("#fine-mapping-off").removeClass("active"),Qe()(".fine-map").show(),Pl(!0)})),Qe()("#qtl-view-off").unbind().on("click",(function(){Qe()("#qtl-view-off").addClass("active"),Qe()("#qtl-view-on").removeClass("active"),Ye(".map-bubble").style("opacity",.1),jl(.1)})),Qe()("#qtl-view-on").unbind().on("click",(function(){Qe()("#qtl-view-on").addClass("active"),Qe()("#qtl-view-off").removeClass("active"),Ye(".map-bubble").style("opacity",1),jl(1)})),function(){let e=kl.filter(e=>e.hasEGenes||e.hasSGenes);0==Qe()("#tissue-menu input").length&&function(e,t,n="modal-clear-tissues-btn",r="modal-all-tissues-btn"){We(`#${t}`).selectAll("*").remove();let i=document.getElementById(t);e.forEach(e=>{let t=document.createElement("input");t.type="checkbox",t.value=e.tissueSiteDetailAbbr,t.name="tissueSite",t.checked=!0;let n=document.createElement("label");n.innerHTML=`${e.tissueSiteDetail} (${e.tissueSiteDetailAbbr}) `,n.classList.add("tissue-menu-item"),i.appendChild(t),i.appendChild(n),i.appendChild(document.createElement("br"))}),We(`#${n}`).on("click",()=>{document.getElementsByName("tissueSite").forEach(e=>{e.checked=!1})}),We(`#${r}`).on("click",()=>{document.getElementsByName("tissueSite").forEach(e=>{e.checked=!0})})}(e,"tissue-menu")}()}(e,t,i,o,a)})}function nu(e,t,n,r,i){0==i.length&&(t="WIN");let a=[],o=[],s="LD"==t?Jl:Zl;switch(t){case"LD":{let e=new Set([n.pos]);i.filter(e=>e[1]>=s).forEach(t=>{t[0]=t[0].replace(",","").replace(n.varId,"");let r=new Al(t[0]).pos;e.add(Math.abs(r))}),a=A([...e]),o=r.filter(t=>{let n=parseInt(t.pos);return e.has(n)});break}case"WIN":a=[n.pos-s,n.pos+s],o=r.filter(e=>{let t=parseInt(e.pos);return t>=a[0]&&t<=a[1]});break;default:console.error(`Unrecognized view mode: ${t}`)}!function(e,t,n,r,i){const a=eu.funcAnnoGtex(t.chromosome,i),o=eu.variantEqtl(t.varId),s=eu.variantSqtl(t.varId),l=eu.gwasCat(t.chromosome,i),u=[y(o,{credentials:"include"}),y(s,{credentials:"include"}),y(a,{credentials:"include"}),y(l,{credentials:"include"}),y(eu.tissueInfo,{credentials:"include"})];Promise.all(u).then(i=>{const a=ql(i.shift(),"gencodeId");ql(i.shift(),"gencodeId","singleTissueSqtl").forEach(e=>{a.has(e)||a.add(e)});const o=[...a].join(",");y(`${Il.geneInfo}${o}`).then(a=>{let o=a.gene.map(e=>new Ml(e.gencodeId,e.chromosome,e.strand,parseInt(e.start),parseInt(e.end),e.geneType,e.geneSymbol));$l(e,t,n,r,o,i,eu)})})}(e,n,o,i,a)}},7:function(e,t,n){(function(n){var r,i,a;i=[],void 0===(a="function"==typeof(r=function(){"use strict";function t(e,t,n){var r=new XMLHttpRequest;r.open("GET",e),r.responseType="blob",r.onload=function(){o(r.response,t,n)},r.onerror=function(){console.error("could not download file")},r.send()}function r(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function i(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(n){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var a="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof n&&n.global===n?n:void 0,o=a.saveAs||("object"!=typeof window||window!==a?function(){}:"download"in HTMLAnchorElement.prototype?function(e,n,o){var s=a.URL||a.webkitURL,l=document.createElement("a");n=n||e.name||"download",l.download=n,l.rel="noopener","string"==typeof e?(l.href=e,l.origin===location.origin?i(l):r(l.href)?t(e,n,o):i(l,l.target="_blank")):(l.href=s.createObjectURL(e),setTimeout((function(){s.revokeObjectURL(l.href)}),4e4),setTimeout((function(){i(l)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,n,a){if(n=n||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(function(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}(e,a),n);else if(r(e))t(e,n,a);else{var o=document.createElement("a");o.href=e,o.target="_blank",setTimeout((function(){i(o)}))}}:function(e,n,r,i){if((i=i||open("","_blank"))&&(i.document.title=i.document.body.innerText="downloading..."),"string"==typeof e)return t(e,n,r);var o="application/octet-stream"===e.type,s=/constructor/i.test(a.HTMLElement)||a.safari,l=/CriOS\/[\d]+/.test(navigator.userAgent);if((l||o&&s)&&"object"==typeof FileReader){var u=new FileReader;u.onloadend=function(){var e=u.result;e=l?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),i?i.location.href=e:location=e,i=null},u.readAsDataURL(e)}else{var c=a.URL||a.webkitURL,f=c.createObjectURL(e);i?i.location=f:location.href=f,i=null,setTimeout((function(){c.revokeObjectURL(f)}),4e4)}});a.saveAs=o.saveAs=o,e.exports=o})?r.apply(t,i):r)||(e.exports=a)}).call(this,n(23))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,